[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.2","content-config-digest","c0564a269cc462aa","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://nick-tomlin.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,45,46,67,68,116,117,136,137,155,156,212,213,239,240,282,283,301,302,338,339,399,400,419,420,468,469,499,500,530,531,621,622,652,653,671,672,690,691,721,722,762,763,781,782,820,821],"emotional-sanity-for-beginners",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"rendered":22,"legacyId":44},{"title":14,"date":15,"layout":16,"disqusId":17,"comments":18},"emotional sanity for beginners",["Date","2013-03-14T00:00:00.000Z"],"post","/2013/03/14/emotional-sanity-for-beginners",true,"I often find that assesement of my abilities varies from day to day, mostly depending on wether I am able to \"figure thigns out.\" It is easy to get discouraged when the simplest (or seemingly simplest) things can take hours to solve. The constant flow of \"best practices\" and \"50 best javscript techniques\" etc. etc. further this by making me feel that I am not only stuck, but that I am actively drowning in my own ignorance and lack of skill.\n\nI've been reading the excellent [Apprenticeship Patterns](http://ofps.oreilly.com/titles/9780596518387/), which has sparked me to reflect on the topic of mainting a healthy outlook as a novice developer.\n\nThe book presents several patterns for coping with the, at times, overwhelming process of learning development. The two that most challenge me are \"Retreat into Competence\", and \"Create feedback loops\".\n\n# Retreat into competenece\nThis is the most challenging because It takes a lot of forethought. I find that I am always pursuing something new in a \"path of least resistence\" fashion. The result of this is that I give up too easily, and trade a wide range of shallow experiences with languages/libraries for a deep knowledge of one thing.\n\nThe challenging part of this is that what I am competent at (at least at this stage) is not a very large, or interesting, list of skills. It's easy to get discouraged because right now my competenece is writing simple jQuery plugins, or node webscrapers.\n\n# Create feedback loops\nGet feedback on your project as soon as possible; through use of testing, peer review, andd linting tools.\n\nThis is a pattern that appeals the most to me, but i've found it to be difficult in my current situation, and pyschologically challenging (it's a vulnerable place to put yourself in).\n\n## Drink from a teacup\n\nThis is really a regurgitation of AP's \"Use the Source\" pattern, but i've found it a helpful metaphor in pursuing that pattern. It's far too easy to get overwhelmed by the latest","src/content/posts/emotional-sanity-for-beginners.md","12743a25ff33c563",{"html":23,"metadata":24},"\u003Cp>I often find that assesement of my abilities varies from day to day, mostly depending on wether I am able to “figure thigns out.” It is easy to get discouraged when the simplest (or seemingly simplest) things can take hours to solve. The constant flow of “best practices” and “50 best javscript techniques” etc. etc. further this by making me feel that I am not only stuck, but that I am actively drowning in my own ignorance and lack of skill.\u003C/p>\n\u003Cp>I’ve been reading the excellent \u003Ca href=\"http://ofps.oreilly.com/titles/9780596518387/\">Apprenticeship Patterns\u003C/a>, which has sparked me to reflect on the topic of mainting a healthy outlook as a novice developer.\u003C/p>\n\u003Cp>The book presents several patterns for coping with the, at times, overwhelming process of learning development. The two that most challenge me are “Retreat into Competence”, and “Create feedback loops”.\u003C/p>\n\u003Ch1 id=\"retreat-into-competenece\">Retreat into competenece\u003C/h1>\n\u003Cp>This is the most challenging because It takes a lot of forethought. I find that I am always pursuing something new in a “path of least resistence” fashion. The result of this is that I give up too easily, and trade a wide range of shallow experiences with languages/libraries for a deep knowledge of one thing.\u003C/p>\n\u003Cp>The challenging part of this is that what I am competent at (at least at this stage) is not a very large, or interesting, list of skills. It’s easy to get discouraged because right now my competenece is writing simple jQuery plugins, or node webscrapers.\u003C/p>\n\u003Ch1 id=\"create-feedback-loops\">Create feedback loops\u003C/h1>\n\u003Cp>Get feedback on your project as soon as possible; through use of testing, peer review, andd linting tools.\u003C/p>\n\u003Cp>This is a pattern that appeals the most to me, but i’ve found it to be difficult in my current situation, and pyschologically challenging (it’s a vulnerable place to put yourself in).\u003C/p>\n\u003Ch2 id=\"drink-from-a-teacup\">Drink from a teacup\u003C/h2>\n\u003Cp>This is really a regurgitation of AP’s “Use the Source” pattern, but i’ve found it a helpful metaphor in pursuing that pattern. It’s far too easy to get overwhelmed by the latest\u003C/p>",{"headings":25,"localImagePaths":37,"remoteImagePaths":38,"frontmatter":39,"imagePaths":43},[26,30,33],{"depth":27,"slug":28,"text":29},1,"retreat-into-competenece","Retreat into competenece",{"depth":27,"slug":31,"text":32},"create-feedback-loops","Create feedback loops",{"depth":34,"slug":35,"text":36},2,"drink-from-a-teacup","Drink from a teacup",[],[],{"layout":16,"title":14,"date":40,"comments":18,"published":41,"external-url":42,"categories":42,"disqusId":17},"2013-03-14",false,null,[],"emotional-sanity-for-beginners.md","hacking-on-jquery",{"id":45,"data":47,"body":51,"filePath":52,"digest":53,"rendered":54,"legacyId":66},{"title":48,"date":49,"layout":16,"disqusId":50,"comments":18},"Hacking on Jquery",["Date","2013-03-19T00:00:00.000Z"],"/2013/03/19/hacking-on-jquery","Javascript is a beautiful language, and even though I am an apprentice programer, my favorite of the handful of languages I can code in.\n\njQuery is a monolith on the front-end side of things. If I did not use JS in other projects (or use node), it would be my only interaction with the language. In some ways, this is a beautiful thing. Parsing the DOM by hand, while not insanely difficult (Especially with newer ECMA functions like ``getElementsByClassName``) is time consuming. jQuery dramatically reduces the boilerplate code I would have to write over and over again. Still, It bugs me that I end up needing to include it on projects simply because they require functionality that is slightly above the scope of what I can do with Vinalla JS.\n\nTo combat that, and follow the \"Use the Source\" [pattern](http://ofps.oreilly.com/titles/9780596518387/perpetual_learning.html#use_the_source), I decided to crack open the jQuery source and do some digging whenever I did something with jQuery.\n\nAfter a day of doing this, I realized how little I understood about jQuery's dom selection methods, and decided I would go a level deeper and look at [Sizzle](http://sizzlejs.com/) (the selector engine that jQuery runs on top of).\n\n\nSo far I am:\n\n1. Impressed by how much work jQuery does. It's easy to say \"why use a 45k library when you can write Vanilla js\", but that gets a lot harder when you actually start cutting cross-browser code.\n2. Hybridize. After seeing the way that jQuery works, I am a lot less afraid to mix Vanilla js with jQuery. ``this`` is not so different from ``$(this)``, and in many casses the two can be used interchangably.\n\n## The future:\n\nI agree with the creators of [ender](https://github.com/ender-js/Ender) that modularized \"no-library libraries\" are the way to go. I'm still digging into jQuery, but I am going to start using Ender on smaller projects.","src/content/posts/hacking-on-jquery.md","c08d0eeaab0d8c48",{"html":55,"metadata":56},"\u003Cp>Javascript is a beautiful language, and even though I am an apprentice programer, my favorite of the handful of languages I can code in.\u003C/p>\n\u003Cp>jQuery is a monolith on the front-end side of things. If I did not use JS in other projects (or use node), it would be my only interaction with the language. In some ways, this is a beautiful thing. Parsing the DOM by hand, while not insanely difficult (Especially with newer ECMA functions like \u003Ccode>getElementsByClassName\u003C/code>) is time consuming. jQuery dramatically reduces the boilerplate code I would have to write over and over again. Still, It bugs me that I end up needing to include it on projects simply because they require functionality that is slightly above the scope of what I can do with Vinalla JS.\u003C/p>\n\u003Cp>To combat that, and follow the “Use the Source” \u003Ca href=\"http://ofps.oreilly.com/titles/9780596518387/perpetual_learning.html#use_the_source\">pattern\u003C/a>, I decided to crack open the jQuery source and do some digging whenever I did something with jQuery.\u003C/p>\n\u003Cp>After a day of doing this, I realized how little I understood about jQuery’s dom selection methods, and decided I would go a level deeper and look at \u003Ca href=\"http://sizzlejs.com/\">Sizzle\u003C/a> (the selector engine that jQuery runs on top of).\u003C/p>\n\u003Cp>So far I am:\u003C/p>\n\u003Col>\n\u003Cli>Impressed by how much work jQuery does. It’s easy to say “why use a 45k library when you can write Vanilla js”, but that gets a lot harder when you actually start cutting cross-browser code.\u003C/li>\n\u003Cli>Hybridize. After seeing the way that jQuery works, I am a lot less afraid to mix Vanilla js with jQuery. \u003Ccode>this\u003C/code> is not so different from \u003Ccode>$(this)\u003C/code>, and in many casses the two can be used interchangably.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"the-future\">The future:\u003C/h2>\n\u003Cp>I agree with the creators of \u003Ca href=\"https://github.com/ender-js/Ender\">ender\u003C/a> that modularized “no-library libraries” are the way to go. I’m still digging into jQuery, but I am going to start using Ender on smaller projects.\u003C/p>",{"headings":57,"localImagePaths":61,"remoteImagePaths":62,"frontmatter":63,"imagePaths":65},[58],{"depth":34,"slug":59,"text":60},"the-future","The future:",[],[],{"layout":16,"title":48,"date":64,"comments":18,"published":41,"external-url":42,"categories":42,"disqusId":50},"2013-03-19",[],"hacking-on-jquery.md","idk-spiking",{"id":67,"data":69,"body":72,"filePath":73,"digest":74,"rendered":75,"legacyId":115},{"title":70,"date":71,"comments":18},"IDK: Spiking",["Date","2024-02-19T00:00:00.000Z"],"I first encountered the term \"spike\" when someone on my team announced they were \"doing a spike\" at a standup and I pretended to know what they were talking about. This post is an attempt to define the term for my past self and any other fellow travelers.\n\n# What is a spike?\n\nIn a few words: a time-limited investigation into something a team wants to accomplish, with the purpose of better understanding the length and complexity of the task. Often, this is used in estimating and breaking the work down, but sometimes it can be used to understand if the task is worth doing.\n\nLike a prototype of proof of concept, spike code is not supposed to be production-grade and as such should generally _not be merged into your `main`_. As always, refer to [the canon](http://www.extremeprogramming.org/rules/spike.html) to know more.\n\n## An example\n\nMy team needed to change a core part of our front-end infrastructure, that was sitting on our roadmap as a large (4-6 week) piece of work.\nWhile we knew the general shape and size of the work, there were a lot of unknowns, especially on some of the more critical aspects. We needed to know more so we could refine\nthe general direction for our next quarter: the perfect opportunity for a spike.\n\nTo start, I created a document detailing some of the outcomes I was hoping for, and some of the biggest \"known unknowns\" that could potentially contribute to an increase in scope. My goal was not to write all the code that would be eventually needed but to write enough to get those hard-to-reach areas and understand them better.\n\nAfter a week of disabling tests, hacking around safeguards, and gleefully messing with global variables, I had a much better idea of the shape of the problem. Some of the critical pieces of work were actually going to be easier than I had originally thought, and I discovered some libraries or patterns that would make them trivial; some of them were going to be harder, and I earmarked them as things to research further and tackle early when I started the work in earnest.\n\nI didn't end my spike merging any code. Instead, I had a pull request that highlighted areas of relative ease or difficulty, a document describing the process and what I'd learned, and a much more confident estimate of how long things were going to take.\n\n# What a good spike does\n\n## ➕ It helps surface unknowns or blockers\n\nThe planning phase is a lot like planning a hike from a map. It's easy to draw a straightforward path from A-B and estimate how long it will take (\"short hike; 10 miles: two miles an hour: 5 hours\"). Unfortunately, maps can't always account for things like flooded trails or fallen trees: the inevitable hiccups of a world in motion.\n\nThe purpose of a spike isn't to drain a flooded trail or clear fallen trees, it's to gauge the size and impact of each problem and the viability of potential solutions. Or, simply to verify that it's going to be an easy hike.\nThe end result is a lot better understanding of the issues you'll face on the ground (or deep into the codebase) that you simply cannot know when you plan.\n\n### ⚠️ Danger zone: Lack of breadth\n\nIf a spike stops at the \"happy path\" it may not be doing its job. A spike should try to not only show something can work in the best circumstances, but also uncover areas of friction, potential roadmap impacting unknowns, or future tech debt that may result from pursuing the direction of the spike. That doesn't mean a spike should get\ncaught up in edge cases, but it should help illuminate problem areas.\n\n## ➕ It Increases your team's understanding of a problem\n\nSince a spike is typically focused on illuminating the core problems and solutions to a given problem, you and your team can focus on that in isolation without being distracted by all the other requirements and ceremony that accompany a traditional production grade pull request. This extra focus not only helps provide a richer context for the eventual \"prod\" pull request and long-term maintenance but tends to nudge otherwise decent solutions towards greatness, simply by being able to incorporate more perspectives into the process.\n\n### ⚠️ Danger zone: No outputs\n\nIn general, a spike should result in two things:\n\n**An artifact**: something that the engineer(s) in charge of the spike and teammates can refer to and discuss.\nThis could take the shape of a document outlining what you've discovered, a PR demonstrating it, or both!\n\n**A discussion**: an actual conversation about the results. For small work this can be a 5-minute summary in a standup (\"I looked into using framework x to solve our issues with state management and it seems like it will take more time than Y but be worth it\")\nor a series of meetings and presentations to review and discuss. For small or 1-person teams (go you!) this can take the form of stepping back from the work and reflecting on it (journaling, talking to yourself, writing a blog post).\n\n## ➕ It results in more maintainable solutions\n\nWhen done well, the production code that follows a spike should be of higher quality _and_ easier to understand. Having taken the time to explore, and understand, almost always results in better (and hopefully less!) code in the moment and code that is easier to maintain in the future. Not taking the time, (as I sometimes do T_T) often results in corner-cutting or sub-optimal solutions.\n\n### ⚠️ Danger zone: the false spike\n\nIf a spike gets merged into `main`, that probably means:\n\n- It's not a true spike, since time was spent making the code production grade\n- It's not production-ready! 🙀\n\nAs I mentioned earlier, there's nothing wrong with production code using elements or solutions derived from a spike, but it should be accompanied by all the things a team expects from production code (tests, docs, extra love, and care).\n\n\n# A useful tool, not a process\n\nLike a lot of terms that sprung out of the original [agile](https://agilemanifesto.org/principles.html) movement, the Spike can be useful part of a relational, customer driven model of building software. It empowers engineers to more accurately understand the commitment of time and energy involved in doing something, and to ultimately deliver more value to their users. \n\nIf you or your team are spiking purely because you feel like you should, or it's part of some delivery checklist (prescribed by the [Agile industrial complex](https://martinfowler.com/articles/agile-aus-2018.html)), work to re-focus on that original intent. You you are working in a truly agile manner and a spike isn't benefit you, then put it back into your collection and move on!","src/content/posts/idk-spiking.md","93d8ff0065e92043",{"html":76,"metadata":77},"\u003Cp>I first encountered the term “spike” when someone on my team announced they were “doing a spike” at a standup and I pretended to know what they were talking about. This post is an attempt to define the term for my past self and any other fellow travelers.\u003C/p>\n\u003Ch1 id=\"what-is-a-spike\">What is a spike?\u003C/h1>\n\u003Cp>In a few words: a time-limited investigation into something a team wants to accomplish, with the purpose of better understanding the length and complexity of the task. Often, this is used in estimating and breaking the work down, but sometimes it can be used to understand if the task is worth doing.\u003C/p>\n\u003Cp>Like a prototype of proof of concept, spike code is not supposed to be production-grade and as such should generally \u003Cem>not be merged into your \u003Ccode>main\u003C/code>\u003C/em>. As always, refer to \u003Ca href=\"http://www.extremeprogramming.org/rules/spike.html\">the canon\u003C/a> to know more.\u003C/p>\n\u003Ch2 id=\"an-example\">An example\u003C/h2>\n\u003Cp>My team needed to change a core part of our front-end infrastructure, that was sitting on our roadmap as a large (4-6 week) piece of work.\nWhile we knew the general shape and size of the work, there were a lot of unknowns, especially on some of the more critical aspects. We needed to know more so we could refine\nthe general direction for our next quarter: the perfect opportunity for a spike.\u003C/p>\n\u003Cp>To start, I created a document detailing some of the outcomes I was hoping for, and some of the biggest “known unknowns” that could potentially contribute to an increase in scope. My goal was not to write all the code that would be eventually needed but to write enough to get those hard-to-reach areas and understand them better.\u003C/p>\n\u003Cp>After a week of disabling tests, hacking around safeguards, and gleefully messing with global variables, I had a much better idea of the shape of the problem. Some of the critical pieces of work were actually going to be easier than I had originally thought, and I discovered some libraries or patterns that would make them trivial; some of them were going to be harder, and I earmarked them as things to research further and tackle early when I started the work in earnest.\u003C/p>\n\u003Cp>I didn’t end my spike merging any code. Instead, I had a pull request that highlighted areas of relative ease or difficulty, a document describing the process and what I’d learned, and a much more confident estimate of how long things were going to take.\u003C/p>\n\u003Ch1 id=\"what-a-good-spike-does\">What a good spike does\u003C/h1>\n\u003Ch2 id=\"-it-helps-surface-unknowns-or-blockers\">➕ It helps surface unknowns or blockers\u003C/h2>\n\u003Cp>The planning phase is a lot like planning a hike from a map. It’s easy to draw a straightforward path from A-B and estimate how long it will take (“short hike; 10 miles: two miles an hour: 5 hours”). Unfortunately, maps can’t always account for things like flooded trails or fallen trees: the inevitable hiccups of a world in motion.\u003C/p>\n\u003Cp>The purpose of a spike isn’t to drain a flooded trail or clear fallen trees, it’s to gauge the size and impact of each problem and the viability of potential solutions. Or, simply to verify that it’s going to be an easy hike.\nThe end result is a lot better understanding of the issues you’ll face on the ground (or deep into the codebase) that you simply cannot know when you plan.\u003C/p>\n\u003Ch3 id=\"️-danger-zone-lack-of-breadth\">⚠️ Danger zone: Lack of breadth\u003C/h3>\n\u003Cp>If a spike stops at the “happy path” it may not be doing its job. A spike should try to not only show something can work in the best circumstances, but also uncover areas of friction, potential roadmap impacting unknowns, or future tech debt that may result from pursuing the direction of the spike. That doesn’t mean a spike should get\ncaught up in edge cases, but it should help illuminate problem areas.\u003C/p>\n\u003Ch2 id=\"-it-increases-your-teams-understanding-of-a-problem\">➕ It Increases your team’s understanding of a problem\u003C/h2>\n\u003Cp>Since a spike is typically focused on illuminating the core problems and solutions to a given problem, you and your team can focus on that in isolation without being distracted by all the other requirements and ceremony that accompany a traditional production grade pull request. This extra focus not only helps provide a richer context for the eventual “prod” pull request and long-term maintenance but tends to nudge otherwise decent solutions towards greatness, simply by being able to incorporate more perspectives into the process.\u003C/p>\n\u003Ch3 id=\"️-danger-zone-no-outputs\">⚠️ Danger zone: No outputs\u003C/h3>\n\u003Cp>In general, a spike should result in two things:\u003C/p>\n\u003Cp>\u003Cstrong>An artifact\u003C/strong>: something that the engineer(s) in charge of the spike and teammates can refer to and discuss.\nThis could take the shape of a document outlining what you’ve discovered, a PR demonstrating it, or both!\u003C/p>\n\u003Cp>\u003Cstrong>A discussion\u003C/strong>: an actual conversation about the results. For small work this can be a 5-minute summary in a standup (“I looked into using framework x to solve our issues with state management and it seems like it will take more time than Y but be worth it”)\nor a series of meetings and presentations to review and discuss. For small or 1-person teams (go you!) this can take the form of stepping back from the work and reflecting on it (journaling, talking to yourself, writing a blog post).\u003C/p>\n\u003Ch2 id=\"-it-results-in-more-maintainable-solutions\">➕ It results in more maintainable solutions\u003C/h2>\n\u003Cp>When done well, the production code that follows a spike should be of higher quality \u003Cem>and\u003C/em> easier to understand. Having taken the time to explore, and understand, almost always results in better (and hopefully less!) code in the moment and code that is easier to maintain in the future. Not taking the time, (as I sometimes do T_T) often results in corner-cutting or sub-optimal solutions.\u003C/p>\n\u003Ch3 id=\"️-danger-zone-the-false-spike\">⚠️ Danger zone: the false spike\u003C/h3>\n\u003Cp>If a spike gets merged into \u003Ccode>main\u003C/code>, that probably means:\u003C/p>\n\u003Cul>\n\u003Cli>It’s not a true spike, since time was spent making the code production grade\u003C/li>\n\u003Cli>It’s not production-ready! 🙀\u003C/li>\n\u003C/ul>\n\u003Cp>As I mentioned earlier, there’s nothing wrong with production code using elements or solutions derived from a spike, but it should be accompanied by all the things a team expects from production code (tests, docs, extra love, and care).\u003C/p>\n\u003Ch1 id=\"a-useful-tool-not-a-process\">A useful tool, not a process\u003C/h1>\n\u003Cp>Like a lot of terms that sprung out of the original \u003Ca href=\"https://agilemanifesto.org/principles.html\">agile\u003C/a> movement, the Spike can be useful part of a relational, customer driven model of building software. It empowers engineers to more accurately understand the commitment of time and energy involved in doing something, and to ultimately deliver more value to their users.\u003C/p>\n\u003Cp>If you or your team are spiking purely because you feel like you should, or it’s part of some delivery checklist (prescribed by the \u003Ca href=\"https://martinfowler.com/articles/agile-aus-2018.html\">Agile industrial complex\u003C/a>), work to re-focus on that original intent. You you are working in a truly agile manner and a spike isn’t benefit you, then put it back into your collection and move on!\u003C/p>",{"headings":78,"localImagePaths":110,"remoteImagePaths":111,"frontmatter":112,"imagePaths":114},[79,82,85,88,91,95,98,101,104,107],{"depth":27,"slug":80,"text":81},"what-is-a-spike","What is a spike?",{"depth":34,"slug":83,"text":84},"an-example","An example",{"depth":27,"slug":86,"text":87},"what-a-good-spike-does","What a good spike does",{"depth":34,"slug":89,"text":90},"-it-helps-surface-unknowns-or-blockers","➕ It helps surface unknowns or blockers",{"depth":92,"slug":93,"text":94},3,"️-danger-zone-lack-of-breadth","⚠️ Danger zone: Lack of breadth",{"depth":34,"slug":96,"text":97},"-it-increases-your-teams-understanding-of-a-problem","➕ It Increases your team’s understanding of a problem",{"depth":92,"slug":99,"text":100},"️-danger-zone-no-outputs","⚠️ Danger zone: No outputs",{"depth":34,"slug":102,"text":103},"-it-results-in-more-maintainable-solutions","➕ It results in more maintainable solutions",{"depth":92,"slug":105,"text":106},"️-danger-zone-the-false-spike","⚠️ Danger zone: the false spike",{"depth":27,"slug":108,"text":109},"a-useful-tool-not-a-process","A useful tool, not a process",[],[],{"title":70,"date":113},["Date","2024-02-19T00:00:00.000Z"],[],"idk-spiking.md","hardcoded-subqueries-in-postgres",{"id":116,"data":118,"body":122,"filePath":123,"digest":124,"rendered":125,"legacyId":135},{"title":119,"date":120,"layout":16,"disqusId":121,"comments":18},"Hardcoded sub queries in Postgres",["Date","2016-05-22T00:00:00.000Z"],"/2016/05/22/hardcoded-subqueries-in-postgres","I recently ran into an issue where I needed to write an `IN` filter that consumed values from a sub query and hard-coded list.  While I could express this relatively elegantly using an ORM to run the subquery and append the results to an array of hardcoded strings, I was struggling with how to do so raw SQL query.\n\nMy first attempt was to use `WITH` and a simple CTE:\n\n```sql\nWITH hardcoded_user_ids(id) as (\n  VALUES (1), (2)\n)\n\nSELECT * FROM orders\nWHERE orders.user_id IN (\n  SELECT id from normal_users\n  UNION ALL\n  SELECT id FROM hardcoded_user_ids\n);\n```\n\nThis was fine, but the CTE felt a bit verbose and unnecessary for my purposes. After some experimentation, I realized that this is possible using `AS` and specifying the column name:\n\n```sql\nSELECT * FROM orders\nWHERE orders.user_id IN (\n  SELECT id FROM normal_users\n  UNION ALL\n  SELECT id from (\n    values (1) (2)\n  ) as hardcoded_user_ids(id)\n)\n```\n\nWhile the CTE route may actually be clearer in the long run, I like the formatting of the inline values list for simple one offs.","src/content/posts/hardcoded-subqueries-in-postgres.md","f565f4d40f0fee8a",{"html":126,"metadata":127},"\u003Cp>I recently ran into an issue where I needed to write an \u003Ccode>IN\u003C/code> filter that consumed values from a sub query and hard-coded list.  While I could express this relatively elegantly using an ORM to run the subquery and append the results to an array of hardcoded strings, I was struggling with how to do so raw SQL query.\u003C/p>\n\u003Cp>My first attempt was to use \u003Ccode>WITH\u003C/code> and a simple CTE:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WITH\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hardcoded_user_ids(id) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  VALUES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> orders\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#79B8FF\"> orders\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">user_id\u003C/span>\u003Cspan style=\"color:#F97583\"> IN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> normal_users\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  UNION ALL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hardcoded_user_ids\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This was fine, but the CTE felt a bit verbose and unnecessary for my purposes. After some experimentation, I realized that this is possible using \u003Ccode>AS\u003C/code> and specifying the column name:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> orders\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#79B8FF\"> orders\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">user_id\u003C/span>\u003Cspan style=\"color:#F97583\"> IN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> normal_users\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  UNION ALL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    values\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hardcoded_user_ids(id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>While the CTE route may actually be clearer in the long run, I like the formatting of the inline values list for simple one offs.\u003C/p>",{"headings":128,"localImagePaths":129,"remoteImagePaths":130,"frontmatter":131,"imagePaths":134},[],[],[],{"layout":16,"title":119,"comments":18,"categories":132,"date":133,"disqusId":121},"sql, postgres","2016-05-22",[],"hardcoded-subqueries-in-postgres.md","clojure-dependencies-and-lein-repl",{"id":136,"data":138,"body":142,"filePath":143,"digest":144,"rendered":145,"legacyId":154},{"title":139,"date":140,"layout":16,"disqusId":141,"comments":18},"Issues loading dependencies in the Clojure repl",["Date","2017-11-10T00:00:00.000Z"],"/2017/11/10/clojure-dependencies-and-lein-repl","I've been dusting off my _very dusty_ Clojure parens and recently ran into a head scratcher when attempting to mess around with [enlive](https://github.com/cgrand/enlive) in a Clojure repl.\n\nWhen attempting to follow along tutorial I naively popped open my repl and attempted to require enlive like so:\n\n```\n(require [net.cgrand.enlive-html :as html])\n```\n\nAnd received the following lovely exception:\n\n```\nCompilerException java.lang.ClassNotFoundException: net.cgrand.enlive-html\n```\n\nThanks to [this](https://stackoverflow.com/a/9811346/1048479) informative stackoverflow post, I was reminded of the difference between `require` nested within the `ns` macro and `require` run inside of a repl.\n\nThe solution is to do the work the `ns` macro is doing for you, namely, to quote the vector you are passing to `require`:\n\n```\n(require '[net.cgrand.enlive-html :as html])\n(html/text (first (html/select (html/html-resource (java.net.URL. \"https://clojure.org\"))  [:.clj-header-message])))\n```\n\n[Quoting without confusion](https://8thlight.com/blog/colin-jones/2012/05/22/quoting-without-confusion.html) is a good reference here if you (like me) get confused by quotes.\n\nAdditionally, for easy `repl`ing, it's probably easier to do this with `use` (which will clobber your current namespace but is worth it for hacking) or to stick this all in a file and use the `load`/`in-ns` combo (more on that [here](https://www.beyondtechnicallycorrect.com/2013/04/14/loading-and-using-namespaces-in-the-clojure-repl/)):\n\n```clojure\n; e.g. for src/my_ns.clj\n; that has a ns of `my-ns`\n(load \"my_ns\")\n(in-ns 'my-ns)\n; you can now access variables defined in that namespace\n(my-ns/my-func \"argc\")\n```\n\nHopefully this helps shortcut someone else. Cheers!","src/content/posts/clojure-dependencies-and-lein-repl.md","368ef0ec4282a028",{"html":146,"metadata":147},"\u003Cp>I’ve been dusting off my \u003Cem>very dusty\u003C/em> Clojure parens and recently ran into a head scratcher when attempting to mess around with \u003Ca href=\"https://github.com/cgrand/enlive\">enlive\u003C/a> in a Clojure repl.\u003C/p>\n\u003Cp>When attempting to follow along tutorial I naively popped open my repl and attempted to require enlive like so:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>(require [net.cgrand.enlive-html :as html])\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And received the following lovely exception:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>CompilerException java.lang.ClassNotFoundException: net.cgrand.enlive-html\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Thanks to \u003Ca href=\"https://stackoverflow.com/a/9811346/1048479\">this\u003C/a> informative stackoverflow post, I was reminded of the difference between \u003Ccode>require\u003C/code> nested within the \u003Ccode>ns\u003C/code> macro and \u003Ccode>require\u003C/code> run inside of a repl.\u003C/p>\n\u003Cp>The solution is to do the work the \u003Ccode>ns\u003C/code> macro is doing for you, namely, to quote the vector you are passing to \u003Ccode>require\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>(require '[net.cgrand.enlive-html :as html])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>(html/text (first (html/select (html/html-resource (java.net.URL. \"https://clojure.org\"))  [:.clj-header-message])))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://8thlight.com/blog/colin-jones/2012/05/22/quoting-without-confusion.html\">Quoting without confusion\u003C/a> is a good reference here if you (like me) get confused by quotes.\u003C/p>\n\u003Cp>Additionally, for easy \u003Ccode>repl\u003C/code>ing, it’s probably easier to do this with \u003Ccode>use\u003C/code> (which will clobber your current namespace but is worth it for hacking) or to stick this all in a file and use the \u003Ccode>load\u003C/code>/\u003Ccode>in-ns\u003C/code> combo (more on that \u003Ca href=\"https://www.beyondtechnicallycorrect.com/2013/04/14/loading-and-using-namespaces-in-the-clojure-repl/\">here\u003C/a>):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"clojure\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">; e.g. for src/my_ns.clj\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">; that has a ns of `my-ns`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">load\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"my_ns\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">in-ns\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> 'my-ns)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">; you can now access variables defined in that namespace\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">my-ns/my-func\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"argc\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Hopefully this helps shortcut someone else. Cheers!\u003C/p>",{"headings":148,"localImagePaths":149,"remoteImagePaths":150,"frontmatter":151,"imagePaths":153},[],[],[],{"layout":16,"title":139,"date":152,"disqusId":141},"2017-11-10",[],"clojure-dependencies-and-lein-repl.md","an-introduction-to-esbuild-plugins",{"id":155,"data":157,"body":160,"filePath":161,"digest":162,"rendered":163,"legacyId":211},{"title":158,"date":159,"comments":18},"An introduction to esbuild plugins",["Date","2023-04-02T00:00:00.000Z"],"This post provides a brief introduction to `esbuild`'s build pipeline and plugin api.\n\n# What is esbuild?\n\n[esbuild](https://esbuild.github.io/) is JavaScript bundler that processes files and turns them into a JavaScript bundle that Runtime (like ,node.js, `Deno`, or your browser) can execute. Many tools also do this, but `esbuild`'s focus on a small feature set, clean API, and blazing fast speed set it apart. This is why it is used in projects like [`vite`](https://vitejs.dev/), [`remix`](https://remix.run/) and [`esm.sh`](https://esm.sh/), and _many more_.\n\n## Why write a plugin?\n\nWhile `esbuild` does many things out of the box, there are many things it chooses not to do in order to maintain focus and speed. There is a growing list of [community plugins](https://github.com/esbuild/community-plugins) that you may — like me — find yourself needing to do something that esbuild does not do out of the box.\n\nA few important things to note:\n\n0. `esbuild`'s plugin architecture is just about `resolv`ing and `load`ing. Anything beyond simple text processing will be up to you. This means if you want to [compile your favorite esoteric language to js](https://esolangs.org/wiki/Language_list) you will have to run a compiler in your `load`er.\n    - Running a compiler in `load` will (naturally) make your build slower.\n1. The plugin architecture is simple and fast because it is limited. It may not be possible to do what you want with an `esbuild` plugin.\n2. Plugins only work in `go` and `javascript`. There is a [`wasm`](https://esbuild.github.io/getting-started/#wasm) version but it does not have plugin support and is much slower.\n\n\n# An overview\n\nAt its core, an `esbuild` `build` involves a few steps:\n\n- input\n- resolve\n- load\n- output\n\n\u003Cimg src=\"/images/esbuild-pipeline-basic@2x.png\" style=\"max-height: 90vh\" />\n\n\n### Input\n\n`input` is the file(s) passed to `esbuild` and any subsequent files resolved in the process of the build (more on that later).\n\n```javascript\nesbuild.build({\n  entryPoints: [\"index.js\"]\n})\n```\n\nIf `index.js` imports another file, that is added to the stack of inputs.\n\n### Resolve\n\nThe `resolve` step involves taking a path (an filesystem path or an `import`/`require` path) and directing it to something that can `load` it. Several `kind`s of paths that can be resolved. A few important ones:\n\n- `entryPoint` a file, like `index.js`\n- `import`: an import like \u003Ccode>import(\"./util.js\")\u003C/code> or \u003Ccode>require(\"./foo.js\")\u003C/code> or \u003Ccode>@import(\"my.css\")\u003C/code>\n\n\n### Load\n\nThe `load` step takes a resolved path from the previous stage and loads the content for that path. This can take the form of reading it from the file system, a url, or creating it on the fly.\n\nTypically, this takes the form of `JavaScript`, since the output target of `esbuild` is a JS application, but there is built in support for several different [content types](https://esbuild.github.io/content-types/)\n\n\n### `imports` and the build \"stack\"\n\nWhile the build process can be envisioned as a one-way pipeline, one of the unique features of `esbuild` is that `load`ed content can reference _other_ files via `import`s. This allows the build to become aware of other files in a way that maps the natural grain of a module dependency graph. This means that files can add other files, and the split between `resolve` and `load` allows for scenarios where an `import` can be dynamically resolved from _anywhere_ not just a file system path.\n\nYou can think of an `import` as a way of pushing an `input` back onto the build stack, which then gets sent through the same familiar build pipeline. This modeling is the core of input processing plugins in `esbuild`.\n\n\u003Cimg src=\"/images/esbuild-pipeline-add.png\" style=\"max-height: 90vh\" />\n\n# Plugins\n\nNow that we've explored how `esbuild`'s build time modeling works, we can launch into the plugin architecture.\n\nBy default, `esbuild` includes `resolve` and `load` behavior to handle `js`/`ts`, `css`, `json` files. It automatically resolves, loads, and generates valid JavaScript output.\n\n# Defining a plugin\n\nThe [docs](https://esbuild.github.io/plugins/#using-plugins) do a good job of defining the APIs of plugins, but essentially `esbuild` allows plugins to hook into its build process to contribute to (and/or modify) the build. While, there are many different hooks an `esbuild` plugin can define,  This post will focus purely on the `onResolve` and `onLoad` hooks. These hooks are what I am most familiar with and are probably what most plugins will want to use anyway.\n\n## The shape of a plugin\n\nA common idiom is to define a plugin as a function that accepts options that your plugin may want to expose. This function then returns an `esbuild` plugin implementation with whatever hooks you want to use defined:\n\n```javascript\nfunction myPlugin ({greeting = \"world\"} = {}) {\n    return {\n        name: \"MyPlugin\"\n        setup(build) {\n            // use build hooks here\n            build.onResolve(/* */)\n        }\n    }\n}\n\nawait esbuild.build({\n    entryPoints: [\"index.js],\n    plugins(myPlugin({ greeting: \"Nick\" }))\n})\n```\n\n## Example: A \"vanilla\" plugin\n\nTo make this more concrete, let's create a simple plugin that replicates what `esbuild` does internally. We will `resolve` `js` files and then transform them in a `load`er by naively replacing every instance of `!` with `!!!`, just to prove that our plugin is actually handling things.\n\nFirst, we define our plugin, which is an object with a `name` property and a `setup` function:\n\n```javascript\nfunction vanillaPlugin () {\n    return {\n      name: \"vanillaPlugin\",\n      setup: (build) => {\n        // todo\n      }\n  }\n}\n```\n\nnow we can concentrate on actually defining how our plugin will interact with the build process:\n\n```javascript\n// in the `setup` block above\nbuild.onResolve({ filter: /\\.js$/ }, (args) => {\n    return {\n        path: args.path,\n        namespace: 'vanilla'\n    }\n})\n```\n\nAll this does is tell `esbuild` if a file ends with `.js` let _us_ resolve it, rather than the built-in resolver.\n\nWe use the return to pass the original path (e.g. `./src/index.js`) on to the `loader` and a special `namespace` to indicate that this should be loaded by something within that namespace, rather than a default loader.\n\nNow that we've claimed `.js` files as our own, we need to provide their contents with our own `onLoad` hook:\n\n```javascript\nbuild.onLoad({ filter: /.*/, namespace: \"vanilla\" }, async (args) => {\n    const contents = await readFile(args.path, 'utf8')\n    return {\n        // a simple substitution just to prove that we've\n        // loaded the file and are transforming it\n        contents: contents.replace('!', '!!!')\n    }\n})\n```\n\nLike `onResolve` we are passing an object to help us filter down what we should load, but we are now using the `namespace` property to scope us to the `namespace` we specified in our `onResolve` hook:\n\n```javascript\n{ filter: /.*/, namespace: \"vanilla\" }\n```\n\nAfter that, we simply read the contents from the file system and perform a `replace` on them. For our simple use case, this works great, this would break a program that relies on `!` for logic, and we need to use an `ast` parser or complicated regex if we wanted to do more fine-grained manipulations.\n\nOur final output looks something like this:\n\n```javascript\nconst message = \"Meow!!!\";\n```\n\nNow, onto a slightly more complicated example.\n\n## Virtual files\n\nOur first example dealt with files that were already on the file system.\n\n```javascript\n// input.mjs\nimport { MESSAGE, NAME } from 'config:templates'\n\nexport default function hello() {\n    // this will be inserted by our build step\n    return `${MESSAGE}, ${NAME}!`\n}\n```\n\nThere is no `config:templates` module on the file system, so our plugin will `resolve` and `load` it with a \"virtual\" module.\n\nAgain, we start with a plugin scaffold:\n\n```javascript\nfunction templatePlugin({ replacements = {} } = {}) {\n    return {\n        name: \"templatePlugin\",\n        setup: (build) => {\n        // todo\n    }\n  }\n}\n```\n\nAnd we resolve imports that contain `config:templates` to a plugin `namespace`\n\n```javascript\nbuild.onResolve({ filter: /config:templates/ }, (args) => {\n    return {\n        path: args.path,\n        namespace: 'templates'\n    }\n})\n```\n\nNow we handle the actual content in an `onLoad`, by generating the source of `config:templates`, which is a simple `JSON` object:\n\n```javascript\n  build.onLoad({ filter: /.*/, namespace: \"templatePlugin\" }, (args) => {\n      return {\n          // we are using plugin options here, but this could easily come from a REST call or a database\n          contents: JSON.stringify(replacements),\n          // let esbuild know that it should treat this as a `json` file, as opposed to a \n          // a js file\n          loader: 'json'\n      }\n  })\n```\n\nThe build output shows `esbuild` has bundled those hardcoded variables into our program:\n\n```javascript\n(() => {\n  // virtualFilePlugin:config:templates\n  var MESSAGE = \"Hello\";\n  var NAME = \"World\";\n\n  // examples/2-virtual-files/input.mjs\n  function hello() {\n    return `${MESSAGE}, ${NAME}!`;\n  }\n})();\n```\n\nThis is a simplistic example, but this pattern can be repeated and extended to have multiple recursive `import`s to build out complicated module trees. All of that is built on the `resolve` and `load` primitives that `esbuild` provides.\n\n# :wave:\n\nThat was a brief introduction to `esbuild` plugins; hopefully it can be of some help as you write (or debug) esbuild plugins yourself.\n\nYou can see more small examples in [my example repository](https://github.com/NickTomlin/simple-esbuild-plugin-examples) and I would also recommend browsing the [community plugins](https://github.com/esbuild/community-plugins) for inspiration!\n\nHappy bundling!\n\nNick","src/content/posts/an-introduction-to-esbuild-plugins.md","821cee8ad26130a1",{"html":164,"metadata":165},"\u003Cp>This post provides a brief introduction to \u003Ccode>esbuild\u003C/code>’s build pipeline and plugin api.\u003C/p>\n\u003Ch1 id=\"what-is-esbuild\">What is esbuild?\u003C/h1>\n\u003Cp>\u003Ca href=\"https://esbuild.github.io/\">esbuild\u003C/a> is JavaScript bundler that processes files and turns them into a JavaScript bundle that Runtime (like ,node.js, \u003Ccode>Deno\u003C/code>, or your browser) can execute. Many tools also do this, but \u003Ccode>esbuild\u003C/code>’s focus on a small feature set, clean API, and blazing fast speed set it apart. This is why it is used in projects like \u003Ca href=\"https://vitejs.dev/\">\u003Ccode>vite\u003C/code>\u003C/a>, \u003Ca href=\"https://remix.run/\">\u003Ccode>remix\u003C/code>\u003C/a> and \u003Ca href=\"https://esm.sh/\">\u003Ccode>esm.sh\u003C/code>\u003C/a>, and \u003Cem>many more\u003C/em>.\u003C/p>\n\u003Ch2 id=\"why-write-a-plugin\">Why write a plugin?\u003C/h2>\n\u003Cp>While \u003Ccode>esbuild\u003C/code> does many things out of the box, there are many things it chooses not to do in order to maintain focus and speed. There is a growing list of \u003Ca href=\"https://github.com/esbuild/community-plugins\">community plugins\u003C/a> that you may — like me — find yourself needing to do something that esbuild does not do out of the box.\u003C/p>\n\u003Cp>A few important things to note:\u003C/p>\n\u003Col start=\"0\">\n\u003Cli>\u003Ccode>esbuild\u003C/code>’s plugin architecture is just about \u003Ccode>resolv\u003C/code>ing and \u003Ccode>load\u003C/code>ing. Anything beyond simple text processing will be up to you. This means if you want to \u003Ca href=\"https://esolangs.org/wiki/Language_list\">compile your favorite esoteric language to js\u003C/a> you will have to run a compiler in your \u003Ccode>load\u003C/code>er.\n\u003Cul>\n\u003Cli>Running a compiler in \u003Ccode>load\u003C/code> will (naturally) make your build slower.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>The plugin architecture is simple and fast because it is limited. It may not be possible to do what you want with an \u003Ccode>esbuild\u003C/code> plugin.\u003C/li>\n\u003Cli>Plugins only work in \u003Ccode>go\u003C/code> and \u003Ccode>javascript\u003C/code>. There is a \u003Ca href=\"https://esbuild.github.io/getting-started/#wasm\">\u003Ccode>wasm\u003C/code>\u003C/a> version but it does not have plugin support and is much slower.\u003C/li>\n\u003C/ol>\n\u003Ch1 id=\"an-overview\">An overview\u003C/h1>\n\u003Cp>At its core, an \u003Ccode>esbuild\u003C/code> \u003Ccode>build\u003C/code> involves a few steps:\u003C/p>\n\u003Cul>\n\u003Cli>input\u003C/li>\n\u003Cli>resolve\u003C/li>\n\u003Cli>load\u003C/li>\n\u003Cli>output\u003C/li>\n\u003C/ul>\n\u003Cimg src=\"/images/esbuild-pipeline-basic@2x.png\" style=\"max-height: 90vh\">\n\u003Ch3 id=\"input\">Input\u003C/h3>\n\u003Cp>\u003Ccode>input\u003C/code> is the file(s) passed to \u003Ccode>esbuild\u003C/code> and any subsequent files resolved in the process of the build (more on that later).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">esbuild.\u003C/span>\u003Cspan style=\"color:#B392F0\">build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  entryPoints: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"index.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If \u003Ccode>index.js\u003C/code> imports another file, that is added to the stack of inputs.\u003C/p>\n\u003Ch3 id=\"resolve\">Resolve\u003C/h3>\n\u003Cp>The \u003Ccode>resolve\u003C/code> step involves taking a path (an filesystem path or an \u003Ccode>import\u003C/code>/\u003Ccode>require\u003C/code> path) and directing it to something that can \u003Ccode>load\u003C/code> it. Several \u003Ccode>kind\u003C/code>s of paths that can be resolved. A few important ones:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>entryPoint\u003C/code> a file, like \u003Ccode>index.js\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>import\u003C/code>: an import like \u003Ccode>import(”./util.js”)\u003C/code> or \u003Ccode>require(”./foo.js”)\u003C/code> or \u003Ccode>@import(“my.css”)\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"load\">Load\u003C/h3>\n\u003Cp>The \u003Ccode>load\u003C/code> step takes a resolved path from the previous stage and loads the content for that path. This can take the form of reading it from the file system, a url, or creating it on the fly.\u003C/p>\n\u003Cp>Typically, this takes the form of \u003Ccode>JavaScript\u003C/code>, since the output target of \u003Ccode>esbuild\u003C/code> is a JS application, but there is built in support for several different \u003Ca href=\"https://esbuild.github.io/content-types/\">content types\u003C/a>\u003C/p>\n\u003Ch3 id=\"imports-and-the-build-stack\">\u003Ccode>imports\u003C/code> and the build “stack”\u003C/h3>\n\u003Cp>While the build process can be envisioned as a one-way pipeline, one of the unique features of \u003Ccode>esbuild\u003C/code> is that \u003Ccode>load\u003C/code>ed content can reference \u003Cem>other\u003C/em> files via \u003Ccode>import\u003C/code>s. This allows the build to become aware of other files in a way that maps the natural grain of a module dependency graph. This means that files can add other files, and the split between \u003Ccode>resolve\u003C/code> and \u003Ccode>load\u003C/code> allows for scenarios where an \u003Ccode>import\u003C/code> can be dynamically resolved from \u003Cem>anywhere\u003C/em> not just a file system path.\u003C/p>\n\u003Cp>You can think of an \u003Ccode>import\u003C/code> as a way of pushing an \u003Ccode>input\u003C/code> back onto the build stack, which then gets sent through the same familiar build pipeline. This modeling is the core of input processing plugins in \u003Ccode>esbuild\u003C/code>.\u003C/p>\n\u003Cimg src=\"/images/esbuild-pipeline-add.png\" style=\"max-height: 90vh\">\n\u003Ch1 id=\"plugins\">Plugins\u003C/h1>\n\u003Cp>Now that we’ve explored how \u003Ccode>esbuild\u003C/code>’s build time modeling works, we can launch into the plugin architecture.\u003C/p>\n\u003Cp>By default, \u003Ccode>esbuild\u003C/code> includes \u003Ccode>resolve\u003C/code> and \u003Ccode>load\u003C/code> behavior to handle \u003Ccode>js\u003C/code>/\u003Ccode>ts\u003C/code>, \u003Ccode>css\u003C/code>, \u003Ccode>json\u003C/code> files. It automatically resolves, loads, and generates valid JavaScript output.\u003C/p>\n\u003Ch1 id=\"defining-a-plugin\">Defining a plugin\u003C/h1>\n\u003Cp>The \u003Ca href=\"https://esbuild.github.io/plugins/#using-plugins\">docs\u003C/a> do a good job of defining the APIs of plugins, but essentially \u003Ccode>esbuild\u003C/code> allows plugins to hook into its build process to contribute to (and/or modify) the build. While, there are many different hooks an \u003Ccode>esbuild\u003C/code> plugin can define,  This post will focus purely on the \u003Ccode>onResolve\u003C/code> and \u003Ccode>onLoad\u003C/code> hooks. These hooks are what I am most familiar with and are probably what most plugins will want to use anyway.\u003C/p>\n\u003Ch2 id=\"the-shape-of-a-plugin\">The shape of a plugin\u003C/h2>\n\u003Cp>A common idiom is to define a plugin as a function that accepts options that your plugin may want to expose. This function then returns an \u003Ccode>esbuild\u003C/code> plugin implementation with whatever hooks you want to use defined:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> myPlugin\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003Cspan style=\"color:#FFAB70\">greeting\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"world\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"MyPlugin\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(build) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // use build hooks here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            build.onResolve(\u003C/span>\u003Cspan style=\"color:#6A737D\">/* */\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> esbuild.\u003C/span>\u003Cspan style=\"color:#B392F0\">build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    entryPoints: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"index.js]\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    plugins\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">myPlugin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ greeting: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Nick\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"example-a-vanilla-plugin\">Example: A “vanilla” plugin\u003C/h2>\n\u003Cp>To make this more concrete, let’s create a simple plugin that replicates what \u003Ccode>esbuild\u003C/code> does internally. We will \u003Ccode>resolve\u003C/code> \u003Ccode>js\u003C/code> files and then transform them in a \u003Ccode>load\u003C/code>er by naively replacing every instance of \u003Ccode>!\u003C/code> with \u003Ccode>!!!\u003C/code>, just to prove that our plugin is actually handling things.\u003C/p>\n\u003Cp>First, we define our plugin, which is an object with a \u003Ccode>name\u003C/code> property and a \u003Ccode>setup\u003C/code> function:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> vanillaPlugin\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"vanillaPlugin\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // todo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>now we can concentrate on actually defining how our plugin will interact with the build process:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// in the `setup` block above\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">build.\u003C/span>\u003Cspan style=\"color:#B392F0\">onResolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filter:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#85E89D;font-weight:bold\">\\.\u003C/span>\u003Cspan style=\"color:#DBEDFF\">js\u003C/span>\u003Cspan style=\"color:#F97583\">$\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        path: args.path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        namespace: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'vanilla'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>All this does is tell \u003Ccode>esbuild\u003C/code> if a file ends with \u003Ccode>.js\u003C/code> let \u003Cem>us\u003C/em> resolve it, rather than the built-in resolver.\u003C/p>\n\u003Cp>We use the return to pass the original path (e.g. \u003Ccode>./src/index.js\u003C/code>) on to the \u003Ccode>loader\u003C/code> and a special \u003Ccode>namespace\u003C/code> to indicate that this should be loaded by something within that namespace, rather than a default loader.\u003C/p>\n\u003Cp>Now that we’ve claimed \u003Ccode>.js\u003C/code> files as our own, we need to provide their contents with our own \u003Ccode>onLoad\u003C/code> hook:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">build.\u003C/span>\u003Cspan style=\"color:#B392F0\">onLoad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filter:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, namespace: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"vanilla\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> readFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(args.path, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'utf8'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // a simple substitution just to prove that we've\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // loaded the file and are transforming it\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        contents: contents.\u003C/span>\u003Cspan style=\"color:#B392F0\">replace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'!!!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Like \u003Ccode>onResolve\u003C/code> we are passing an object to help us filter down what we should load, but we are now using the \u003Ccode>namespace\u003C/code> property to scope us to the \u003Ccode>namespace\u003C/code> we specified in our \u003Ccode>onResolve\u003C/code> hook:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{ \u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">namespace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"vanilla\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>After that, we simply read the contents from the file system and perform a \u003Ccode>replace\u003C/code> on them. For our simple use case, this works great, this would break a program that relies on \u003Ccode>!\u003C/code> for logic, and we need to use an \u003Ccode>ast\u003C/code> parser or complicated regex if we wanted to do more fine-grained manipulations.\u003C/p>\n\u003Cp>Our final output looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> message\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Meow!!!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now, onto a slightly more complicated example.\u003C/p>\n\u003Ch2 id=\"virtual-files\">Virtual files\u003C/h2>\n\u003Cp>Our first example dealt with files that were already on the file system.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// input.mjs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { MESSAGE, NAME } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'config:templates'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // this will be inserted by our build step\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003Cspan style=\"color:#79B8FF\">MESSAGE\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}, ${\u003C/span>\u003Cspan style=\"color:#79B8FF\">NAME\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}!`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There is no \u003Ccode>config:templates\u003C/code> module on the file system, so our plugin will \u003Ccode>resolve\u003C/code> and \u003Ccode>load\u003C/code> it with a “virtual” module.\u003C/p>\n\u003Cp>Again, we start with a plugin scaffold:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> templatePlugin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">replacements\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {} } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"templatePlugin\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // todo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And we resolve imports that contain \u003Ccode>config:templates\u003C/code> to a plugin \u003Ccode>namespace\u003C/code>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">build.\u003C/span>\u003Cspan style=\"color:#B392F0\">onResolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filter:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#DBEDFF\">config:templates\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        path: args.path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        namespace: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'templates'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now we handle the actual content in an \u003Ccode>onLoad\u003C/code>, by generating the source of \u003Ccode>config:templates\u003C/code>, which is a simple \u003Ccode>JSON\u003C/code> object:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  build.\u003C/span>\u003Cspan style=\"color:#B392F0\">onLoad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filter:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, namespace: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"templatePlugin\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // we are using plugin options here, but this could easily come from a REST call or a database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          contents: \u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(replacements),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // let esbuild know that it should treat this as a `json` file, as opposed to a \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // a js file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          loader: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'json'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The build output shows \u003Ccode>esbuild\u003C/code> has bundled those hardcoded variables into our program:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // virtualFilePlugin:config:templates\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  var\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MESSAGE\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  var\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NAME\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"World\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // examples/2-virtual-files/input.mjs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  function\u003C/span>\u003Cspan style=\"color:#B392F0\"> hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003Cspan style=\"color:#79B8FF\">MESSAGE\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}, ${\u003C/span>\u003Cspan style=\"color:#79B8FF\">NAME\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is a simplistic example, but this pattern can be repeated and extended to have multiple recursive \u003Ccode>import\u003C/code>s to build out complicated module trees. All of that is built on the \u003Ccode>resolve\u003C/code> and \u003Ccode>load\u003C/code> primitives that \u003Ccode>esbuild\u003C/code> provides.\u003C/p>\n\u003Ch1 id=\"wave\">:wave:\u003C/h1>\n\u003Cp>That was a brief introduction to \u003Ccode>esbuild\u003C/code> plugins; hopefully it can be of some help as you write (or debug) esbuild plugins yourself.\u003C/p>\n\u003Cp>You can see more small examples in \u003Ca href=\"https://github.com/NickTomlin/simple-esbuild-plugin-examples\">my example repository\u003C/a> and I would also recommend browsing the \u003Ca href=\"https://github.com/esbuild/community-plugins\">community plugins\u003C/a> for inspiration!\u003C/p>\n\u003Cp>Happy bundling!\u003C/p>\n\u003Cp>Nick\u003C/p>",{"headings":166,"localImagePaths":206,"remoteImagePaths":207,"frontmatter":208,"imagePaths":210},[167,170,173,176,179,182,185,188,191,194,197,200,203],{"depth":27,"slug":168,"text":169},"what-is-esbuild","What is esbuild?",{"depth":34,"slug":171,"text":172},"why-write-a-plugin","Why write a plugin?",{"depth":27,"slug":174,"text":175},"an-overview","An overview",{"depth":92,"slug":177,"text":178},"input","Input",{"depth":92,"slug":180,"text":181},"resolve","Resolve",{"depth":92,"slug":183,"text":184},"load","Load",{"depth":92,"slug":186,"text":187},"imports-and-the-build-stack","imports and the build “stack”",{"depth":27,"slug":189,"text":190},"plugins","Plugins",{"depth":27,"slug":192,"text":193},"defining-a-plugin","Defining a plugin",{"depth":34,"slug":195,"text":196},"the-shape-of-a-plugin","The shape of a plugin",{"depth":34,"slug":198,"text":199},"example-a-vanilla-plugin","Example: A “vanilla” plugin",{"depth":34,"slug":201,"text":202},"virtual-files","Virtual files",{"depth":27,"slug":204,"text":205},"wave",":wave:",[],[],{"title":158,"date":209},["Date","2023-04-02T00:00:00.000Z"],[],"an-introduction-to-esbuild-plugins.md","joy-is-focus",{"id":212,"data":214,"body":217,"filePath":218,"digest":219,"rendered":220,"legacyId":238},{"title":215,"date":216,"comments":18},"Joy is focus",["Date","2025-05-28T00:00:00.000Z"],"When you think of focus, what comes to mind? Something functional, like a gymnast landing a vault? Or spiritual, a slow release of breath or a prayer? Is it calm? Or intense? Me? I think of the pine trees that grew behind the house I grew up in. This post is a meditation on focus, specifically the difficulty of doing it in our fragmented world, through those childhood days.\n\n## Then\n\nI grew up on 3 acres surrounded by quickly urbanizing farmland. My family did not have a TV or internet (to be fair, few people had internet); my dad had a cell phone the size of brick; I was homeschooled. With few friends and a lot of time, I split it across a few activities:\n\n**Wandering around the pine forest on our land**. Sometimes I'd simply lie down in a bed of pine needles to listen to the wind or see how sunlight changed as it filtered through the layers of tree canopy above. I've alwys hated pine scented products because they feel like such a poor imitation of that soft, clean smell of fresh pine needles.\n\n**Digging trenches**. Our land had a weedy and never used lot, and I would spend hours just digging trenches. I imagined they were combat trenches or a spot for buried treasure. I don't know why this was so much fun but I'd spent entire days hacking away at the stubborn, clay filled soil.\n\n**Devouring books**. My room had shelves and shelves of books, stacked in crates, falling innumerable brick-a-brack bookends, spilling out into the floor. I'd pick a book, read it, and then pick another. Sometimes i'd read multiple books in a single day. I had nothing better to do. Looking back, I don't think there was anything better I could have been doing.\n\nI have read so many articles about trying to be present and achieve some Zen-like state of performance or concentration and I think those days were unconsciously filled with those rituals. I wasn't swarmed by a 24 hour news cycle; sucked in by a steady drip of social media feeds; or buried under a catch up list of shows, podcasts, and articles. I just had a forest, a hole-pocked field, and crates of books.\n\n## Now\n\nMy world is filled with feeds, todos, and pings. While those childhood days had downsides – primarily loneliness – I find myself longing for those periods of quietude and peace more often than regretting them.\n\nSadly, I find myself looking at my phone and reading an article while I'm watching a show that's only mildly interesting; listening to music while driving and trying to talk with my wife or kids. Hopping between Slack, and my code editor, and Figma, the latest A.I. assistant, and my browser. The more I pull down to refresh the feed of my life, the scattered and spent I feel.\n\nI am slowly discovering that joy comes from _less_: from pairing away all the articles and lifehacking I've added into my life. When I put away my phone or my planner, I start to notice the shape of the clouds on a sunny day; I can laugh (or wince) at one of my kids corny jokes at dinner; I can hear my voice joining in a hymn with hundreds of other voices at my church. These are all a return to building those small, fundamental \"core memory\" moments.\n\n## Next\n\nAs I look forward, I am trying to figure out a way to re-claim more of that focus in my day-to-day life. This is tricky, because I am also a Software Engineer so pings are part of how I make my living. I also love technology too much to chuck it all away on a walden pond escape. But, I also understand how much being in the industry -- and relying on my computer and phone -- have a stake in capturing and monetizing our focus.\n\nI'll share more about the strategies and mindset I'm trying to adopt in a subsequent post, but the `tl;dr` is that I am trying to slowly walk away from pursuing distraction, starting to limit it, and moving back to that simple, child-like, focus on the wonder of the world around me.","src/content/posts/joy-is-focus.md","6076307728528a8a",{"html":221,"metadata":222},"\u003Cp>When you think of focus, what comes to mind? Something functional, like a gymnast landing a vault? Or spiritual, a slow release of breath or a prayer? Is it calm? Or intense? Me? I think of the pine trees that grew behind the house I grew up in. This post is a meditation on focus, specifically the difficulty of doing it in our fragmented world, through those childhood days.\u003C/p>\n\u003Ch2 id=\"then\">Then\u003C/h2>\n\u003Cp>I grew up on 3 acres surrounded by quickly urbanizing farmland. My family did not have a TV or internet (to be fair, few people had internet); my dad had a cell phone the size of brick; I was homeschooled. With few friends and a lot of time, I split it across a few activities:\u003C/p>\n\u003Cp>\u003Cstrong>Wandering around the pine forest on our land\u003C/strong>. Sometimes I’d simply lie down in a bed of pine needles to listen to the wind or see how sunlight changed as it filtered through the layers of tree canopy above. I’ve alwys hated pine scented products because they feel like such a poor imitation of that soft, clean smell of fresh pine needles.\u003C/p>\n\u003Cp>\u003Cstrong>Digging trenches\u003C/strong>. Our land had a weedy and never used lot, and I would spend hours just digging trenches. I imagined they were combat trenches or a spot for buried treasure. I don’t know why this was so much fun but I’d spent entire days hacking away at the stubborn, clay filled soil.\u003C/p>\n\u003Cp>\u003Cstrong>Devouring books\u003C/strong>. My room had shelves and shelves of books, stacked in crates, falling innumerable brick-a-brack bookends, spilling out into the floor. I’d pick a book, read it, and then pick another. Sometimes i’d read multiple books in a single day. I had nothing better to do. Looking back, I don’t think there was anything better I could have been doing.\u003C/p>\n\u003Cp>I have read so many articles about trying to be present and achieve some Zen-like state of performance or concentration and I think those days were unconsciously filled with those rituals. I wasn’t swarmed by a 24 hour news cycle; sucked in by a steady drip of social media feeds; or buried under a catch up list of shows, podcasts, and articles. I just had a forest, a hole-pocked field, and crates of books.\u003C/p>\n\u003Ch2 id=\"now\">Now\u003C/h2>\n\u003Cp>My world is filled with feeds, todos, and pings. While those childhood days had downsides – primarily loneliness – I find myself longing for those periods of quietude and peace more often than regretting them.\u003C/p>\n\u003Cp>Sadly, I find myself looking at my phone and reading an article while I’m watching a show that’s only mildly interesting; listening to music while driving and trying to talk with my wife or kids. Hopping between Slack, and my code editor, and Figma, the latest A.I. assistant, and my browser. The more I pull down to refresh the feed of my life, the scattered and spent I feel.\u003C/p>\n\u003Cp>I am slowly discovering that joy comes from \u003Cem>less\u003C/em>: from pairing away all the articles and lifehacking I’ve added into my life. When I put away my phone or my planner, I start to notice the shape of the clouds on a sunny day; I can laugh (or wince) at one of my kids corny jokes at dinner; I can hear my voice joining in a hymn with hundreds of other voices at my church. These are all a return to building those small, fundamental “core memory” moments.\u003C/p>\n\u003Ch2 id=\"next\">Next\u003C/h2>\n\u003Cp>As I look forward, I am trying to figure out a way to re-claim more of that focus in my day-to-day life. This is tricky, because I am also a Software Engineer so pings are part of how I make my living. I also love technology too much to chuck it all away on a walden pond escape. But, I also understand how much being in the industry — and relying on my computer and phone — have a stake in capturing and monetizing our focus.\u003C/p>\n\u003Cp>I’ll share more about the strategies and mindset I’m trying to adopt in a subsequent post, but the \u003Ccode>tl;dr\u003C/code> is that I am trying to slowly walk away from pursuing distraction, starting to limit it, and moving back to that simple, child-like, focus on the wonder of the world around me.\u003C/p>",{"headings":223,"localImagePaths":233,"remoteImagePaths":234,"frontmatter":235,"imagePaths":237},[224,227,230],{"depth":34,"slug":225,"text":226},"then","Then",{"depth":34,"slug":228,"text":229},"now","Now",{"depth":34,"slug":231,"text":232},"next","Next",[],[],{"title":215,"date":236},["Date","2025-05-28T00:00:00.000Z"],[],"joy-is-focus.md","a-command-line-manifesto",{"id":239,"data":241,"body":245,"filePath":246,"digest":247,"rendered":248,"legacyId":281},{"title":242,"date":243,"layout":16,"disqusId":244,"comments":18},"A command line manifesto",["Date","2012-08-10T00:00:00.000Z"],"/2012/08/10/a-command-line-manifesto","\u003Csmall>Note:\nI will be using \"terminal\" and \"the command line\" interchangeably. If there's better language to use, drop me a comment and I will change things around.\n\u003C/small>\n\nMy first experience with the command line was trying to play Wolfenstein 3D in windows 3.1. It was off-putting, a little scary, and I viewed the experience as a painful -- but necessary -- hurdle on the road to fun. From conversations i've had with others, this is not an uncommon perspective on terminal in the front-end community.\n\nI felt the same until my stint as the IT admin/developer/sysadmin for a non-profit. I found myself developing on several servers of varying Linux flavors and, since some of these boxes were headless, I found myself having to break open the command line. My initial reaction to doing everything on the command line was terror but now, I try to do as much as I can on the command line.\n\nHere's why:\n\n### Speed\nThings are just faster on the command line.\nConsider the following:\n\n#### Workflow: Installing wordpress\n\n##### GUI\n1. Download www.wordpress.org/latest.zip in your browser\n2. Find and unzip the files on your local machine\n3. Log into your site via FTP\n4. Upload the files via FTP\n5. Make a sandwich\n6. Run setup\n\n##### Command Line (via ssh)\n\n~~~ shell\nwget www.wordpress.org/latest.zip\nunzip latest.zip\n# run setup / or nano config file\n~~~\n\nNot only does the command line version get things done 2 lines (possibly one, if you have more command-fu than I do), but it does also it significantly faster by removing the local machine from the process. Waiting for 500+ files to transfer one by one via FTP is no fun.\n\nThings are even better for Drupal, using [drush](http://drupal.org/project/drush/), but I won't go into detail about that here.\n\n### Simplicity\nI work in Mac Os X, which is based on Unix, and all of the sites work in a LAMP (Linux/apache/mysql/php) environment, so I find it pretty natural moving between the server and my local machine. This means tricks I pick up locally work remotely, and vice versa.\n\nIn addition, It's quite helpful to be familiar with the environment where the things I make are going to live. If something doesn't go according to plan on the server, I know some basic things to try, and I can give a lot more informed report to my sysadmin if I need help.\n\nFinally, if you use SASS, LESS, or GIT you can run those from terminal without having to buy a gui app (however [nice](http://incident57.com/codekit/)). All those new tools fit harmoniously into the same environment you are used to without any added overhead/app funkiness.\n\n### Extensibility\nOne of my initial frustrations with working on the command line was the sheer amount of time it took to get around. The shortcuts that i'd relied on (liking dragging a folder into \"favorites\") were gone. While customizing things is not the most intuitive process initially, you really can have things formatted however you like, and do some crazy stuff you could never do with a GUI. I'd never go back now, simply because I wouldn't have the same options that I do on the command line.\n\nA few customizations i've found helpful:\n\n1. Open files in Photoshop\n\n\tI created a ``shop`` alias, so I don't have to leave the command line and hunt through finder. For example, I can open all the transparent .png files for my home page with: ``shop images/home-*.png``\n\n2. Open files in my text editor from the command line\n\n\tA simple ``subl .`` and an entire directory opens up as a project, or ``subl *.php`` and i've opened all php files.\n\n3. Use [bashmarks](http://www.huyng.com/projects/bashmarks/) to get around *fast*\n\n\tI use ``s sites`` to book mark my sites directory. Then, ``g sites`` gets me back.\n\n\nThis is just scratching the surface of what you can do; these were all simple to set up and I use most of them everyday. Pretty fantastic if you find yourself repeating some common tasks.\n\n\n## No pressure\nAll that said, the beauty of the command line is that you can use as much or as little as you want. If you find that it saves you time to deploy via the command line, but you prefer to do everything else via a GUI, then that's more than fine. I think the most important thing is to not be afraid of the command line -- or at least know what you are afraid of. I still do a lot of things the \"old fashioned\" way, but I have found the command line to be a helpful addition to my toolkit. Hopefully it will do the same for you : )\n\nHappy coding,\nNick","src/content/posts/a-command-line-manifesto.md","57eaa6be020abef7",{"html":249,"metadata":250},"\u003Cp>\u003Csmall>Note:\nI will be using “terminal” and “the command line” interchangeably. If there’s better language to use, drop me a comment and I will change things around.\n\u003C/small>\u003C/p>\n\u003Cp>My first experience with the command line was trying to play Wolfenstein 3D in windows 3.1. It was off-putting, a little scary, and I viewed the experience as a painful — but necessary — hurdle on the road to fun. From conversations i’ve had with others, this is not an uncommon perspective on terminal in the front-end community.\u003C/p>\n\u003Cp>I felt the same until my stint as the IT admin/developer/sysadmin for a non-profit. I found myself developing on several servers of varying Linux flavors and, since some of these boxes were headless, I found myself having to break open the command line. My initial reaction to doing everything on the command line was terror but now, I try to do as much as I can on the command line.\u003C/p>\n\u003Cp>Here’s why:\u003C/p>\n\u003Ch3 id=\"speed\">Speed\u003C/h3>\n\u003Cp>Things are just faster on the command line.\nConsider the following:\u003C/p>\n\u003Ch4 id=\"workflow-installing-wordpress\">Workflow: Installing wordpress\u003C/h4>\n\u003Ch5 id=\"gui\">GUI\u003C/h5>\n\u003Col>\n\u003Cli>Download \u003Ca href=\"http://www.wordpress.org/latest.zip\">www.wordpress.org/latest.zip\u003C/a> in your browser\u003C/li>\n\u003Cli>Find and unzip the files on your local machine\u003C/li>\n\u003Cli>Log into your site via FTP\u003C/li>\n\u003Cli>Upload the files via FTP\u003C/li>\n\u003Cli>Make a sandwich\u003C/li>\n\u003Cli>Run setup\u003C/li>\n\u003C/ol>\n\u003Ch5 id=\"command-line-via-ssh\">Command Line (via ssh)\u003C/h5>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wget\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> www.wordpress.org/latest.zip\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">unzip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> latest.zip\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># run setup / or nano config file\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Not only does the command line version get things done 2 lines (possibly one, if you have more command-fu than I do), but it does also it significantly faster by removing the local machine from the process. Waiting for 500+ files to transfer one by one via FTP is no fun.\u003C/p>\n\u003Cp>Things are even better for Drupal, using \u003Ca href=\"http://drupal.org/project/drush/\">drush\u003C/a>, but I won’t go into detail about that here.\u003C/p>\n\u003Ch3 id=\"simplicity\">Simplicity\u003C/h3>\n\u003Cp>I work in Mac Os X, which is based on Unix, and all of the sites work in a LAMP (Linux/apache/mysql/php) environment, so I find it pretty natural moving between the server and my local machine. This means tricks I pick up locally work remotely, and vice versa.\u003C/p>\n\u003Cp>In addition, It’s quite helpful to be familiar with the environment where the things I make are going to live. If something doesn’t go according to plan on the server, I know some basic things to try, and I can give a lot more informed report to my sysadmin if I need help.\u003C/p>\n\u003Cp>Finally, if you use SASS, LESS, or GIT you can run those from terminal without having to buy a gui app (however \u003Ca href=\"http://incident57.com/codekit/\">nice\u003C/a>). All those new tools fit harmoniously into the same environment you are used to without any added overhead/app funkiness.\u003C/p>\n\u003Ch3 id=\"extensibility\">Extensibility\u003C/h3>\n\u003Cp>One of my initial frustrations with working on the command line was the sheer amount of time it took to get around. The shortcuts that i’d relied on (liking dragging a folder into “favorites”) were gone. While customizing things is not the most intuitive process initially, you really can have things formatted however you like, and do some crazy stuff you could never do with a GUI. I’d never go back now, simply because I wouldn’t have the same options that I do on the command line.\u003C/p>\n\u003Cp>A few customizations i’ve found helpful:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Open files in Photoshop\u003C/p>\n\u003Cp>I created a \u003Ccode>shop\u003C/code> alias, so I don’t have to leave the command line and hunt through finder. For example, I can open all the transparent .png files for my home page with: \u003Ccode>shop images/home-*.png\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Open files in my text editor from the command line\u003C/p>\n\u003Cp>A simple \u003Ccode>subl .\u003C/code> and an entire directory opens up as a project, or \u003Ccode>subl *.php\u003C/code> and i’ve opened all php files.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Use \u003Ca href=\"http://www.huyng.com/projects/bashmarks/\">bashmarks\u003C/a> to get around \u003Cem>fast\u003C/em>\u003C/p>\n\u003Cp>I use \u003Ccode>s sites\u003C/code> to book mark my sites directory. Then, \u003Ccode>g sites\u003C/code> gets me back.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>This is just scratching the surface of what you can do; these were all simple to set up and I use most of them everyday. Pretty fantastic if you find yourself repeating some common tasks.\u003C/p>\n\u003Ch2 id=\"no-pressure\">No pressure\u003C/h2>\n\u003Cp>All that said, the beauty of the command line is that you can use as much or as little as you want. If you find that it saves you time to deploy via the command line, but you prefer to do everything else via a GUI, then that’s more than fine. I think the most important thing is to not be afraid of the command line — or at least know what you are afraid of. I still do a lot of things the “old fashioned” way, but I have found the command line to be a helpful addition to my toolkit. Hopefully it will do the same for you : )\u003C/p>\n\u003Cp>Happy coding,\nNick\u003C/p>",{"headings":251,"localImagePaths":275,"remoteImagePaths":276,"frontmatter":277,"imagePaths":280},[252,255,259,263,266,269,272],{"depth":92,"slug":253,"text":254},"speed","Speed",{"depth":256,"slug":257,"text":258},4,"workflow-installing-wordpress","Workflow: Installing wordpress",{"depth":260,"slug":261,"text":262},5,"gui","GUI",{"depth":260,"slug":264,"text":265},"command-line-via-ssh","Command Line (via ssh)",{"depth":92,"slug":267,"text":268},"simplicity","Simplicity",{"depth":92,"slug":270,"text":271},"extensibility","Extensibility",{"depth":34,"slug":273,"text":274},"no-pressure","No pressure",[],[],{"layout":16,"title":242,"date":278,"comments":18,"external-url":42,"categories":279,"disqusId":244},"2012-08-10","Terminal",[],"a-command-line-manifesto.md","capturing-errors-and-letting-them-with-set-e-and-e-in-bash",{"id":282,"data":284,"body":288,"filePath":289,"digest":290,"rendered":291,"legacyId":300},{"title":285,"date":286,"layout":16,"disqusId":287,"comments":18},"Capturing errors and letting them free with set -e and set +e in bash",["Date","2018-05-17T00:00:00.000Z"],"/2018/05/17/capturing-errors-and-letting-them-with-set-e-and-e-in-bash","TLDR: Use `set -e` to make the current shell exit if a command run within it exists unsuccessfully and `set +e` to disable the behavior\n\nWhether you love or hate Bash, it's hard to deny the raw beauty of Bash scripting. Portable (mostly!), surprisingly concise, and perfect for environments where you don't have (or want) the overhead of a higher level language, Bash can be a wonderful go-to when hopping between *nix environments. I've recently been using it to write some common docker `ENTRYPOINT`s for running a few services in development and ran into an issue where I wanted the behavior of `set -e` enabled, disabled, and re-enabled in same script.\n\n`set -e`, makes the current shell exit if any command run inside of it exits with a non `0` status. While this may seem harsh at first, it's a great way to ensure that an error in one step of you script doesn't lead to undefined behavior elsewhere; it's much better to stop a script when you fail to connect to a database than have it merrily chug along trying to copy from nowhere.\n\nBecause Bash is always testing you, it would be too easy to have something like `exit_on_errors(true)` or `exit_on_errors(false)` what we do have is the wonderful `set` command. While `help set` is actually quite helpful, it's easy to miss the following line:\n\n> Using + rather than - causes these flags to be turned off.\n\n\nIn my case, I had something like the following pseudocode:\n\n```bash\n#!/bin/bash\n\nset -e\n\n# wait for a service to spin up; exit 1 after 30 seconds\nwait-for-my-service-or-exit http://my-service/healthcheck\n\n# ensure local data uses most recent copy\ncommand_to_check_if_data_current\nDATA_CURRENT=$?\n\nif [ \"$DATA_CURRENT\" -eq 1 ]; then\n  # update the data from from my-service\n  # if we don't have our file\n  download_data_from_my_service\nfi\n\n```\n\nBut I was never getting to my `if` statement because `command_to_check_if_data_current` would exit with a `1` if the data didn't exist in the container. This was because I was using `set -e` in my script to protect against unknown failures and the `command_to_check_if_data_current` command  (which called `exit 1`) would exit the parent script regardless of whether or not it was called in a subshell.\n\nThe solution was to use a combination of `set +e` and `set -e`  to wrap my call to `command_to_check_if_data_current`:\n\n```bash\n#!/bin/bash\n\nset -e\n\n# ensure my-service is up\nwait-for-my-service-or-exit http://my-service/healthcheck\n\nset +e\n# ensure local data uses most recent copy\ncommand_to_check_if_data_current\nDATA_CURRENT=$?\nset -e\n\nif [ \"$DATA_CURRENT\" -eq 1 ]; then\n  # update the data from from my-service\n  download_data_from_my_service\nfi\n```\n\nNot cleanest code perhaps, but it allows for isolating known failures and still ensuring that unknown errors stop your script when they should.\n\nHappy bashing!","src/content/posts/capturing-errors-and-letting-them-with-set-e-and-e-in-bash.md","78ed17c22fd8ce01",{"html":292,"metadata":293},"\u003Cp>TLDR: Use \u003Ccode>set -e\u003C/code> to make the current shell exit if a command run within it exists unsuccessfully and \u003Ccode>set +e\u003C/code> to disable the behavior\u003C/p>\n\u003Cp>Whether you love or hate Bash, it’s hard to deny the raw beauty of Bash scripting. Portable (mostly!), surprisingly concise, and perfect for environments where you don’t have (or want) the overhead of a higher level language, Bash can be a wonderful go-to when hopping between *nix environments. I’ve recently been using it to write some common docker \u003Ccode>ENTRYPOINT\u003C/code>s for running a few services in development and ran into an issue where I wanted the behavior of \u003Ccode>set -e\u003C/code> enabled, disabled, and re-enabled in same script.\u003C/p>\n\u003Cp>\u003Ccode>set -e\u003C/code>, makes the current shell exit if any command run inside of it exits with a non \u003Ccode>0\u003C/code> status. While this may seem harsh at first, it’s a great way to ensure that an error in one step of you script doesn’t lead to undefined behavior elsewhere; it’s much better to stop a script when you fail to connect to a database than have it merrily chug along trying to copy from nowhere.\u003C/p>\n\u003Cp>Because Bash is always testing you, it would be too easy to have something like \u003Ccode>exit_on_errors(true)\u003C/code> or \u003Ccode>exit_on_errors(false)\u003C/code> what we do have is the wonderful \u003Ccode>set\u003C/code> command. While \u003Ccode>help set\u003C/code> is actually quite helpful, it’s easy to miss the following line:\u003C/p>\n\u003Cblockquote>\n\u003Cp>Using + rather than - causes these flags to be turned off.\u003C/p>\n\u003C/blockquote>\n\u003Cp>In my case, I had something like the following pseudocode:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#!/bin/bash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">set\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -e\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># wait for a service to spin up; exit 1 after 30 seconds\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wait-for-my-service-or-exit\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://my-service/healthcheck\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># ensure local data uses most recent copy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">command_to_check_if_data_current\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">DATA_CURRENT\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">$?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$DATA_CURRENT\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\"> -eq\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ]; \u003C/span>\u003Cspan style=\"color:#F97583\">then\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  # update the data from from my-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  # if we don't have our file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  download_data_from_my_service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fi\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I was never getting to my \u003Ccode>if\u003C/code> statement because \u003Ccode>command_to_check_if_data_current\u003C/code> would exit with a \u003Ccode>1\u003C/code> if the data didn’t exist in the container. This was because I was using \u003Ccode>set -e\u003C/code> in my script to protect against unknown failures and the \u003Ccode>command_to_check_if_data_current\u003C/code> command  (which called \u003Ccode>exit 1\u003C/code>) would exit the parent script regardless of whether or not it was called in a subshell.\u003C/p>\n\u003Cp>The solution was to use a combination of \u003Ccode>set +e\u003C/code> and \u003Ccode>set -e\u003C/code>  to wrap my call to \u003Ccode>command_to_check_if_data_current\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#!/bin/bash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">set\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -e\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># ensure my-service is up\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wait-for-my-service-or-exit\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://my-service/healthcheck\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">set\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> +e\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># ensure local data uses most recent copy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">command_to_check_if_data_current\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">DATA_CURRENT\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">$?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">set\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -e\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$DATA_CURRENT\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\"> -eq\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ]; \u003C/span>\u003Cspan style=\"color:#F97583\">then\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  # update the data from from my-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  download_data_from_my_service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fi\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Not cleanest code perhaps, but it allows for isolating known failures and still ensuring that unknown errors stop your script when they should.\u003C/p>\n\u003Cp>Happy bashing!\u003C/p>",{"headings":294,"localImagePaths":295,"remoteImagePaths":296,"frontmatter":297,"imagePaths":299},[],[],[],{"layout":16,"title":285,"date":298,"disqusId":287},"2018-05-17",[],"capturing-errors-and-letting-them-with-set-e-and-e-in-bash.md","encoding-adventures",{"id":301,"data":303,"body":307,"filePath":308,"digest":309,"rendered":310,"legacyId":337},{"title":304,"date":305,"layout":16,"disqusId":306,"comments":18},"Encoding Adventures",["Date","2019-08-02T00:00:00.000Z"],"/2019/08/02/encoding-adventures","I've [previously talked][0] about how files are stored as binary and briefly touched on how those bits are interpreted via an encoding. In this post I'd like to dig into that process a little further, specifically focusing on [Unicode][Unicode] files encoded in [`UTF-8`](https://en.wikipedia.org/wiki/UTF-8).\n\n\nBackground: a very brief introduction to Unicode.\n---\n\n_**Note**: if you understand Unicode, or you just don't care, feel free to skip this section._\n\nEarly computers used a character set called [`ASCII`](https://en.wikipedia.org/wiki/ASCII), which used the numbers `0-127` to represent both readable (e.g. `A`) and non-readable (\"carriage return\") characters. This worked wonderfully in small, North American context, but was woefully inadequate in terms of meeting global linguistic needs. Various competing extensions to ASCII were created to handle characters from different languages, but this led to compatibility issues and confusion when exchanging text in different encodings.\n\n[Unicode][Unicode] attempts to solve this problem by providing one giant character set for _all_ languages and fields (e.g. mathematics, or emoji). It is the current industry standard, but there are still plenty of flavors of character sets in the wild for historical, human [reasons](https://xkcd.com/927/).\n\nEach character in Unicode is represented by a \"Code Point\", which is a number that can be used to represent that character, and retrieve it, from the Unicode character set. This number can be represented in 8 or more bits, depending on how large it is. As note earlier, ASCII is a subset of Unicode that takes up the first 256 (since it uses an extended ASCII set) code points.\n\nSee the \"more information\" section at the bottom for some additional resources if you are interested in knowing more. There's a lot more to be said on the subject.\n\n\nGetting started\n---\n\nLet's create a simple file with some text, similar to the one in the [binary post][0]:\n\n```shell\necho \"hi\" > hello.txt\n```\n\nAnd now let's take a look at how a computer sees that data:\n\n\n```shell\n$ xxd hello.txt\n00000000: 6869 0a                                  hi.\n```\n\nGreat! And now let's look that up in our handy [Unicode table](https://unicode-table.com.com/en/search/?q=i). We see that [hex 68](https://unicode-table.com/en/0068/), which corresponds to `h` and [hex 69](https://unicode-table.com/en/0069/), which corresponds to `i`, is capped off by [0a](https://unicode-table.com/en/000A/) which is the [newline](https://en.wikipedia.org/wiki/Newline#Representation) character.\n\nNow for something more interesting:\n\n```shell\n$ echo \"🙃\" > emoji.txt\n$ xxd emoji.txt\n\n00000000: f09f 9983 0a                             \n\n# grab our bits with -b\n$ xxd -b emoji.txt\n00000000: 11110000 10011111 10011001 10000011 00001010\n```\n\nWhoah, that's a good deal of hex and a _lot_ of bits! \n\nLet's plug those hex numbers (excluding the `0a` newline) into a [unicode lookup](https://unicode-table.com/en/search/?q=f09f+9983):\n\n```\n⛿ - White Flag with Horizontal Middle Black Stripe\n馃 - Ideograph cakes, biscuits, pastry CJK\n```\n\nHmm. That didn't quite go according to plan.\n\nWhat is going on? Well, unfortunately, our first example `hi` benefited from the fact that `UTF8` is backward compatible with ASCII, so 8 bit ASCII character is a valid Unicode code point. Things get more complicated when we move beyond ASCII territory. \n\n\nPlane talk\n---\n\nAll Unicode code points live on a \"plane\", which function similar to pages in a reference book; to look up our character we first need to know which plane it lives on; once we know the plane, we can plug in the codepoint to retrieve it. Our earlier `hi` example, along with a lot of \"basic\" language characters lives on the [\"Basic multilingual plane\"](https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane). Because of this, and it's position within the ASCII portion, we could simply use the hex representation for each 8-bit character as the Unicode codepoint.\n\nOur Emoji, however, lives on the \"Supplementary Multilingual Plane\". To figure out the character our hex/bits point to, we need to do some sleuthing to find the Unicode codepoint that corresponds to our bits.\n\nGetting to the (code) point\n---\n\nBits are just 0s and 1s unless we know how to decode them. Fortunately, we know our file is in [`UTF8`](https://en.wikipedia.org/wiki/UTF-8). `UTF8` is a variable-width encoding format, which means that characters can take up one to four bytes, which saves valuable space for smaller codepoints (e.g. ASCII). This is in contrast to a format like `UTF32` which encodes each character in 32 bits, regardless of its size; e.g. `h` becomes `0000 0000 1001 1001` instead of `1101 000`. Unfortunately, unlike UTF32, we cannot take the bits at face value and we need to do some inspection to get the codepoint they correspond to (See [this SO](https://stackoverflow.com/a/43237606/1048479) post for a detailed explanation).\n\nThe `UTF8` spec gives us an indication of how to process `UTF8` encoded bits. We will ignore the ending non-breaking space, leaving us with four bits which we can break into \"signaling\" portions (e.g. required by the `UTF8`) and \"code bit\" portions (that specify which Unicode character we are dealing with)\n\n```\n\"signaling\" bits| code bits\n----------------|---\n11110             000\n10                011111\n10                011001\n10                000011\n```\n\nIf we remove the \"signaling\" bits and format the code bits we get:\n\n```\ncode bits\n---\n000 \n011111 \n011001\n000011\n```\n\nor `000011111011001000011` which happens to be `1F643` in hex. If we look up `1F643` in a [unicode table](https://unicode-table.com/en/search/?q=1F643) we'll see a familiar upside-down smiley face. We've just cracked the code, huzzah!\n\nBeyond `UTF8`\n---\n\nWe've just covered a single encoding here but a similar principle applies to all encodings. The encoding specification tells us how to interpret bits that compose whatever input our program is handed (a file, HTTP request, or mouse click). Those pieces are the building blocks to encode/decode _anything_ we can think of. \n\nIf you want to cut your teeth on writing your own encoder/decoder, there are plenty of specifications openly available. For example, the [png spec](https://www.w3.org/TR/2003/REC-PNG-20031110/) specifies how to marshall binary data into a PNG. Be warned that this is not always an easy task :)\n\n\nAdditional information\n---\n\nThere is a _lot_ more to be said about Unicode, `UTF8`, and encoding in general. This article pulls from a few different sources, and if you'd like to learn more I'd suggest checking them out:\n\n- A good [overview](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses) of why understanding Unicode is necessary\n- A [step by step guide](http://kunststube.net/encoding) breaking down the encoding process\n- An overview of how [Unicode text is rendered](http://behdad.org/text/) on *nix operating systems\n- [Wikipedia has several UTF8 encoding examples](https://en.wikipedia.org/wiki/UTF-8#Examples).\n\n[0]: https://nick-tomlin.com/2019/07/29/practical-binary/\n[Unicode]: https://home.unicode.org/","src/content/posts/encoding-adventures.md","27f3a84433771501",{"html":311,"metadata":312},"\u003Cp>I’ve \u003Ca href=\"https://nick-tomlin.com/2019/07/29/practical-binary/\">previously talked\u003C/a> about how files are stored as binary and briefly touched on how those bits are interpreted via an encoding. In this post I’d like to dig into that process a little further, specifically focusing on \u003Ca href=\"https://home.unicode.org/\">Unicode\u003C/a> files encoded in \u003Ca href=\"https://en.wikipedia.org/wiki/UTF-8\">\u003Ccode>UTF-8\u003C/code>\u003C/a>.\u003C/p>\n\u003Ch2 id=\"background-a-very-brief-introduction-to-unicode\">Background: a very brief introduction to Unicode.\u003C/h2>\n\u003Cp>\u003Cem>\u003Cstrong>Note\u003C/strong>: if you understand Unicode, or you just don’t care, feel free to skip this section.\u003C/em>\u003C/p>\n\u003Cp>Early computers used a character set called \u003Ca href=\"https://en.wikipedia.org/wiki/ASCII\">\u003Ccode>ASCII\u003C/code>\u003C/a>, which used the numbers \u003Ccode>0-127\u003C/code> to represent both readable (e.g. \u003Ccode>A\u003C/code>) and non-readable (“carriage return”) characters. This worked wonderfully in small, North American context, but was woefully inadequate in terms of meeting global linguistic needs. Various competing extensions to ASCII were created to handle characters from different languages, but this led to compatibility issues and confusion when exchanging text in different encodings.\u003C/p>\n\u003Cp>\u003Ca href=\"https://home.unicode.org/\">Unicode\u003C/a> attempts to solve this problem by providing one giant character set for \u003Cem>all\u003C/em> languages and fields (e.g. mathematics, or emoji). It is the current industry standard, but there are still plenty of flavors of character sets in the wild for historical, human \u003Ca href=\"https://xkcd.com/927/\">reasons\u003C/a>.\u003C/p>\n\u003Cp>Each character in Unicode is represented by a “Code Point”, which is a number that can be used to represent that character, and retrieve it, from the Unicode character set. This number can be represented in 8 or more bits, depending on how large it is. As note earlier, ASCII is a subset of Unicode that takes up the first 256 (since it uses an extended ASCII set) code points.\u003C/p>\n\u003Cp>See the “more information” section at the bottom for some additional resources if you are interested in knowing more. There’s a lot more to be said on the subject.\u003C/p>\n\u003Ch2 id=\"getting-started\">Getting started\u003C/h2>\n\u003Cp>Let’s create a simple file with some text, similar to the one in the \u003Ca href=\"https://nick-tomlin.com/2019/07/29/practical-binary/\">binary post\u003C/a>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"hi\"\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello.txt\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And now let’s take a look at how a computer sees that data:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">$\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> xxd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">00000000:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 6869\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 0a\u003C/span>\u003Cspan style=\"color:#9ECBFF\">                                  hi.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Great! And now let’s look that up in our handy \u003Ca href=\"https://unicode-table.com.com/en/search/?q=i\">Unicode table\u003C/a>. We see that \u003Ca href=\"https://unicode-table.com/en/0068/\">hex 68\u003C/a>, which corresponds to \u003Ccode>h\u003C/code> and \u003Ca href=\"https://unicode-table.com/en/0069/\">hex 69\u003C/a>, which corresponds to \u003Ccode>i\u003C/code>, is capped off by \u003Ca href=\"https://unicode-table.com/en/000A/\">0a\u003C/a> which is the \u003Ca href=\"https://en.wikipedia.org/wiki/Newline#Representation\">newline\u003C/a> character.\u003C/p>\n\u003Cp>Now for something more interesting:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">$\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"🙃\"\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> emoji.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">$\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> xxd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> emoji.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">00000000:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> f09f\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 9983\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 0a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">                             \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># grab our bits with -b\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">$\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> xxd\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -b\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> emoji.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">00000000:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 11110000\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10011111\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10011001\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10000011\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 00001010\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Whoah, that’s a good deal of hex and a \u003Cem>lot\u003C/em> of bits!\u003C/p>\n\u003Cp>Let’s plug those hex numbers (excluding the \u003Ccode>0a\u003C/code> newline) into a \u003Ca href=\"https://unicode-table.com/en/search/?q=f09f+9983\">unicode lookup\u003C/a>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>⛿ - White Flag with Horizontal Middle Black Stripe\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>馃 - Ideograph cakes, biscuits, pastry CJK\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Hmm. That didn’t quite go according to plan.\u003C/p>\n\u003Cp>What is going on? Well, unfortunately, our first example \u003Ccode>hi\u003C/code> benefited from the fact that \u003Ccode>UTF8\u003C/code> is backward compatible with ASCII, so 8 bit ASCII character is a valid Unicode code point. Things get more complicated when we move beyond ASCII territory.\u003C/p>\n\u003Ch2 id=\"plane-talk\">Plane talk\u003C/h2>\n\u003Cp>All Unicode code points live on a “plane”, which function similar to pages in a reference book; to look up our character we first need to know which plane it lives on; once we know the plane, we can plug in the codepoint to retrieve it. Our earlier \u003Ccode>hi\u003C/code> example, along with a lot of “basic” language characters lives on the \u003Ca href=\"https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane\">“Basic multilingual plane”\u003C/a>. Because of this, and it’s position within the ASCII portion, we could simply use the hex representation for each 8-bit character as the Unicode codepoint.\u003C/p>\n\u003Cp>Our Emoji, however, lives on the “Supplementary Multilingual Plane”. To figure out the character our hex/bits point to, we need to do some sleuthing to find the Unicode codepoint that corresponds to our bits.\u003C/p>\n\u003Ch2 id=\"getting-to-the-code-point\">Getting to the (code) point\u003C/h2>\n\u003Cp>Bits are just 0s and 1s unless we know how to decode them. Fortunately, we know our file is in \u003Ca href=\"https://en.wikipedia.org/wiki/UTF-8\">\u003Ccode>UTF8\u003C/code>\u003C/a>. \u003Ccode>UTF8\u003C/code> is a variable-width encoding format, which means that characters can take up one to four bytes, which saves valuable space for smaller codepoints (e.g. ASCII). This is in contrast to a format like \u003Ccode>UTF32\u003C/code> which encodes each character in 32 bits, regardless of its size; e.g. \u003Ccode>h\u003C/code> becomes \u003Ccode>0000 0000 1001 1001\u003C/code> instead of \u003Ccode>1101 000\u003C/code>. Unfortunately, unlike UTF32, we cannot take the bits at face value and we need to do some inspection to get the codepoint they correspond to (See \u003Ca href=\"https://stackoverflow.com/a/43237606/1048479\">this SO\u003C/a> post for a detailed explanation).\u003C/p>\n\u003Cp>The \u003Ccode>UTF8\u003C/code> spec gives us an indication of how to process \u003Ccode>UTF8\u003C/code> encoded bits. We will ignore the ending non-breaking space, leaving us with four bits which we can break into “signaling” portions (e.g. required by the \u003Ccode>UTF8\u003C/code>) and “code bit” portions (that specify which Unicode character we are dealing with)\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>\"signaling\" bits| code bits\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>----------------|---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>11110             000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10                011111\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10                011001\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10                000011\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If we remove the “signaling” bits and format the code bits we get:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>code bits\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>000 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>011111 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>011001\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>000011\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>or \u003Ccode>000011111011001000011\u003C/code> which happens to be \u003Ccode>1F643\u003C/code> in hex. If we look up \u003Ccode>1F643\u003C/code> in a \u003Ca href=\"https://unicode-table.com/en/search/?q=1F643\">unicode table\u003C/a> we’ll see a familiar upside-down smiley face. We’ve just cracked the code, huzzah!\u003C/p>\n\u003Ch2 id=\"beyond-utf8\">Beyond \u003Ccode>UTF8\u003C/code>\u003C/h2>\n\u003Cp>We’ve just covered a single encoding here but a similar principle applies to all encodings. The encoding specification tells us how to interpret bits that compose whatever input our program is handed (a file, HTTP request, or mouse click). Those pieces are the building blocks to encode/decode \u003Cem>anything\u003C/em> we can think of.\u003C/p>\n\u003Cp>If you want to cut your teeth on writing your own encoder/decoder, there are plenty of specifications openly available. For example, the \u003Ca href=\"https://www.w3.org/TR/2003/REC-PNG-20031110/\">png spec\u003C/a> specifies how to marshall binary data into a PNG. Be warned that this is not always an easy task :)\u003C/p>\n\u003Ch2 id=\"additional-information\">Additional information\u003C/h2>\n\u003Cp>There is a \u003Cem>lot\u003C/em> more to be said about Unicode, \u003Ccode>UTF8\u003C/code>, and encoding in general. This article pulls from a few different sources, and if you’d like to learn more I’d suggest checking them out:\u003C/p>\n\u003Cul>\n\u003Cli>A good \u003Ca href=\"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses\">overview\u003C/a> of why understanding Unicode is necessary\u003C/li>\n\u003Cli>A \u003Ca href=\"http://kunststube.net/encoding\">step by step guide\u003C/a> breaking down the encoding process\u003C/li>\n\u003Cli>An overview of how \u003Ca href=\"http://behdad.org/text/\">Unicode text is rendered\u003C/a> on *nix operating systems\u003C/li>\n\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/UTF-8#Examples\">Wikipedia has several UTF8 encoding examples\u003C/a>.\u003C/li>\n\u003C/ul>",{"headings":313,"localImagePaths":332,"remoteImagePaths":333,"frontmatter":334,"imagePaths":336},[314,317,320,323,326,329],{"depth":34,"slug":315,"text":316},"background-a-very-brief-introduction-to-unicode","Background: a very brief introduction to Unicode.",{"depth":34,"slug":318,"text":319},"getting-started","Getting started",{"depth":34,"slug":321,"text":322},"plane-talk","Plane talk",{"depth":34,"slug":324,"text":325},"getting-to-the-code-point","Getting to the (code) point",{"depth":34,"slug":327,"text":328},"beyond-utf8","Beyond UTF8",{"depth":34,"slug":330,"text":331},"additional-information","Additional information",[],[],{"layout":16,"title":304,"date":335,"disqusId":306},"2019-08-02",[],"encoding-adventures.md","migrating-from-jekyll-to-next-js-initial-thoughts",{"id":338,"data":340,"body":344,"filePath":345,"digest":346,"rendered":347,"legacyId":398},{"title":341,"date":342,"excerpt":343,"comments":18},"Migrating from Jekyll to Next.js: Initial thoughts",["Date","2021-01-14T00:00:00.000Z"],"This post describes the ups and downs of transitioning my blog from Jekyll to Next.js","This post describes the ups and downs of transitioning my blog from [Jekyll](https://jekyllrb.com/) and [Github Pages](https://pages.github.com/) to [`next.js`](https://nextjs.org) and [netlify](https://www.netlify.com/).\n\n️🏔🧗 The journey ️🧗 🏔\n---\n\nI've wanted to try something new for my personal site for a very long time. There are a few major reasons why I haven't made this transition before:\n\n### Core problems\n\n#### Tooling fatigue\n\nAs of this writing [Jamstack](https://jamstack.org/generators/) lists 314 different static site generators. Each with their own helpful intros and dedicated user base. That's too many!\n\n#### Knowledge overhead\n\nI am a full stack engineer comfortable with JavaScript and dealing with the ever-expanding JS ecosystem. It's what I get paid to do. I do not want to have to learn an entire static site generator ecosystem to create a blog (sorry Gatsby!).\n\n#### Bad abstractions\n\nI felt that \"simple\" tools often forced me down paths that I did not want to go (using templates, using a specific pre-processor/framework), and \"powerful\" tools required learning a complicated plugin architecture to do something simple.\n\n### The end of the road\n\nAfter encountering these issues with Gatsby, 11ty, and hugo, I've finally settled over to Next.js and Netlify and couldn't be happier.\n\n🌈🦄The good parts 🦄🌈\n---\n\n###  _great_ documentation and community\n\nHaving docs is great, but having _good_ documentation is what matters.\nNext.js has a really nice, [step-by-step tutorial](https://nextjs.org/learn/basics/create-nextjs-app) that does a great job of balancing major concepts while still delivering immediate feedback.\n\n### A balanced level of abstraction\n\nProviding something that is both understandable and powerful is a difficult task. With other frameworks, I found myself dealing with a mess of plugins/configuration to get something working, or forced into \"one right way\" of doing things.\n[`next.js`](https://nextjs.org) does an admirable job of providing things like hot-reloading and bundle optimization while still allowing me to write an application in a familiar way, with tools I know and love.\n\n\n### Configuration friendly\n\nNext takes a \"zero config\" approach by default, but layering on configuration was seamless. I ended up switching from SASS to [Tailwind](https://tailwindcss.com/) and I was able to easily configure the integration without needing to work with a strange plugin syntax. Next does some magic to pick up this configuration, but I found that any issues I had were typically isolated to either `next` or `tailwind which made debugging and googling a _lot_ easier than working with a third party wrapper/interface.\n\n🌩👹 The not-so-nice parts  👹🌩\n---\n\nWhile next's static functionality works like a charm, there are a few quirks:\n\n### Static site generation requires sacrifice\n\n- As of next 10.x, You can't easily mix dynamic client side routes with static generation. Every \"page\" needs to have a path you know _at build time_ OR use a query param to dynamically specify contents. This isn't a deal breaker for my personal site, but is a blocker for another project that I am working on.\n- [`next/image`](https://nextjs.org/docs/api-reference/next/image) does not work with static sites, since it relies on a server to generate the correct image for a given breakpoint. This forces you to either use a CDN that provides similar services, or switch to non-static routes.\n\n### 3rd party integrations can be finicky\n\nWhile using SASS was a snap, converting to tailwind/postcss took some effort. I ran into some [strange behavior](https://github.com/vercel/next.js/issues/13488) that led to extremely slow build times. This wasn't Next's fault, but it was a time sync for me to figure out.\n\n✌️🕊 Parting words 🕊✌️\n---\n\nAfter all of this, I still believe that the simplest tool for the job is the best one. I'm really grateful for Jekyll, and I would still recommend Jekyll + Github pages to anyone that wants a simple and effective blogging solution.\n\nI'm very happy with how `next.js` has turned out so far, and very excited for the possibilities that it opens up for my site.","src/content/posts/migrating-from-jekyll-to-next-js-initial-thoughts.md","f8a1c7d023e2fe77",{"html":348,"metadata":349},"\u003Cp>This post describes the ups and downs of transitioning my blog from \u003Ca href=\"https://jekyllrb.com/\">Jekyll\u003C/a> and \u003Ca href=\"https://pages.github.com/\">Github Pages\u003C/a> to \u003Ca href=\"https://nextjs.org\">\u003Ccode>next.js\u003C/code>\u003C/a> and \u003Ca href=\"https://www.netlify.com/\">netlify\u003C/a>.\u003C/p>\n\u003Ch2 id=\"️-the-journey-️\">️🏔🧗 The journey ️🧗 🏔\u003C/h2>\n\u003Cp>I’ve wanted to try something new for my personal site for a very long time. There are a few major reasons why I haven’t made this transition before:\u003C/p>\n\u003Ch3 id=\"core-problems\">Core problems\u003C/h3>\n\u003Ch4 id=\"tooling-fatigue\">Tooling fatigue\u003C/h4>\n\u003Cp>As of this writing \u003Ca href=\"https://jamstack.org/generators/\">Jamstack\u003C/a> lists 314 different static site generators. Each with their own helpful intros and dedicated user base. That’s too many!\u003C/p>\n\u003Ch4 id=\"knowledge-overhead\">Knowledge overhead\u003C/h4>\n\u003Cp>I am a full stack engineer comfortable with JavaScript and dealing with the ever-expanding JS ecosystem. It’s what I get paid to do. I do not want to have to learn an entire static site generator ecosystem to create a blog (sorry Gatsby!).\u003C/p>\n\u003Ch4 id=\"bad-abstractions\">Bad abstractions\u003C/h4>\n\u003Cp>I felt that “simple” tools often forced me down paths that I did not want to go (using templates, using a specific pre-processor/framework), and “powerful” tools required learning a complicated plugin architecture to do something simple.\u003C/p>\n\u003Ch3 id=\"the-end-of-the-road\">The end of the road\u003C/h3>\n\u003Cp>After encountering these issues with Gatsby, 11ty, and hugo, I’ve finally settled over to Next.js and Netlify and couldn’t be happier.\u003C/p>\n\u003Ch2 id=\"the-good-parts\">🌈🦄The good parts 🦄🌈\u003C/h2>\n\u003Ch3 id=\"great-documentation-and-community\">\u003Cem>great\u003C/em> documentation and community\u003C/h3>\n\u003Cp>Having docs is great, but having \u003Cem>good\u003C/em> documentation is what matters.\nNext.js has a really nice, \u003Ca href=\"https://nextjs.org/learn/basics/create-nextjs-app\">step-by-step tutorial\u003C/a> that does a great job of balancing major concepts while still delivering immediate feedback.\u003C/p>\n\u003Ch3 id=\"a-balanced-level-of-abstraction\">A balanced level of abstraction\u003C/h3>\n\u003Cp>Providing something that is both understandable and powerful is a difficult task. With other frameworks, I found myself dealing with a mess of plugins/configuration to get something working, or forced into “one right way” of doing things.\n\u003Ca href=\"https://nextjs.org\">\u003Ccode>next.js\u003C/code>\u003C/a> does an admirable job of providing things like hot-reloading and bundle optimization while still allowing me to write an application in a familiar way, with tools I know and love.\u003C/p>\n\u003Ch3 id=\"configuration-friendly\">Configuration friendly\u003C/h3>\n\u003Cp>Next takes a “zero config” approach by default, but layering on configuration was seamless. I ended up switching from SASS to \u003Ca href=\"https://tailwindcss.com/\">Tailwind\u003C/a> and I was able to easily configure the integration without needing to work with a strange plugin syntax. Next does some magic to pick up this configuration, but I found that any issues I had were typically isolated to either \u003Ccode>next\u003C/code> or `tailwind which made debugging and googling a \u003Cem>lot\u003C/em> easier than working with a third party wrapper/interface.\u003C/p>\n\u003Ch2 id=\"-the-not-so-nice-parts-\">🌩👹 The not-so-nice parts  👹🌩\u003C/h2>\n\u003Cp>While next’s static functionality works like a charm, there are a few quirks:\u003C/p>\n\u003Ch3 id=\"static-site-generation-requires-sacrifice\">Static site generation requires sacrifice\u003C/h3>\n\u003Cul>\n\u003Cli>As of next 10.x, You can’t easily mix dynamic client side routes with static generation. Every “page” needs to have a path you know \u003Cem>at build time\u003C/em> OR use a query param to dynamically specify contents. This isn’t a deal breaker for my personal site, but is a blocker for another project that I am working on.\u003C/li>\n\u003Cli>\u003Ca href=\"https://nextjs.org/docs/api-reference/next/image\">\u003Ccode>next/image\u003C/code>\u003C/a> does not work with static sites, since it relies on a server to generate the correct image for a given breakpoint. This forces you to either use a CDN that provides similar services, or switch to non-static routes.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"3rd-party-integrations-can-be-finicky\">3rd party integrations can be finicky\u003C/h3>\n\u003Cp>While using SASS was a snap, converting to tailwind/postcss took some effort. I ran into some \u003Ca href=\"https://github.com/vercel/next.js/issues/13488\">strange behavior\u003C/a> that led to extremely slow build times. This wasn’t Next’s fault, but it was a time sync for me to figure out.\u003C/p>\n\u003Ch2 id=\"️-parting-words-️\">✌️🕊 Parting words 🕊✌️\u003C/h2>\n\u003Cp>After all of this, I still believe that the simplest tool for the job is the best one. I’m really grateful for Jekyll, and I would still recommend Jekyll + Github pages to anyone that wants a simple and effective blogging solution.\u003C/p>\n\u003Cp>I’m very happy with how \u003Ccode>next.js\u003C/code> has turned out so far, and very excited for the possibilities that it opens up for my site.\u003C/p>",{"headings":350,"localImagePaths":393,"remoteImagePaths":394,"frontmatter":395,"imagePaths":397},[351,354,357,360,363,366,369,372,375,378,381,384,387,390],{"depth":34,"slug":352,"text":353},"️-the-journey-️","️🏔🧗 The journey ️🧗 🏔",{"depth":92,"slug":355,"text":356},"core-problems","Core problems",{"depth":256,"slug":358,"text":359},"tooling-fatigue","Tooling fatigue",{"depth":256,"slug":361,"text":362},"knowledge-overhead","Knowledge overhead",{"depth":256,"slug":364,"text":365},"bad-abstractions","Bad abstractions",{"depth":92,"slug":367,"text":368},"the-end-of-the-road","The end of the road",{"depth":34,"slug":370,"text":371},"the-good-parts","🌈🦄The good parts 🦄🌈",{"depth":92,"slug":373,"text":374},"great-documentation-and-community","great documentation and community",{"depth":92,"slug":376,"text":377},"a-balanced-level-of-abstraction","A balanced level of abstraction",{"depth":92,"slug":379,"text":380},"configuration-friendly","Configuration friendly",{"depth":34,"slug":382,"text":383},"-the-not-so-nice-parts-","🌩👹 The not-so-nice parts  👹🌩",{"depth":92,"slug":385,"text":386},"static-site-generation-requires-sacrifice","Static site generation requires sacrifice",{"depth":92,"slug":388,"text":389},"3rd-party-integrations-can-be-finicky","3rd party integrations can be finicky",{"depth":34,"slug":391,"text":392},"️-parting-words-️","✌️🕊 Parting words 🕊✌️",[],[],{"title":341,"date":396,"excerpt":343},["Date","2021-01-14T00:00:00.000Z"],[],"migrating-from-jekyll-to-next-js-initial-thoughts.md","programmatically-running-npm-scripts",{"id":399,"data":401,"body":405,"filePath":406,"digest":407,"rendered":408,"legacyId":418},{"title":402,"date":403,"layout":16,"disqusId":404,"comments":18},"Programmatically running npm scripts",["Date","2015-09-04T00:00:00.000Z"],"/2015/09/04/programmatically-running-npm-scripts","npm has become an essential part of my tool-chain, and I often use the `scripts` entry in lieu of build tools like Gulp or Grunt for small to medium sized projects. One issue that I've encountered is wanting to kick off tasks stored in the `scripts` without actually running `npm` on the shell. Googling did not lead to any easy answers, but the solution was readily apparent from the `npm-cli` [source](https://github.com/npm/npm/blob/master/bin/npm-cli.js#L69).\n\nOnce you have installed npm locally `npm i npm --save` [insert \"Yo dawg...\" reference here] or by using the [`global-npm`](https://www.npmjs.com/package/global-npm) (thanks @bfredit for the tip), you can require and use it:\n\n~~~ javascript\nvar npm = require('npm');\n\nnpm.load({}, (er) => {\n  if (er) { return; }\n\n  npm.commands.run(['test'], (runEr, output) => {\n    console.log(runEr, output)\n  });\n\n  // additional args can be passed as well\n  npm.commands.run(['example', 'aditional', 'arg'], (runEr, output) => {\n    console.log(runEr, output)\n  });\n});\n~~~\n\nThis is obviously a very simplistic use case, but hopefully it provides some food for thought. Let me know if you are able to build something interesting with it.","src/content/posts/programmatically-running-npm-scripts.md","79f02e7d30478c2d",{"html":409,"metadata":410},"\u003Cp>npm has become an essential part of my tool-chain, and I often use the \u003Ccode>scripts\u003C/code> entry in lieu of build tools like Gulp or Grunt for small to medium sized projects. One issue that I’ve encountered is wanting to kick off tasks stored in the \u003Ccode>scripts\u003C/code> without actually running \u003Ccode>npm\u003C/code> on the shell. Googling did not lead to any easy answers, but the solution was readily apparent from the \u003Ccode>npm-cli\u003C/code> \u003Ca href=\"https://github.com/npm/npm/blob/master/bin/npm-cli.js#L69\">source\u003C/a>.\u003C/p>\n\u003Cp>Once you have installed npm locally \u003Ccode>npm i npm --save\u003C/code> [insert “Yo dawg…” reference here] or by using the \u003Ca href=\"https://www.npmjs.com/package/global-npm\">\u003Ccode>global-npm\u003C/code>\u003C/a> (thanks @bfredit for the tip), you can require and use it:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> npm \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'npm'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">npm.\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({}, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">er\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (er) { \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  npm.commands.\u003C/span>\u003Cspan style=\"color:#B392F0\">run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'test'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], (\u003C/span>\u003Cspan style=\"color:#FFAB70\">runEr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">output\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(runEr, output)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // additional args can be passed as well\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  npm.commands.\u003C/span>\u003Cspan style=\"color:#B392F0\">run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'example'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'aditional'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'arg'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], (\u003C/span>\u003Cspan style=\"color:#FFAB70\">runEr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">output\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(runEr, output)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is obviously a very simplistic use case, but hopefully it provides some food for thought. Let me know if you are able to build something interesting with it.\u003C/p>",{"headings":411,"localImagePaths":412,"remoteImagePaths":413,"frontmatter":414,"imagePaths":417},[],[],[],{"layout":16,"title":402,"date":415,"comments":18,"categories":416,"disqusId":404},"2015-09-04","npm node",[],"programmatically-running-npm-scripts.md","practical-binary",{"id":419,"data":421,"body":425,"filePath":426,"digest":427,"rendered":428,"legacyId":467},{"title":422,"date":423,"layout":16,"disqusId":424,"comments":18},"Practical Binary",["Date","2019-07-29T00:00:00.000Z"],"/2019/07/29/practical-binary","I consider myself an experienced programmer, but my real-world experience is mostly in the full stack realm. I've never written a line of assembly; only written a tiny bit of `c`, and bit-shifting makes my head hurt.\n\n Because I wanted to learn more about general computing, I recently read [`code`][0]. The book gives an overview of computing from its 19th-century roots until the end of the 20th century, taking the time to go in-depth on the both implementation of computation _and_ its history. I'd highly recommend giving it a read if you are interested in learning more about computing.\n\nThis article provides some hands-on examples of one of the more interesting sections in [`code`][0], which deals with how a series of `0`s and `1s` is interpreted by your computer and passed on to you as something meaningful.\n\nThere are 10 types of people in the world\n---\n\nWhen people talk about expressing things in binary, my first impulse is to treat them like they are [joking around](https://www.convertbinary.com/joke/) or [nonsensical robots](https://www.youtube.com/watch?v=Ia9N_wZaoa4). In practice, binary data itself is quite simple once you make the initial mental shift.\n\n\n### Terms\n\nThis post isn't about binary itself, but I'll briefly detail some terms before we move on:\n\n- [`binary`](https://en.wikipedia.org/wiki/Binary_number) numbers are expressed in a base 2. If this is entirely foreign to you, I'd highly suggest reading the Wikipedia article, [`code`][0], and doing some simple decimal to binary conversions in your head.\n    - Here is a simple example, for the binary number `1001` converted to a decimal one:\n\n        ```\n        1 0 0 1  =  000 00 9\n        - - - -     --- -- -\n        8 4 2 1  =  100 10 1\n        ```\n\n      where the our decimal (base 10) system uses positions based on the powers of `10` (1, 10, 100, 1000...), binary uses positons based on the powers of `2` (1, 2, 4, 8...)\n\n\n- [`hexidecimal`](https://en.wikipedia.org/wiki/Hexadecimal) (or `hex`) It is base-16 number system that is convenient for working with binary numbers in a more human readable, space efficient manner.\n    -  For example, 35 in binary is `100011` and `23` in `hex`. More importantly, the conversion between `hex` and binary can be done in groups of four without counting the \"place\" of each digit:\n        ```\n        0111  1110  0100\n          ^    ^     ^\n          7    E     4\n        ```\n        This makes it _much_ easier for humans to deal with long binary numbers.\n\n- [`bit`](https://en.wikipedia.org/wiki/Bit): A `bit` (or binary digit) is the atomic unit of data for your computer. It consists of a single value which is either a `0` or `1`. Everything, from plain text, to an image, to the keys being pressed on your keypad, is expressed in bits.\n\n- [`byte`](https://en.wikipedia.org/wiki/Byte): A `byte` is a series of bits, typically (but not always!) `8` bits.\n\n\nDiving in\n---\n\n> Note: These examples assume you are using a *nix based OS like Mac OSX, Ubuntu, or using the \u003Ca href=\"https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/\">Linux bash shell on windows\u003C/a>\n\nTo start on a practical note, let's create a simple file with some text:\n\n```bash\necho \"hi\" > hello.txt\n```\n\nAnd now let's take a look at how a computer sees that data using [`xxd`](https://linux.die.net/man/1/xxd), a handy *nix tool for interacting with hex and binary representation of files:\n\n\n```bash\nxxd hello.txt\n00000000: 6869 0a                                  hi.\n```\n\nI know I promised you `0`s and `1`s but there's actually a convenience layer between us and binary to make data simple to read. By default `xxd` outputs the `hexidecimal` (or `hex`) representation of the underlying binary file.\n\nTo get at those raw bits, we need to pass the `-b` flag to `xxd`:\n\n\n```bash\nxxd -b hello.txt\n\n00000000: 01101000 01101001 00001010                             hi.\n```\n\nThat's more like it. This provides a great illustration of why hex is the preferred format for binary numbers, it's a lot more concise!\n\nWe still don't know how those zeros and ones translate to `hi` though. Let's dig in.\n\nCrack the (en)code\n---\n\n`01101000 01101001` (or `68 69` in hex) could be `hi` or it could be something entirely different based on the encoding our program is using. Some encodings (like `gif` or `pdf`) include a hint to their contents in the first few bytes, but there is no requirement that files self identify.\n\nWhat's fascinating about this is that we generally rely on a suffix to files to designate how we believe they should be interpreted. The `.pdf` postfix is merely a hint (the file could be any jumble of binary, not necessarily one that makes sense to a something that reads PDFs). I remember \"fixing\" broken files in my college tech support days be adding back a missing `.pdf` extension that someone had accidentally removed.\n\n### It's all about the encoding\n\nBefore we can marshall those `0`s and `1`s into something meaningful, we need to know how they were encoded so we can decode them. Most *nix operating systems will have the `file` utility, which can be used to make an educated guess as to the type and encoding of a file:\n\n```\nfile hello.txt\nhello.txt: text/plain; charset=us-ascii\n```\n\nAlthough this is a helpful hint, the only reliable way of knowing how to decode a file is knowing how that file is encoded; you can use heuristic or trial and error to find one that \"seems\" right but there is no surefire way to get the right encoding for an arbitrary file.\n\nWithout the correct encoding, a file is just a stream of `0`s and `1s` with endless, unrealized potential.\n\n### Decoding\n\nWhen we use a tool like `cat` or read a file in a programming language `JavaScript` or `Python` into a string, our computer uses a default encoding to interpret the bits contained within the file. On *nix machines, the `$LANG` variable contains the default system character set, which `cat`, `less`, and other tools will use (`en_US.UTF-8` in my case). These tools will use an encoding to map the bits from the file to a character in the character set. More on that now.\n\nA character set (or charset) is a mapping of numbers to a character (e.g. `64` to  `A`). My system charset of `en_US.UTF-8` uses the [Unicode](https://home.unicode.org/) character set.\n\nWhile that mapping is important, it doesn't have anything to do with those bits. We'll need to use an encoding (in this case `UTF-8`, another industry standard) to interpret those bits as numbers that can be mapped to the Unicode charset.\n\n### Back to our file\n\nNow that we understand the encoding we are going to use, and the charset it will map to, let's break things out onto a few lines to talk about how the ASCII and UTF8 see those bits:\n\n```\n01101000 = 104 (h in ascii and 0x68 Unicode)\n01101001 = 105 (i in ascii and 0x69 Unicode)\n00001010 = 9 (newline in ascii and Unicode)\n```\n\nAgain, the computer just sees (and happily whirs through) a long sequence of binary: `011010000110100100001010` but it's doing the aforementioned mapping when we get to our terminal.\n\n### But what about \"binary\" files?\n\nWhen they say a \"binary\" file, what most people typically mean is something that is not a \"plain\" ASCII/UTF8 file like `hello.txt` or `example.csv`. If we `cat example.csv` or `hello.txt`, we'll get an accurate representation of the file's contents, but if we run `head example.pdf` we get something very different:\n\n\n```binary\n%PDF-1.4\n%äüöß\n2 0 obj\n\u003C\u003C/Length 3 0 R/Filter/FlateDecode>>\nstream\nx=\n1\n²Gv~߷d{r\"X\n^YAS!0XrbVhl8(OvN3J$oz\n                      6w$ɝjOQNf˒(\n```\n\nThings go well when we are dealing with UTF-8 sequences like `%PDF-1.4` (which includes ASCII, as we found out earlier) but quickly get crazy when the encoding that `head` is trying to use dutifully maps the bits in the file to \"nonsense\" characters (the bits in the file are numbers that map to valid Unicode characters, but they have no real meaning).\n\nThis is the same as if you attempted to `cat` an executable file, a video, or anything else that uses non \"text\" or human readable encoding.\n\nA program that is capable of working with [PDF encoding](https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf) (warning, the PDF spec is _huge_) would know how to properly interpret each section of bytes to display a PDF to a user.\n\nWhere do bits come from?\n---\n\nWe've been working with data stored on a computer drive, but i'd like to make a quick note about the storage of binary data. Because of the simplicity of the format, humans have used numerous ingenious methods to story binary data, even before modern computers existed. These include [punch cards](https://en.wikipedia.org/wiki/Punched_card), [tapes](https://en.wikipedia.org/wiki/Tape_drive), and [electrons](https://en.wikipedia.org/wiki/Flash_memory) to name a few. While the mechanics of most storage methods are beyond my expertise, each method is simply a collection of `0`s and `1s`. \n\nThe simplicity of that abstraction is one of the beauties of binary data: a program doesn't have to care that the data comes from a tape drive, a piece of paper, or a [steampunk flash drive](https://www.amazon.com/Slavatech-Handmade-Pentode-Steampunk-Industrial/dp/B00NB0QYDI), it just needs to know how to handle a stream of data. \n\nConclusion\n---\n\nWhile working with individual bits is far removed from my day to day as a programmer, grasping the fundamentals of how a computer works with data is a great way of better understanding the systems that I depend on to get my work done. It's also useful in understanding the different [layers](https://en.wikipedia.org/wiki/OSI_model) of data, and understanding vital concepts like encoding. [`01100011 01101000 01100101 01100101 01110010 01110011`](https://onlineutf8tools.com/convert-binary-to-utf8?input=01100011%2001101000%2001100101%2001100101%2001110010%2001110011)!\n\n\n[0]: https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319","src/content/posts/practical-binary.md","b18489f52c3fb160",{"html":429,"metadata":430},"\u003Cp>I consider myself an experienced programmer, but my real-world experience is mostly in the full stack realm. I’ve never written a line of assembly; only written a tiny bit of \u003Ccode>c\u003C/code>, and bit-shifting makes my head hurt.\u003C/p>\n\u003Cp>Because I wanted to learn more about general computing, I recently read \u003Ca href=\"https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319\">\u003Ccode>code\u003C/code>\u003C/a>. The book gives an overview of computing from its 19th-century roots until the end of the 20th century, taking the time to go in-depth on the both implementation of computation \u003Cem>and\u003C/em> its history. I’d highly recommend giving it a read if you are interested in learning more about computing.\u003C/p>\n\u003Cp>This article provides some hands-on examples of one of the more interesting sections in \u003Ca href=\"https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319\">\u003Ccode>code\u003C/code>\u003C/a>, which deals with how a series of \u003Ccode>0\u003C/code>s and \u003Ccode>1s\u003C/code> is interpreted by your computer and passed on to you as something meaningful.\u003C/p>\n\u003Ch2 id=\"there-are-10-types-of-people-in-the-world\">There are 10 types of people in the world\u003C/h2>\n\u003Cp>When people talk about expressing things in binary, my first impulse is to treat them like they are \u003Ca href=\"https://www.convertbinary.com/joke/\">joking around\u003C/a> or \u003Ca href=\"https://www.youtube.com/watch?v=Ia9N_wZaoa4\">nonsensical robots\u003C/a>. In practice, binary data itself is quite simple once you make the initial mental shift.\u003C/p>\n\u003Ch3 id=\"terms\">Terms\u003C/h3>\n\u003Cp>This post isn’t about binary itself, but I’ll briefly detail some terms before we move on:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Binary_number\">\u003Ccode>binary\u003C/code>\u003C/a> numbers are expressed in a base 2. If this is entirely foreign to you, I’d highly suggest reading the Wikipedia article, \u003Ca href=\"https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319\">\u003Ccode>code\u003C/code>\u003C/a>, and doing some simple decimal to binary conversions in your head.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Here is a simple example, for the binary number \u003Ccode>1001\u003C/code> converted to a decimal one:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>1 0 0 1  =  000 00 9\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- - - -     --- -- -\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>8 4 2 1  =  100 10 1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>where the our decimal (base 10) system uses positions based on the powers of \u003Ccode>10\u003C/code> (1, 10, 100, 1000…), binary uses positons based on the powers of \u003Ccode>2\u003C/code> (1, 2, 4, 8…)\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Hexadecimal\">\u003Ccode>hexidecimal\u003C/code>\u003C/a> (or \u003Ccode>hex\u003C/code>) It is base-16 number system that is convenient for working with binary numbers in a more human readable, space efficient manner.\u003C/p>\n\u003Cul>\n\u003Cli>For example, 35 in binary is \u003Ccode>100011\u003C/code> and \u003Ccode>23\u003C/code> in \u003Ccode>hex\u003C/code>. More importantly, the conversion between \u003Ccode>hex\u003C/code> and binary can be done in groups of four without counting the “place” of each digit:\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>0111  1110  0100\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  ^    ^     ^\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  7    E     4\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\nThis makes it \u003Cem>much\u003C/em> easier for humans to deal with long binary numbers.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Bit\">\u003Ccode>bit\u003C/code>\u003C/a>: A \u003Ccode>bit\u003C/code> (or binary digit) is the atomic unit of data for your computer. It consists of a single value which is either a \u003Ccode>0\u003C/code> or \u003Ccode>1\u003C/code>. Everything, from plain text, to an image, to the keys being pressed on your keypad, is expressed in bits.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Byte\">\u003Ccode>byte\u003C/code>\u003C/a>: A \u003Ccode>byte\u003C/code> is a series of bits, typically (but not always!) \u003Ccode>8\u003C/code> bits.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"diving-in\">Diving in\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Note: These examples assume you are using a *nix based OS like Mac OSX, Ubuntu, or using the \u003Ca href=\"https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/\">Linux bash shell on windows\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>To start on a practical note, let’s create a simple file with some text:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"hi\"\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello.txt\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And now let’s take a look at how a computer sees that data using \u003Ca href=\"https://linux.die.net/man/1/xxd\">\u003Ccode>xxd\u003C/code>\u003C/a>, a handy *nix tool for interacting with hex and binary representation of files:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">xxd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">00000000:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 6869\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 0a\u003C/span>\u003Cspan style=\"color:#9ECBFF\">                                  hi.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I know I promised you \u003Ccode>0\u003C/code>s and \u003Ccode>1\u003C/code>s but there’s actually a convenience layer between us and binary to make data simple to read. By default \u003Ccode>xxd\u003C/code> outputs the \u003Ccode>hexidecimal\u003C/code> (or \u003Ccode>hex\u003C/code>) representation of the underlying binary file.\u003C/p>\n\u003Cp>To get at those raw bits, we need to pass the \u003Ccode>-b\u003C/code> flag to \u003Ccode>xxd\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">xxd\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -b\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">00000000:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 01101000\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 01101001\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 00001010\u003C/span>\u003Cspan style=\"color:#9ECBFF\">                             hi.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That’s more like it. This provides a great illustration of why hex is the preferred format for binary numbers, it’s a lot more concise!\u003C/p>\n\u003Cp>We still don’t know how those zeros and ones translate to \u003Ccode>hi\u003C/code> though. Let’s dig in.\u003C/p>\n\u003Ch2 id=\"crack-the-encode\">Crack the (en)code\u003C/h2>\n\u003Cp>\u003Ccode>01101000 01101001\u003C/code> (or \u003Ccode>68 69\u003C/code> in hex) could be \u003Ccode>hi\u003C/code> or it could be something entirely different based on the encoding our program is using. Some encodings (like \u003Ccode>gif\u003C/code> or \u003Ccode>pdf\u003C/code>) include a hint to their contents in the first few bytes, but there is no requirement that files self identify.\u003C/p>\n\u003Cp>What’s fascinating about this is that we generally rely on a suffix to files to designate how we believe they should be interpreted. The \u003Ccode>.pdf\u003C/code> postfix is merely a hint (the file could be any jumble of binary, not necessarily one that makes sense to a something that reads PDFs). I remember “fixing” broken files in my college tech support days be adding back a missing \u003Ccode>.pdf\u003C/code> extension that someone had accidentally removed.\u003C/p>\n\u003Ch3 id=\"its-all-about-the-encoding\">It’s all about the encoding\u003C/h3>\n\u003Cp>Before we can marshall those \u003Ccode>0\u003C/code>s and \u003Ccode>1\u003C/code>s into something meaningful, we need to know how they were encoded so we can decode them. Most *nix operating systems will have the \u003Ccode>file\u003C/code> utility, which can be used to make an educated guess as to the type and encoding of a file:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>file hello.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>hello.txt: text/plain; charset=us-ascii\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Although this is a helpful hint, the only reliable way of knowing how to decode a file is knowing how that file is encoded; you can use heuristic or trial and error to find one that “seems” right but there is no surefire way to get the right encoding for an arbitrary file.\u003C/p>\n\u003Cp>Without the correct encoding, a file is just a stream of \u003Ccode>0\u003C/code>s and \u003Ccode>1s\u003C/code> with endless, unrealized potential.\u003C/p>\n\u003Ch3 id=\"decoding\">Decoding\u003C/h3>\n\u003Cp>When we use a tool like \u003Ccode>cat\u003C/code> or read a file in a programming language \u003Ccode>JavaScript\u003C/code> or \u003Ccode>Python\u003C/code> into a string, our computer uses a default encoding to interpret the bits contained within the file. On *nix machines, the \u003Ccode>$LANG\u003C/code> variable contains the default system character set, which \u003Ccode>cat\u003C/code>, \u003Ccode>less\u003C/code>, and other tools will use (\u003Ccode>en_US.UTF-8\u003C/code> in my case). These tools will use an encoding to map the bits from the file to a character in the character set. More on that now.\u003C/p>\n\u003Cp>A character set (or charset) is a mapping of numbers to a character (e.g. \u003Ccode>64\u003C/code> to  \u003Ccode>A\u003C/code>). My system charset of \u003Ccode>en_US.UTF-8\u003C/code> uses the \u003Ca href=\"https://home.unicode.org/\">Unicode\u003C/a> character set.\u003C/p>\n\u003Cp>While that mapping is important, it doesn’t have anything to do with those bits. We’ll need to use an encoding (in this case \u003Ccode>UTF-8\u003C/code>, another industry standard) to interpret those bits as numbers that can be mapped to the Unicode charset.\u003C/p>\n\u003Ch3 id=\"back-to-our-file\">Back to our file\u003C/h3>\n\u003Cp>Now that we understand the encoding we are going to use, and the charset it will map to, let’s break things out onto a few lines to talk about how the ASCII and UTF8 see those bits:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>01101000 = 104 (h in ascii and 0x68 Unicode)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>01101001 = 105 (i in ascii and 0x69 Unicode)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>00001010 = 9 (newline in ascii and Unicode)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Again, the computer just sees (and happily whirs through) a long sequence of binary: \u003Ccode>011010000110100100001010\u003C/code> but it’s doing the aforementioned mapping when we get to our terminal.\u003C/p>\n\u003Ch3 id=\"but-what-about-binary-files\">But what about “binary” files?\u003C/h3>\n\u003Cp>When they say a “binary” file, what most people typically mean is something that is not a “plain” ASCII/UTF8 file like \u003Ccode>hello.txt\u003C/code> or \u003Ccode>example.csv\u003C/code>. If we \u003Ccode>cat example.csv\u003C/code> or \u003Ccode>hello.txt\u003C/code>, we’ll get an accurate representation of the file’s contents, but if we run \u003Ccode>head example.pdf\u003C/code> we get something very different:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>%PDF-1.4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>%äüöß\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>2 0 obj\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>&#x3C;&#x3C;/Length 3 0 R/Filter/FlateDecode>>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>stream\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>x=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>²Gv~߷d{r\"X\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>^YAS!0XrbVhl8(OvN3J$oz\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>                      6w$ɝjOQNf˒(\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Things go well when we are dealing with UTF-8 sequences like \u003Ccode>%PDF-1.4\u003C/code> (which includes ASCII, as we found out earlier) but quickly get crazy when the encoding that \u003Ccode>head\u003C/code> is trying to use dutifully maps the bits in the file to “nonsense” characters (the bits in the file are numbers that map to valid Unicode characters, but they have no real meaning).\u003C/p>\n\u003Cp>This is the same as if you attempted to \u003Ccode>cat\u003C/code> an executable file, a video, or anything else that uses non “text” or human readable encoding.\u003C/p>\n\u003Cp>A program that is capable of working with \u003Ca href=\"https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf\">PDF encoding\u003C/a> (warning, the PDF spec is \u003Cem>huge\u003C/em>) would know how to properly interpret each section of bytes to display a PDF to a user.\u003C/p>\n\u003Ch2 id=\"where-do-bits-come-from\">Where do bits come from?\u003C/h2>\n\u003Cp>We’ve been working with data stored on a computer drive, but i’d like to make a quick note about the storage of binary data. Because of the simplicity of the format, humans have used numerous ingenious methods to story binary data, even before modern computers existed. These include \u003Ca href=\"https://en.wikipedia.org/wiki/Punched_card\">punch cards\u003C/a>, \u003Ca href=\"https://en.wikipedia.org/wiki/Tape_drive\">tapes\u003C/a>, and \u003Ca href=\"https://en.wikipedia.org/wiki/Flash_memory\">electrons\u003C/a> to name a few. While the mechanics of most storage methods are beyond my expertise, each method is simply a collection of \u003Ccode>0\u003C/code>s and \u003Ccode>1s\u003C/code>.\u003C/p>\n\u003Cp>The simplicity of that abstraction is one of the beauties of binary data: a program doesn’t have to care that the data comes from a tape drive, a piece of paper, or a \u003Ca href=\"https://www.amazon.com/Slavatech-Handmade-Pentode-Steampunk-Industrial/dp/B00NB0QYDI\">steampunk flash drive\u003C/a>, it just needs to know how to handle a stream of data.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>While working with individual bits is far removed from my day to day as a programmer, grasping the fundamentals of how a computer works with data is a great way of better understanding the systems that I depend on to get my work done. It’s also useful in understanding the different \u003Ca href=\"https://en.wikipedia.org/wiki/OSI_model\">layers\u003C/a> of data, and understanding vital concepts like encoding. \u003Ca href=\"https://onlineutf8tools.com/convert-binary-to-utf8?input=01100011%2001101000%2001100101%2001100101%2001110010%2001110011\">\u003Ccode>01100011 01101000 01100101 01100101 01110010 01110011\u003C/code>\u003C/a>!\u003C/p>",{"headings":431,"localImagePaths":462,"remoteImagePaths":463,"frontmatter":464,"imagePaths":466},[432,435,438,441,444,447,450,453,456,459],{"depth":34,"slug":433,"text":434},"there-are-10-types-of-people-in-the-world","There are 10 types of people in the world",{"depth":92,"slug":436,"text":437},"terms","Terms",{"depth":34,"slug":439,"text":440},"diving-in","Diving in",{"depth":34,"slug":442,"text":443},"crack-the-encode","Crack the (en)code",{"depth":92,"slug":445,"text":446},"its-all-about-the-encoding","It’s all about the encoding",{"depth":92,"slug":448,"text":449},"decoding","Decoding",{"depth":92,"slug":451,"text":452},"back-to-our-file","Back to our file",{"depth":92,"slug":454,"text":455},"but-what-about-binary-files","But what about “binary” files?",{"depth":34,"slug":457,"text":458},"where-do-bits-come-from","Where do bits come from?",{"depth":34,"slug":460,"text":461},"conclusion","Conclusion",[],[],{"layout":16,"title":422,"date":465,"disqusId":424},"2019-07-29",[],"practical-binary.md","sql-goodies",{"id":468,"data":470,"body":474,"filePath":475,"digest":476,"rendered":477,"legacyId":498},{"title":471,"date":472,"layout":16,"disqusId":473,"comments":18},"SQL Goodies",["Date","2016-05-18T00:00:00.000Z"],"/2016/05/18/sql-goodies","I've recently been diving into SQL ([postgres](http://www.postgresql.org/) to be exact). Here are a few random tidbits that have helped me on my journey.\n\n## Things to read\n\n**Don't read blogs** (except mine 😉) While there are _many_ helpful resources on the internet for learning about SQL, I've found the scattershot approach of reading blogs to be less than helpful in my own journey. They often cover only part of a subject or are too focused on a specific dialect to be truly helpful. I'm not suggesting that articles are never helpful, but that they can remove clarity when you are starting out. Longer form material is much better suited at the early stages.\n\nTo that end, I've found [Learning SQL](http://www.amazon.com/Learning-SQL-Alan-Beaulieu/dp/0596520832) to be the best comprehensive guide on SQL; it includes a sample database and exercises with each chapter that provide a great way to exercise the concepts you read. There are plenty of long-form books out there, but this was the most approachable and comprehensive for basic concepts.\n\nSQL Joins were an initially for me, but [A visual explanation of SQL joins](https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/) helped clear up the confusion. It is the best of _many many_ posts about joins.\n\n\n## Things to do\n\nLike many things, getting more comfortable with SQL is all about actually doing things with the language.\n\n- Play around with [SQL fiddle](http://sqlfiddle.com/) which is a great low-impact place to try out new ideas and concepts\n- Use simple CTE's when you don't want/need a schema\n  - This is a great low overhead way of playing around with a small set of data without the need to declare a set schema or `insert` rows.\n  - In Postgres, this can be accomplished using `with`\n\n```sql\n-- postgres only, alas\nWITH\n  characters (id, first_name, last_name) as (\n    VALUES\n      (0, 'Harry', 'Potter'),\n      (1, 'Ron', 'Weasley')\n  ),\n\n  wands (id, character_id, name) as (\n    VALUES\n    (0, 0, 'Unicorn Core'),\n    (1, 1, 'Maple Core')\n  )\n\nSELECT name, first_name, last_name from wands\n  INNER JOIN characters ON characters.id = wands.character_id;\n```\n\n- Use a dataset that matters to you. If you workplace provides a sanitized read-only copy of data, use it! If that doesn't spark your interest, create your own database (favorite sports tems, ninja clans, etc), or convert something from [data.gov](https://www.google.com/#q=open+data) or other data providers). I find it much easier to work with data that I have an emotional or business connection to.\n\n## An ORM should be a jetpack, not a crutch\n\nORMs like ActiveRecord are fantastic, they enable teams to write easy, reusable queries without littering your code with verbose SQL. Unfortunately, this means that when you need to dip down into raw SQL or troubleshoot a SQL problem, you can be left out in the cold.\n\nMost ORMs provide a query logging feature, or a way to translate a series of method calls into an SQL statement. In active record, this is the `to_sql` method, e.g. `MyModel.joins(:my_association).where(query: true).to_sql`. Using this can help you understand and translate complicated ORM logic into SQL to better understand what is going on under the hood.\n\nEnsure that you understand the structure of your database by looking at it in a console (or a schema file, if your ORM provides one). Even if you are using an ORM, this will make the connections between objects much easier to visualize. It also helps demystify abstract and potentially confusing ORM concepts like [PolyMorphic Associaitons](http://guides.rubyonrails.org/association_basics.html#polymorphic-associations) when you see what they are doing under the hood.\n\nOnce you have a feel for the structure of a database, use toy projects or a throwaway branch to selectively replace ORM code with raw SQL. Many ORMs will give you an ability to mix raw SQL in with their own wrappers. E.g. ActiveRecord will allow you to `select` off of queries, or execute a raw sql statement with `ActiveRecord.base.connection.execute`. This provides a great way to gradually start using SQL without jumping in head first (if that's not your cup of tea). It's also a great way to see how an ORM may optimize (or _not_ optimize) your queries.\n\nThe more you learn about SQL (and how your ORM formats SQL) the better your code (whether raw or ormified) will be.\n\n## Console tips\n\nThe SQL console is one of the most useful tools for learning SQL and discovering your dataset. Here are a few tricks and tips\n\n- `explain` to see what your queries are doing under the hood\n- `show tables` (or `\\d` for Postgres) gives you your DB's structure\n- `describe \u003Ctable>` (or `\\d \u003Ctable>` for PG) gives you a table's structure\n- `\\e` in a console will open the current command in the editor of your choice. Very handy for tweaking long queries\n\n**Postgres Only**\n\n- `\\x` Use super pretty \"extended display\" for outputting queries\n- `\\i file.sql` (PG only) executes a query from a file\n- `\\o output.out` writes output to `output.out` which can be great for storing the results of a query for later","src/content/posts/sql-goodies.md","6239662cef9b6a9f",{"html":478,"metadata":479},"\u003Cp>I’ve recently been diving into SQL (\u003Ca href=\"http://www.postgresql.org/\">postgres\u003C/a> to be exact). Here are a few random tidbits that have helped me on my journey.\u003C/p>\n\u003Ch2 id=\"things-to-read\">Things to read\u003C/h2>\n\u003Cp>\u003Cstrong>Don’t read blogs\u003C/strong> (except mine 😉) While there are \u003Cem>many\u003C/em> helpful resources on the internet for learning about SQL, I’ve found the scattershot approach of reading blogs to be less than helpful in my own journey. They often cover only part of a subject or are too focused on a specific dialect to be truly helpful. I’m not suggesting that articles are never helpful, but that they can remove clarity when you are starting out. Longer form material is much better suited at the early stages.\u003C/p>\n\u003Cp>To that end, I’ve found \u003Ca href=\"http://www.amazon.com/Learning-SQL-Alan-Beaulieu/dp/0596520832\">Learning SQL\u003C/a> to be the best comprehensive guide on SQL; it includes a sample database and exercises with each chapter that provide a great way to exercise the concepts you read. There are plenty of long-form books out there, but this was the most approachable and comprehensive for basic concepts.\u003C/p>\n\u003Cp>SQL Joins were an initially for me, but \u003Ca href=\"https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/\">A visual explanation of SQL joins\u003C/a> helped clear up the confusion. It is the best of \u003Cem>many many\u003C/em> posts about joins.\u003C/p>\n\u003Ch2 id=\"things-to-do\">Things to do\u003C/h2>\n\u003Cp>Like many things, getting more comfortable with SQL is all about actually doing things with the language.\u003C/p>\n\u003Cul>\n\u003Cli>Play around with \u003Ca href=\"http://sqlfiddle.com/\">SQL fiddle\u003C/a> which is a great low-impact place to try out new ideas and concepts\u003C/li>\n\u003Cli>Use simple CTE’s when you don’t want/need a schema\n\u003Cul>\n\u003Cli>This is a great low overhead way of playing around with a small set of data without the need to declare a set schema or \u003Ccode>insert\u003C/code> rows.\u003C/li>\n\u003Cli>In Postgres, this can be accomplished using \u003Ccode>with\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- postgres only, alas\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WITH\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  characters (id, first_name, last_name) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    VALUES\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      (\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Harry'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Potter'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      (\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Ron'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Weasley'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  wands (id, character_id, \u003C/span>\u003Cspan style=\"color:#F97583\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    VALUES\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Unicorn Core'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Maple Core'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, first_name, last_name \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> wands\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  INNER JOIN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> characters \u003C/span>\u003Cspan style=\"color:#F97583\">ON\u003C/span>\u003Cspan style=\"color:#79B8FF\"> characters\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">id\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> wands\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">character_id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>Use a dataset that matters to you. If you workplace provides a sanitized read-only copy of data, use it! If that doesn’t spark your interest, create your own database (favorite sports tems, ninja clans, etc), or convert something from \u003Ca href=\"https://www.google.com/#q=open+data\">data.gov\u003C/a> or other data providers). I find it much easier to work with data that I have an emotional or business connection to.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"an-orm-should-be-a-jetpack-not-a-crutch\">An ORM should be a jetpack, not a crutch\u003C/h2>\n\u003Cp>ORMs like ActiveRecord are fantastic, they enable teams to write easy, reusable queries without littering your code with verbose SQL. Unfortunately, this means that when you need to dip down into raw SQL or troubleshoot a SQL problem, you can be left out in the cold.\u003C/p>\n\u003Cp>Most ORMs provide a query logging feature, or a way to translate a series of method calls into an SQL statement. In active record, this is the \u003Ccode>to_sql\u003C/code> method, e.g. \u003Ccode>MyModel.joins(:my_association).where(query: true).to_sql\u003C/code>. Using this can help you understand and translate complicated ORM logic into SQL to better understand what is going on under the hood.\u003C/p>\n\u003Cp>Ensure that you understand the structure of your database by looking at it in a console (or a schema file, if your ORM provides one). Even if you are using an ORM, this will make the connections between objects much easier to visualize. It also helps demystify abstract and potentially confusing ORM concepts like \u003Ca href=\"http://guides.rubyonrails.org/association_basics.html#polymorphic-associations\">PolyMorphic Associaitons\u003C/a> when you see what they are doing under the hood.\u003C/p>\n\u003Cp>Once you have a feel for the structure of a database, use toy projects or a throwaway branch to selectively replace ORM code with raw SQL. Many ORMs will give you an ability to mix raw SQL in with their own wrappers. E.g. ActiveRecord will allow you to \u003Ccode>select\u003C/code> off of queries, or execute a raw sql statement with \u003Ccode>ActiveRecord.base.connection.execute\u003C/code>. This provides a great way to gradually start using SQL without jumping in head first (if that’s not your cup of tea). It’s also a great way to see how an ORM may optimize (or \u003Cem>not\u003C/em> optimize) your queries.\u003C/p>\n\u003Cp>The more you learn about SQL (and how your ORM formats SQL) the better your code (whether raw or ormified) will be.\u003C/p>\n\u003Ch2 id=\"console-tips\">Console tips\u003C/h2>\n\u003Cp>The SQL console is one of the most useful tools for learning SQL and discovering your dataset. Here are a few tricks and tips\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>explain\u003C/code> to see what your queries are doing under the hood\u003C/li>\n\u003Cli>\u003Ccode>show tables\u003C/code> (or \u003Ccode>\\d\u003C/code> for Postgres) gives you your DB’s structure\u003C/li>\n\u003Cli>\u003Ccode>describe &#x3C;table>\u003C/code> (or \u003Ccode>\\d &#x3C;table>\u003C/code> for PG) gives you a table’s structure\u003C/li>\n\u003Cli>\u003Ccode>\\e\u003C/code> in a console will open the current command in the editor of your choice. Very handy for tweaking long queries\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Postgres Only\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>\\x\u003C/code> Use super pretty “extended display” for outputting queries\u003C/li>\n\u003Cli>\u003Ccode>\\i file.sql\u003C/code> (PG only) executes a query from a file\u003C/li>\n\u003Cli>\u003Ccode>\\o output.out\u003C/code> writes output to \u003Ccode>output.out\u003C/code> which can be great for storing the results of a query for later\u003C/li>\n\u003C/ul>",{"headings":480,"localImagePaths":493,"remoteImagePaths":494,"frontmatter":495,"imagePaths":497},[481,484,487,490],{"depth":34,"slug":482,"text":483},"things-to-read","Things to read",{"depth":34,"slug":485,"text":486},"things-to-do","Things to do",{"depth":34,"slug":488,"text":489},"an-orm-should-be-a-jetpack-not-a-crutch","An ORM should be a jetpack, not a crutch",{"depth":34,"slug":491,"text":492},"console-tips","Console tips",[],[],{"layout":16,"title":471,"comments":18,"categories":132,"date":496,"disqusId":473},"2016-05-18",[],"sql-goodies.md","reflection",{"id":499,"data":501,"body":505,"filePath":506,"digest":507,"rendered":508,"legacyId":529},{"title":502,"date":503,"layout":16,"disqusId":504,"comments":18},"The power of reflection",["Date","2019-09-05T00:00:00.000Z"],"/2019/09/05/reflection","Your are eyes closed, you feel the warmth of the sun work into your face, shoulders, and arms, the only sound is that of wave after wave of ocean water crashing against the sand near your feet. I don't know about you, but I've just described my worst nightmare. \n\nGetting things done relaxes and invigorates me. I've always preferred to spend my free time being productive: burning down my reading list, working on a side-project, or cooking.  unfortunately, there's a hidden cost to this productive proclivity: I feel anxious when I'm not able to accomplish anything.\n\nIn this post, I would like to talk about how I use the process of stopping and recording my thoughts to transform seemingly empty moments into something meaningful.\n\nBeing productive as a new parent\n---\n\nMy wife and I recently welcomed our second child into our household. thanks to Netflix's generosity, I've been able to take several months off to get to know my new son and help make the transition to two kids easier for the family. this period has brought me a great deal of joy, but also disrupted the already tiny reserves of free time that I had to focus on other things.\n\nIn the past, my response to a time crunch was to try and get things done in every spare moment. that means reading blog posts on the toilet or commuting, trying to chip away at a coding project in 10-minute chunks throughout the day, or doing algorithm exercises while trying to rock my son to sleep. this unsurprisingly (at least to everyone but me) resulted in more stress.\n\nThis time around, now that I am older and ever so slightly wiser, I oriented myself around a few values:\n\n1. sleep is foundational to everything\n2. focus on one thing at a time\n3. stopping and taking the time to think and reflect is a to-do\n4. family is the ultimate task\n\nSome of this is still difficult for me to do. I miss the warm fuzzy feeling of starting a new project or learning about a new javascript framework, but the result is that I feel less stressed and more accomplished. more importantly, I'm also more present with my family.\n\nWith that framework in place, let me define how I go about my practice of reflection.\n\nWhat does reflection look like?\n---\n\nI use my times of reflection to focus on the balance of family and professional growth; as well as to think about my overall career growth. I focus on whatever is the strongest impression in my mind at the moment, as well as a few core questions:\n\n1. what am I feeling right now?\n    - this is a great bridge to unspoken difficulties in the day-to-day that need to be dealt with\n    - it also provides a launchpad for other more focused reflection (tiredness could lead to changes in routine to provide more sleep)\n2. what am I excited about?\n    - this a good opportunity to examine whether or not the current task I have is actually worthwhile, or lean into something I am really excited about\n3. what am I dreading?\n    - this typically helps surface two things:\n        1. something important and meaningful that I am subconsciously avoiding (typically due to fear)\n        2. something I am working on that I should drop because it actually isn't important and isn't fulfilling\n4. what [meaningful goal](https://facilethings.com/blog/en/time-management-matrix) should I accomplish, or work towards accomplishing?\n    - this can be a great way to re-focus on a current goal or get organized and ready to tackle the next one\n\nThe specific questions are important, and it's fine if I cannot answer all of them, they are starting points.\n\nWhen to use reflection\n---\n\nSchedules are lovely, but life as a parent rarely goes according to plan. I typically have a few hours of unscheduled time a week, and i'll either choose to use that to work on a specific project or sit down and journal if I have nothing that productively fit into that slot.\n\nIf there is a moment when I am feeling the pain of not doing anything, and I have free time, my default is to use that time to reflect. if there's a task that I need to get done or something I am particularly excited about, I use some of that time to schedule it (which means finding a slot or slots that work with my family's schedule). This helps me deal with the pressure to get something done in a way that allows me to check a box, without committing to something that will inevitably be interrupted by a skinned knee or dirty diaper.\n\nThe trick that I've used to adopt reflection as a regular practice is to treat it as something I can check off on a checklist. I get the satisfaction of accomplishing something worthwhile without the opportunity cost of embarking on another project. since periods of transition and downtime are inevitable, regardless of life stage, conserving and pooling mental energy through an activity like reflection provides a productive way to deal with these gaps.\n\nAnd then?\n---\n\nSometimes reflection leads to an artifact like this blog post (which is great), but the primary output of reflection is internal: the feeling of being in touch with myself. this leads to me feeling healthier, being less surprised by my own reactions or feelings to life's inevitable hiccups, and having a better sense of overall direction in my life. these moments of reflection also provide great jumping points to talk with trusted friends who can add their own perspectives or advice.\n\nHopefully there's something in my experience, and how i've been working through it, that's been helpful to you. I'd love to hear your thoughts and experiences in the comments.","src/content/posts/reflection.md","b2ddbcefe64d5e7d",{"html":509,"metadata":510},"\u003Cp>Your are eyes closed, you feel the warmth of the sun work into your face, shoulders, and arms, the only sound is that of wave after wave of ocean water crashing against the sand near your feet. I don’t know about you, but I’ve just described my worst nightmare.\u003C/p>\n\u003Cp>Getting things done relaxes and invigorates me. I’ve always preferred to spend my free time being productive: burning down my reading list, working on a side-project, or cooking.  unfortunately, there’s a hidden cost to this productive proclivity: I feel anxious when I’m not able to accomplish anything.\u003C/p>\n\u003Cp>In this post, I would like to talk about how I use the process of stopping and recording my thoughts to transform seemingly empty moments into something meaningful.\u003C/p>\n\u003Ch2 id=\"being-productive-as-a-new-parent\">Being productive as a new parent\u003C/h2>\n\u003Cp>My wife and I recently welcomed our second child into our household. thanks to Netflix’s generosity, I’ve been able to take several months off to get to know my new son and help make the transition to two kids easier for the family. this period has brought me a great deal of joy, but also disrupted the already tiny reserves of free time that I had to focus on other things.\u003C/p>\n\u003Cp>In the past, my response to a time crunch was to try and get things done in every spare moment. that means reading blog posts on the toilet or commuting, trying to chip away at a coding project in 10-minute chunks throughout the day, or doing algorithm exercises while trying to rock my son to sleep. this unsurprisingly (at least to everyone but me) resulted in more stress.\u003C/p>\n\u003Cp>This time around, now that I am older and ever so slightly wiser, I oriented myself around a few values:\u003C/p>\n\u003Col>\n\u003Cli>sleep is foundational to everything\u003C/li>\n\u003Cli>focus on one thing at a time\u003C/li>\n\u003Cli>stopping and taking the time to think and reflect is a to-do\u003C/li>\n\u003Cli>family is the ultimate task\u003C/li>\n\u003C/ol>\n\u003Cp>Some of this is still difficult for me to do. I miss the warm fuzzy feeling of starting a new project or learning about a new javascript framework, but the result is that I feel less stressed and more accomplished. more importantly, I’m also more present with my family.\u003C/p>\n\u003Cp>With that framework in place, let me define how I go about my practice of reflection.\u003C/p>\n\u003Ch2 id=\"what-does-reflection-look-like\">What does reflection look like?\u003C/h2>\n\u003Cp>I use my times of reflection to focus on the balance of family and professional growth; as well as to think about my overall career growth. I focus on whatever is the strongest impression in my mind at the moment, as well as a few core questions:\u003C/p>\n\u003Col>\n\u003Cli>what am I feeling right now?\n\u003Cul>\n\u003Cli>this is a great bridge to unspoken difficulties in the day-to-day that need to be dealt with\u003C/li>\n\u003Cli>it also provides a launchpad for other more focused reflection (tiredness could lead to changes in routine to provide more sleep)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>what am I excited about?\n\u003Cul>\n\u003Cli>this a good opportunity to examine whether or not the current task I have is actually worthwhile, or lean into something I am really excited about\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>what am I dreading?\n\u003Cul>\n\u003Cli>this typically helps surface two things:\n\u003Col>\n\u003Cli>something important and meaningful that I am subconsciously avoiding (typically due to fear)\u003C/li>\n\u003Cli>something I am working on that I should drop because it actually isn’t important and isn’t fulfilling\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>what \u003Ca href=\"https://facilethings.com/blog/en/time-management-matrix\">meaningful goal\u003C/a> should I accomplish, or work towards accomplishing?\n\u003Cul>\n\u003Cli>this can be a great way to re-focus on a current goal or get organized and ready to tackle the next one\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>The specific questions are important, and it’s fine if I cannot answer all of them, they are starting points.\u003C/p>\n\u003Ch2 id=\"when-to-use-reflection\">When to use reflection\u003C/h2>\n\u003Cp>Schedules are lovely, but life as a parent rarely goes according to plan. I typically have a few hours of unscheduled time a week, and i’ll either choose to use that to work on a specific project or sit down and journal if I have nothing that productively fit into that slot.\u003C/p>\n\u003Cp>If there is a moment when I am feeling the pain of not doing anything, and I have free time, my default is to use that time to reflect. if there’s a task that I need to get done or something I am particularly excited about, I use some of that time to schedule it (which means finding a slot or slots that work with my family’s schedule). This helps me deal with the pressure to get something done in a way that allows me to check a box, without committing to something that will inevitably be interrupted by a skinned knee or dirty diaper.\u003C/p>\n\u003Cp>The trick that I’ve used to adopt reflection as a regular practice is to treat it as something I can check off on a checklist. I get the satisfaction of accomplishing something worthwhile without the opportunity cost of embarking on another project. since periods of transition and downtime are inevitable, regardless of life stage, conserving and pooling mental energy through an activity like reflection provides a productive way to deal with these gaps.\u003C/p>\n\u003Ch2 id=\"and-then\">And then?\u003C/h2>\n\u003Cp>Sometimes reflection leads to an artifact like this blog post (which is great), but the primary output of reflection is internal: the feeling of being in touch with myself. this leads to me feeling healthier, being less surprised by my own reactions or feelings to life’s inevitable hiccups, and having a better sense of overall direction in my life. these moments of reflection also provide great jumping points to talk with trusted friends who can add their own perspectives or advice.\u003C/p>\n\u003Cp>Hopefully there’s something in my experience, and how i’ve been working through it, that’s been helpful to you. I’d love to hear your thoughts and experiences in the comments.\u003C/p>",{"headings":511,"localImagePaths":524,"remoteImagePaths":525,"frontmatter":526,"imagePaths":528},[512,515,518,521],{"depth":34,"slug":513,"text":514},"being-productive-as-a-new-parent","Being productive as a new parent",{"depth":34,"slug":516,"text":517},"what-does-reflection-look-like","What does reflection look like?",{"depth":34,"slug":519,"text":520},"when-to-use-reflection","When to use reflection",{"depth":34,"slug":522,"text":523},"and-then","And then?",[],[],{"layout":16,"title":502,"date":527,"disqusId":504},"2019-09-05",[],"reflection.md","replacing-common-photoshop-workflows-with-imagemagick",{"id":530,"data":532,"body":536,"filePath":537,"digest":538,"rendered":539,"legacyId":620},{"title":533,"date":534,"layout":16,"disqusId":535,"comments":18},"Replacing Common Photoshop workflows with ImageMagick",["Date","2013-03-16T00:00:00.000Z"],"/2013/03/16/replacing-common-photoshop-workflows-with-imagemagick","Photoshop is a wonderful tool, but it tends to require mousing (even with shortcuts), likes to eat up as much RAM as possible, and doesn't play nice with bash scripts. Thats why I prefer [Image Magick](http://www.imagemagick.org/script/index.php): a quirky, insanely full-featured CLI image manipulation library. I'll run through some examples of using it do a few common tasks that I previously used photoshop for, such as:\n\n- Identify the size/type of image\n- Convert image types\n- Resize images to a maximum width/height\n- Reduce image filesize\n- Trim Whitespace\n- Create new images from scratch\n- Add borders\n\n\n\u003Cstrong>Example Repository\u003C/strong>\n\nIf you want to follow along, i've created an [example repository](https://bitbucket.org/nicktomlin/imagemagick-examples/) with some source files. I'll be referencing them through the post.\n\n## Installation\n\n### Mac Os X\nMac users can (and should) use [brew](http://mxcl.github.com/homebrew/) :\n\n``\nbrew install imagemagick\n``\n### Linux\n\nMost linux distributions should have the ``imagemagick`` package available by default.\n\nFor Ubuntu:\n\n``apt-get install imagemagick``\n\n## There be dragons: Mogrify Vs. Convert\nOne important thing to cover before we start slicing and dicing images is that IM has two  major methods for manipulating images: ``convert`` and ``mogrify``. ``Convert`` takes a source file, makes whatever changes you desire to it and ouptus them to a file you specify. ``Mogrify`` only accepts one file, and makes all changes on that file (unless you specify a destination directory). ``mogrify`` has a simpler syntax for performing batch operations on images, but that elegance comes with the potential of deleting precious content. There's an example of how to handle batch operations using both commands in the \"resize\" section later on. For now, just be warned that ``mogrify`` will write any changes you make to the __original__ files. Back up early; back up often.\n\n## [Identify](http://www.imagemagick.org/script/command-line-options.php#identify) the size and type of images\n``identify`` is great for getting a quick overview of an image's properties.\n\nOur example's source file includes an image file named ``300``, which i've nabbed from [PlaceKitten](http://placekitten.com/). Photoshop doesn't know what to do with the image, because it is missing an extension, and while we could try and guess the extension by renaming the file to (gif|png|jpg) and seeing what happens, but it's cooler (and faster) to use the ``identify`` command to figure things out:\n\n~~~ shell\nidentify 300\n300 JPEG 200x200 200x200+0+0 8-bit sRGB 8KB 0.000u 0:00.009\n~~~\n\nAh, a jpeg. I suspected it all along.\n\n### Formatting identify's output\nThe default output of the ``identify`` command is a little verbose for my taste. We can trim it down by using IM built in ``-format`` [escapes](http://www.imagemagick.org/script/escape.php)\n\n\u003Cpre>\u003Ccode> # Print the name, and dimensions of the file named 300\n  identify -format \"Name: %f Dimensions: %P Type: %m\" 300 \u003C/code>\u003C/pre>\n\nBatch identification is simple with your shell's built in [globbing](http://wiki.bash-hackers.org/syntax/expansion/globs):\n\n\u003Cpre>\u003Ccode>\n  # '*' will get you more than you ask for, so it's best to narrow\n  # things down based on the file structure you are dealing with\n  identify *\u003C/code>\u003C/pre>\n## Convert image formats\nImagemagick's powerhouse is the [``convert``](http://www.imagemagick.org/script/convert.php) command. You can use it to do almost anything you can imagine through some terrifyingly complex flags. We'll try to keep things simple : )\n\n### Convert from ``tiff`` to ``jpg``\n\nImage magick can effortlessly convert images between various formats. A problem one of my coworkers ran into recently involved clients needing images in the ``tiff`` format. Photoshop can do batch operations, but the process is clunky, and — in my experience— unreliable.\n\n#### Single Images:\n- ``convert convert.tiff kitten.jpg`` Simple, no?\n\n#### Multiple Images:\n- destroying the original image:\n  - ``mogrify`` ``mogrify --format tiff *.jpg``\n- retaining the original image, the ``mogrify`` command can be used with the ``-path`` flag\n  - ``mogrify --format tiff -path converted *.jpg``\n  - The path (in this case the 'converted' directory) must exist, or IM will complain\n  - Make sure that this path is different than the files you are using ``mogrify`` on, or they will be overwritten.\n- retaining the original image, you can use  a long``convert`` statement (see batch resizing below).\n\n## Resize images\n\n### Simple Resize\n\n``convert kitten.jpg -resize 80% resized-kitten.jpg``\n\n### Batch Resizing\n\nClients rarely have a images in a uniform, web-optimized format, and even if they do I usually need need two copies: retina-ready images, and images for us normal folks. ImageMagick makes generating those a snap.\n\nIn our ``resize/batch`` folder:\n\n``convert *.jpg -resize 80% -set filename:f '%t@2x' '%[filename:f].jpg'``\n\nHere we are resizing all jpg images by 80%, setting the filename the filename ``%t`` plus the string ``@2x`` to follow apple's convention for retina images, and then outputting the file. The syntax is a little esoteric (more details on that [here](http://www.imagemagick.org/Usage/files/#save_escapes)), but once you get the hang of it it can be quite useful.\n\nWe can now run ``mogrify !(*@2x).jpg -resize 40%`` to cut the non retina images down to size (note, this will \"destroy\" the original images -- I have a backup handy).\n\n### Resizing to a maximum pixel width\nIf you have do not have a specific size for your images, but want to keep things small, you can use the following syntax:\n\nIn our ``resize`` folder, there is a max width image. Running identify gives us the following:\n\n``max-width.jpg JPEG 408x287 408x287+0+0 8-bit sRGB 15.8KB 0.000u 0:00.000``\n\nLet's resize that to a max width of 200px:\n\n``convert max-width.jpg -resize 200\\> max-width-resized.jpg``\n\nOne special thing to note is the icky need for the ``\\`` in ``\\>``. This is necessary to escape to prevent your shell from interpreting that as an output redirection ``>``.\n\n### Replacing \"save-for-web\" and reducing file size with ``-strip``\n\nWhen resizing images (especially large images), you may notice that the file size of the images does not decrease as much as you might expect. This is typically due  the meta-data and other kruft that may come attached to your image file. Using the ``-strip`` flag on any IM operation will remove this data, which, in my experience, typically results in a 10-30% reduction in size.\n\nIn our ``trim`` folder:\n``convert -strip strip.jpg stripped.jpg``\n\nUse ``identify`` to compare the file sizes. Not a huge reduction (this image is pretty slim already), but imagine those percentage savings being applied to a larger image.\n\nObviously, Photoshop's \"Save for web\" combines resizing and optimizing functions, but you can too.\n\n\n```\nconvert sample.png -strip -resize 80% optimized.png\n```\n\n## Borders\nAdd a 5px black border to an image.\n\nIn our ``borders`` folder:\n\n``convert kitten.jpg -bordercolor '#000' -border 5 bordered.jpg``\n\n## Trim Whitespace\n\nMy jaw dropped when I first found out about this command (thanks to [this](http://hilbertastronaut.blogspot.com/2008/08/imagemagick-crops-your-white-space.html) brilliant gentleman)\n\nIn our ``trim-whitespace`` folder\n\n``convert trim.png -trim trimmed.png``\n\nUnfortunately, for images with gradients, or subtle transitions between subject/background, the results are not quite as spectacular:\n\n``convert not-quite-trim.jpg -trim not-quite-trimmed.jpg``\n\nWill output an image that still has a background bleed :(\n\n## Create Images from the command line\nImagemagick can also help you with bespoke iamges as well, if you need some filler content and can't use a service like placehold.it or (my favorite) placekitten.com.\n\nTo create a simple gray (usinga hex value), sized 100x100 you can use the convert command.\n\n- Solid Color:\n  ``convert -size 100x100 canvas:#a19c9e canvas.png``\n  (note, you may need to quote/escape hex colors, as your shell may try glob them)\n\n- Gradient:\n  ``convert -size 100x100 gradient:#a19c9e-#000000 canvas.png``\n\n- Pattern:\n  ``convert -size 100x100 pattern:HEXAGONS canvas.png``\n\nThere are a host of options [here](http://www.imagemagick.org/script/formats.php)\n\n## The start of a beautiful friendship\nHopefully these examples have whet your appetite for handling images on the command line. IM can do so so much more, and all those features are listed in\nIM's [extensive documentation](http://www.imagemagick.org/script/command-line-processing.php#sequence).\n\n## Notes\n\n### Os X Users: ``sips``\nIf you don't want to bother installing IM, or you are on a friend's Macbook and can't. Use the built-in utility ``sips`` to do some batch image processing. While not as robust as ImageMagick, it suffice in a pinch. More on that [here](https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/sips.1.html).\n\n### IM and Build Processes\nWhile IM is an excellent choice for performing large batch operations on images, it has been my experience that it is better suited for one off batch jobs than a constant build/deploy process. I'd suggest using tools like the [HTML5 BoilerPlate Build script](https://github.com/h5bp/ant-build-script) or [Grunt](http://gruntjs.com/) with the [grunt-contrib-imgmin](https://github.com/gruntjs/grunt-contrib-imagemin) plugin on projects that may need to consistently run and rerun optimization.\n\n### A note on Performance\nImageMagick has a more performant fork [GraphicsMagick](http://www.graphicsmagick.org/benchmarks.html) if you are concerned about keeping resource usage down or if you are [etsy](http://codeascraft.etsy.com/2010/07/09/batch-processing-millions-of-images/). Most of the commands are similar, but the differences between the command structure and GM's elusive api documentation make starting with imageMagick a better fit. You can always move on to GM when performance becomes a concern.\n\n## Corrections\nIf you are a command-line master, and i've missed something or missed a performant shortcut, don't hesitate to note it in the comments. Or open an [issue](https://bitbucket.org/nicktomlin/imagemagick-examples/issues?status=new&status=open)","src/content/posts/replacing-common-photoshop-workflows-with-imagemagick.md","4f8a3b8dabda31a3",{"html":540,"metadata":541},"\u003Cp>Photoshop is a wonderful tool, but it tends to require mousing (even with shortcuts), likes to eat up as much RAM as possible, and doesn’t play nice with bash scripts. Thats why I prefer \u003Ca href=\"http://www.imagemagick.org/script/index.php\">Image Magick\u003C/a>: a quirky, insanely full-featured CLI image manipulation library. I’ll run through some examples of using it do a few common tasks that I previously used photoshop for, such as:\u003C/p>\n\u003Cul>\n\u003Cli>Identify the size/type of image\u003C/li>\n\u003Cli>Convert image types\u003C/li>\n\u003Cli>Resize images to a maximum width/height\u003C/li>\n\u003Cli>Reduce image filesize\u003C/li>\n\u003Cli>Trim Whitespace\u003C/li>\n\u003Cli>Create new images from scratch\u003C/li>\n\u003Cli>Add borders\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Example Repository\u003C/strong>\u003C/p>\n\u003Cp>If you want to follow along, i’ve created an \u003Ca href=\"https://bitbucket.org/nicktomlin/imagemagick-examples/\">example repository\u003C/a> with some source files. I’ll be referencing them through the post.\u003C/p>\n\u003Ch2 id=\"installation\">Installation\u003C/h2>\n\u003Ch3 id=\"mac-os-x\">Mac Os X\u003C/h3>\n\u003Cp>Mac users can (and should) use \u003Ca href=\"http://mxcl.github.com/homebrew/\">brew\u003C/a> :\u003C/p>\n\u003Cp>\u003Ccode>brew install imagemagick\u003C/code>\u003C/p>\n\u003Ch3 id=\"linux\">Linux\u003C/h3>\n\u003Cp>Most linux distributions should have the \u003Ccode>imagemagick\u003C/code> package available by default.\u003C/p>\n\u003Cp>For Ubuntu:\u003C/p>\n\u003Cp>\u003Ccode>apt-get install imagemagick\u003C/code>\u003C/p>\n\u003Ch2 id=\"there-be-dragons-mogrify-vs-convert\">There be dragons: Mogrify Vs. Convert\u003C/h2>\n\u003Cp>One important thing to cover before we start slicing and dicing images is that IM has two  major methods for manipulating images: \u003Ccode>convert\u003C/code> and \u003Ccode>mogrify\u003C/code>. \u003Ccode>Convert\u003C/code> takes a source file, makes whatever changes you desire to it and ouptus them to a file you specify. \u003Ccode>Mogrify\u003C/code> only accepts one file, and makes all changes on that file (unless you specify a destination directory). \u003Ccode>mogrify\u003C/code> has a simpler syntax for performing batch operations on images, but that elegance comes with the potential of deleting precious content. There’s an example of how to handle batch operations using both commands in the “resize” section later on. For now, just be warned that \u003Ccode>mogrify\u003C/code> will write any changes you make to the \u003Cstrong>original\u003C/strong> files. Back up early; back up often.\u003C/p>\n\u003Ch2 id=\"identify-the-size-and-type-of-images\">\u003Ca href=\"http://www.imagemagick.org/script/command-line-options.php#identify\">Identify\u003C/a> the size and type of images\u003C/h2>\n\u003Cp>\u003Ccode>identify\u003C/code> is great for getting a quick overview of an image’s properties.\u003C/p>\n\u003Cp>Our example’s source file includes an image file named \u003Ccode>300\u003C/code>, which i’ve nabbed from \u003Ca href=\"http://placekitten.com/\">PlaceKitten\u003C/a>. Photoshop doesn’t know what to do with the image, because it is missing an extension, and while we could try and guess the extension by renaming the file to (gif|png|jpg) and seeing what happens, but it’s cooler (and faster) to use the \u003Ccode>identify\u003C/code> command to figure things out:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">identify\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 300\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">300\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> JPEG\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 200x200\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 200x200+0+0\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 8-bit\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> sRGB\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 8KB\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 0.000u\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 0:00.009\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Ah, a jpeg. I suspected it all along.\u003C/p>\n\u003Ch3 id=\"formatting-identifys-output\">Formatting identify’s output\u003C/h3>\n\u003Cp>The default output of the \u003Ccode>identify\u003C/code> command is a little verbose for my taste. We can trim it down by using IM built in \u003Ccode>-format\u003C/code> \u003Ca href=\"http://www.imagemagick.org/script/escape.php\">escapes\u003C/a>\u003C/p>\n\u003Cpre>\u003Ccode> # Print the name, and dimensions of the file named 300\n  identify -format \"Name: %f Dimensions: %P Type: %m\" 300 \u003C/code>\u003C/pre>\n\u003Cp>Batch identification is simple with your shell’s built in \u003Ca href=\"http://wiki.bash-hackers.org/syntax/expansion/globs\">globbing\u003C/a>:\u003C/p>\n\u003Cpre>\u003Ccode>\n  # '*' will get you more than you ask for, so it's best to narrow\n  # things down based on the file structure you are dealing with\n  identify *\u003C/code>\u003C/pre>\n\u003Ch2 id=\"convert-image-formats\">Convert image formats\u003C/h2>\n\u003Cp>Imagemagick’s powerhouse is the \u003Ca href=\"http://www.imagemagick.org/script/convert.php\">\u003Ccode>convert\u003C/code>\u003C/a> command. You can use it to do almost anything you can imagine through some terrifyingly complex flags. We’ll try to keep things simple : )\u003C/p>\n\u003Ch3 id=\"convert-from-tiff-to-jpg\">Convert from \u003Ccode>tiff\u003C/code> to \u003Ccode>jpg\u003C/code>\u003C/h3>\n\u003Cp>Image magick can effortlessly convert images between various formats. A problem one of my coworkers ran into recently involved clients needing images in the \u003Ccode>tiff\u003C/code> format. Photoshop can do batch operations, but the process is clunky, and — in my experience— unreliable.\u003C/p>\n\u003Ch4 id=\"single-images\">Single Images:\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ccode>convert convert.tiff kitten.jpg\u003C/code> Simple, no?\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"multiple-images\">Multiple Images:\u003C/h4>\n\u003Cul>\n\u003Cli>destroying the original image:\n\u003Cul>\n\u003Cli>\u003Ccode>mogrify\u003C/code> \u003Ccode>mogrify --format tiff *.jpg\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>retaining the original image, the \u003Ccode>mogrify\u003C/code> command can be used with the \u003Ccode>-path\u003C/code> flag\n\u003Cul>\n\u003Cli>\u003Ccode>mogrify --format tiff -path converted *.jpg\u003C/code>\u003C/li>\n\u003Cli>The path (in this case the ‘converted’ directory) must exist, or IM will complain\u003C/li>\n\u003Cli>Make sure that this path is different than the files you are using \u003Ccode>mogrify\u003C/code> on, or they will be overwritten.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>retaining the original image, you can use  a long\u003Ccode>convert\u003C/code> statement (see batch resizing below).\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"resize-images\">Resize images\u003C/h2>\n\u003Ch3 id=\"simple-resize\">Simple Resize\u003C/h3>\n\u003Cp>\u003Ccode>convert kitten.jpg -resize 80% resized-kitten.jpg\u003C/code>\u003C/p>\n\u003Ch3 id=\"batch-resizing\">Batch Resizing\u003C/h3>\n\u003Cp>Clients rarely have a images in a uniform, web-optimized format, and even if they do I usually need need two copies: retina-ready images, and images for us normal folks. ImageMagick makes generating those a snap.\u003C/p>\n\u003Cp>In our \u003Ccode>resize/batch\u003C/code> folder:\u003C/p>\n\u003Cp>\u003Ccode>convert *.jpg -resize 80% -set filename:f '%t@2x' '%[filename:f].jpg'\u003C/code>\u003C/p>\n\u003Cp>Here we are resizing all jpg images by 80%, setting the filename the filename \u003Ccode>%t\u003C/code> plus the string \u003Ccode>@2x\u003C/code> to follow apple’s convention for retina images, and then outputting the file. The syntax is a little esoteric (more details on that \u003Ca href=\"http://www.imagemagick.org/Usage/files/#save_escapes\">here\u003C/a>), but once you get the hang of it it can be quite useful.\u003C/p>\n\u003Cp>We can now run \u003Ccode>mogrify !(*@2x).jpg -resize 40%\u003C/code> to cut the non retina images down to size (note, this will “destroy” the original images — I have a backup handy).\u003C/p>\n\u003Ch3 id=\"resizing-to-a-maximum-pixel-width\">Resizing to a maximum pixel width\u003C/h3>\n\u003Cp>If you have do not have a specific size for your images, but want to keep things small, you can use the following syntax:\u003C/p>\n\u003Cp>In our \u003Ccode>resize\u003C/code> folder, there is a max width image. Running identify gives us the following:\u003C/p>\n\u003Cp>\u003Ccode>max-width.jpg JPEG 408x287 408x287+0+0 8-bit sRGB 15.8KB 0.000u 0:00.000\u003C/code>\u003C/p>\n\u003Cp>Let’s resize that to a max width of 200px:\u003C/p>\n\u003Cp>\u003Ccode>convert max-width.jpg -resize 200\\> max-width-resized.jpg\u003C/code>\u003C/p>\n\u003Cp>One special thing to note is the icky need for the \u003Ccode>\\\u003C/code> in \u003Ccode>\\>\u003C/code>. This is necessary to escape to prevent your shell from interpreting that as an output redirection \u003Ccode>>\u003C/code>.\u003C/p>\n\u003Ch3 id=\"replacing-save-for-web-and-reducing-file-size-with--strip\">Replacing “save-for-web” and reducing file size with \u003Ccode>-strip\u003C/code>\u003C/h3>\n\u003Cp>When resizing images (especially large images), you may notice that the file size of the images does not decrease as much as you might expect. This is typically due  the meta-data and other kruft that may come attached to your image file. Using the \u003Ccode>-strip\u003C/code> flag on any IM operation will remove this data, which, in my experience, typically results in a 10-30% reduction in size.\u003C/p>\n\u003Cp>In our \u003Ccode>trim\u003C/code> folder:\n\u003Ccode>convert -strip strip.jpg stripped.jpg\u003C/code>\u003C/p>\n\u003Cp>Use \u003Ccode>identify\u003C/code> to compare the file sizes. Not a huge reduction (this image is pretty slim already), but imagine those percentage savings being applied to a larger image.\u003C/p>\n\u003Cp>Obviously, Photoshop’s “Save for web” combines resizing and optimizing functions, but you can too.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>convert sample.png -strip -resize 80% optimized.png\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"borders\">Borders\u003C/h2>\n\u003Cp>Add a 5px black border to an image.\u003C/p>\n\u003Cp>In our \u003Ccode>borders\u003C/code> folder:\u003C/p>\n\u003Cp>\u003Ccode>convert kitten.jpg -bordercolor '#000' -border 5 bordered.jpg\u003C/code>\u003C/p>\n\u003Ch2 id=\"trim-whitespace\">Trim Whitespace\u003C/h2>\n\u003Cp>My jaw dropped when I first found out about this command (thanks to \u003Ca href=\"http://hilbertastronaut.blogspot.com/2008/08/imagemagick-crops-your-white-space.html\">this\u003C/a> brilliant gentleman)\u003C/p>\n\u003Cp>In our \u003Ccode>trim-whitespace\u003C/code> folder\u003C/p>\n\u003Cp>\u003Ccode>convert trim.png -trim trimmed.png\u003C/code>\u003C/p>\n\u003Cp>Unfortunately, for images with gradients, or subtle transitions between subject/background, the results are not quite as spectacular:\u003C/p>\n\u003Cp>\u003Ccode>convert not-quite-trim.jpg -trim not-quite-trimmed.jpg\u003C/code>\u003C/p>\n\u003Cp>Will output an image that still has a background bleed :(\u003C/p>\n\u003Ch2 id=\"create-images-from-the-command-line\">Create Images from the command line\u003C/h2>\n\u003Cp>Imagemagick can also help you with bespoke iamges as well, if you need some filler content and can’t use a service like placehold.it or (my favorite) placekitten.com.\u003C/p>\n\u003Cp>To create a simple gray (usinga hex value), sized 100x100 you can use the convert command.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Solid Color:\n\u003Ccode>convert -size 100x100 canvas:#a19c9e canvas.png\u003C/code>\n(note, you may need to quote/escape hex colors, as your shell may try glob them)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Gradient:\n\u003Ccode>convert -size 100x100 gradient:#a19c9e-#000000 canvas.png\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Pattern:\n\u003Ccode>convert -size 100x100 pattern:HEXAGONS canvas.png\u003C/code>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>There are a host of options \u003Ca href=\"http://www.imagemagick.org/script/formats.php\">here\u003C/a>\u003C/p>\n\u003Ch2 id=\"the-start-of-a-beautiful-friendship\">The start of a beautiful friendship\u003C/h2>\n\u003Cp>Hopefully these examples have whet your appetite for handling images on the command line. IM can do so so much more, and all those features are listed in\nIM’s \u003Ca href=\"http://www.imagemagick.org/script/command-line-processing.php#sequence\">extensive documentation\u003C/a>.\u003C/p>\n\u003Ch2 id=\"notes\">Notes\u003C/h2>\n\u003Ch3 id=\"os-x-users-sips\">Os X Users: \u003Ccode>sips\u003C/code>\u003C/h3>\n\u003Cp>If you don’t want to bother installing IM, or you are on a friend’s Macbook and can’t. Use the built-in utility \u003Ccode>sips\u003C/code> to do some batch image processing. While not as robust as ImageMagick, it suffice in a pinch. More on that \u003Ca href=\"https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/sips.1.html\">here\u003C/a>.\u003C/p>\n\u003Ch3 id=\"im-and-build-processes\">IM and Build Processes\u003C/h3>\n\u003Cp>While IM is an excellent choice for performing large batch operations on images, it has been my experience that it is better suited for one off batch jobs than a constant build/deploy process. I’d suggest using tools like the \u003Ca href=\"https://github.com/h5bp/ant-build-script\">HTML5 BoilerPlate Build script\u003C/a> or \u003Ca href=\"http://gruntjs.com/\">Grunt\u003C/a> with the \u003Ca href=\"https://github.com/gruntjs/grunt-contrib-imagemin\">grunt-contrib-imgmin\u003C/a> plugin on projects that may need to consistently run and rerun optimization.\u003C/p>\n\u003Ch3 id=\"a-note-on-performance\">A note on Performance\u003C/h3>\n\u003Cp>ImageMagick has a more performant fork \u003Ca href=\"http://www.graphicsmagick.org/benchmarks.html\">GraphicsMagick\u003C/a> if you are concerned about keeping resource usage down or if you are \u003Ca href=\"http://codeascraft.etsy.com/2010/07/09/batch-processing-millions-of-images/\">etsy\u003C/a>. Most of the commands are similar, but the differences between the command structure and GM’s elusive api documentation make starting with imageMagick a better fit. You can always move on to GM when performance becomes a concern.\u003C/p>\n\u003Ch2 id=\"corrections\">Corrections\u003C/h2>\n\u003Cp>If you are a command-line master, and i’ve missed something or missed a performant shortcut, don’t hesitate to note it in the comments. Or open an \u003Ca href=\"https://bitbucket.org/nicktomlin/imagemagick-examples/issues?status=new&#x26;status=open\">issue\u003C/a>\u003C/p>",{"headings":542,"localImagePaths":615,"remoteImagePaths":616,"frontmatter":617,"imagePaths":619},[543,546,549,552,555,558,561,564,567,570,573,576,579,582,585,588,591,594,597,600,603,606,609,612],{"depth":34,"slug":544,"text":545},"installation","Installation",{"depth":92,"slug":547,"text":548},"mac-os-x","Mac Os X",{"depth":92,"slug":550,"text":551},"linux","Linux",{"depth":34,"slug":553,"text":554},"there-be-dragons-mogrify-vs-convert","There be dragons: Mogrify Vs. Convert",{"depth":34,"slug":556,"text":557},"identify-the-size-and-type-of-images","Identify the size and type of images",{"depth":92,"slug":559,"text":560},"formatting-identifys-output","Formatting identify’s output",{"depth":34,"slug":562,"text":563},"convert-image-formats","Convert image formats",{"depth":92,"slug":565,"text":566},"convert-from-tiff-to-jpg","Convert from tiff to jpg",{"depth":256,"slug":568,"text":569},"single-images","Single Images:",{"depth":256,"slug":571,"text":572},"multiple-images","Multiple Images:",{"depth":34,"slug":574,"text":575},"resize-images","Resize images",{"depth":92,"slug":577,"text":578},"simple-resize","Simple Resize",{"depth":92,"slug":580,"text":581},"batch-resizing","Batch Resizing",{"depth":92,"slug":583,"text":584},"resizing-to-a-maximum-pixel-width","Resizing to a maximum pixel width",{"depth":92,"slug":586,"text":587},"replacing-save-for-web-and-reducing-file-size-with--strip","Replacing “save-for-web” and reducing file size with -strip",{"depth":34,"slug":589,"text":590},"borders","Borders",{"depth":34,"slug":592,"text":593},"trim-whitespace","Trim Whitespace",{"depth":34,"slug":595,"text":596},"create-images-from-the-command-line","Create Images from the command line",{"depth":34,"slug":598,"text":599},"the-start-of-a-beautiful-friendship","The start of a beautiful friendship",{"depth":34,"slug":601,"text":602},"notes","Notes",{"depth":92,"slug":604,"text":605},"os-x-users-sips","Os X Users: sips",{"depth":92,"slug":607,"text":608},"im-and-build-processes","IM and Build Processes",{"depth":92,"slug":610,"text":611},"a-note-on-performance","A note on Performance",{"depth":34,"slug":613,"text":614},"corrections","Corrections",[],[],{"layout":16,"title":533,"date":618,"comments":18,"published":18,"external-url":42,"categories":42,"disqusId":535},"2013-03-16",[],"replacing-common-photoshop-workflows-with-imagemagick.md","stackoverflow-as-a-learning-tool",{"id":621,"data":623,"body":627,"filePath":628,"digest":629,"rendered":630,"legacyId":651},{"title":624,"date":625,"layout":16,"disqusId":626,"comments":18},"Using stackoverflow as a learning tool",["Date","2013-04-06T00:00:00.000Z"],"/2013/04/06/stackoverflow-as-a-learning-tool","I first experienced the magic of Google when I was trapped on the 2nd puzzle in [Myst](http://en.wikipedia.org/wiki/Myst): a few quick keyboard strokes and I had the solution to that damnable clock puzzle that thwarted me for hours. My nine year old self was astounded that someone out there had an answer to the exact question I typed in. The only thing that recaptures the magic for me is [StackOverflow](http://stackoverflow.com/).\n\nWhile it primarily serves as a knowledge base — one of the best if not *the* best — StackOverflow can also be used as a powerful tool in the apprentice developer's kit. Taking a cue from the invaluable [Apprenticeship Patterns](http://apprenticeship-patterns.labs.oreilly.com/), i've developed a few patterns of my own that I use to get the most out of Stack Overflow:\n\n## 1. Flashcards\n\n  I've always found flashcards and quizzes to be the most helfpul ways to retain things. When I was studying language in Primary school, I always made it a point to have a friend (or my mom, thanks mom!) quiz me on a list of topics or vocabulary words. This practice of quizzing allowed me to rediscover words/topics that had fallen out of my memory, and get a better understanding on ones I already knew. I use SO in a simlar way.\n\n  1. Look for low to no answer questions in the discipline you are interested (``node.js`` for example).\n  2. give the question a quick scan, to see if you know the answer\n  3. if so, give a clear and concise answer. Otherwise, make a note of the question for later, and then go back to step 1.\n\n  The key here is to not get bogged down researching the answer to a question that is beyond your quick-acccess memory (thats for the next pattern). I find this much more stimulating than making my own flashcards, and the variety of questions help me look at what I know from a different perspective, or reveal holes in my own knowledge. Keeping a log of questions that I do not know gives me research projects for later.\n\n## 2. Deep Dive\n\n  There are a lot of questions on SO (usually by inexperienced users) that can be solved with a simple google search, or a cursory examination of documentation. It's easy to pick up some quick reputation points by answering these — i've definetely done so — but it's easy to fall prey to using surface level knowledge instead of deepening your understanding of a topic.\n\n  To get around this, I will set aside certain times where I only answer questions by referring to the source code of the technology in question. This forces me to really understand the fundamentals at play in solving the question. Often, I won't be able to figure out what is going on in time to get the right answer (or maybe at all), but the end result is that I gain a much much better understanding of how the technology functions, and a better grasp of how to read code. If I do happen to get the right answer, it's all the more rewarding.\n\n## 3. Reduce, Reuse, Recycle\n\n  SO has a wealth of \"canonized\" questions and answers, and i've found it helpful to keep a list of the ones that I find the most helpful. Combining and reviewing these has allowed me to get a much better handle on complex concepts like OO, Prototypical Inheritance in JS, and what the hell MVC is.\n\n  I've found it helpful to collect several similar answers in a blog post or entry in my private wiki. This creates a rich \"super answer\", and the act of synthesizing helps me better understand the topic.\n\n  A second benefit of these \"canonized\" answers is battle bewtween various schools of thought on what the best way to solve a problem really is. Being able to see one of the creators of Python argue with another advanced user over the performance of Arrays is a wonderful gift to an apprentice programmer. I've found it useful to mark these answers, and then explore the reasoning behind each one.\n\n## Onward and Upward\nStackOverflow has aided me incredibly, and I hope some of these patterns can help you as well. If you have any thoughts, [@mention me](twitter.com/itsnicktomlin) or leave a comment.","src/content/posts/stackoverflow-as-a-learning-tool.md","270dec45c7458b3d",{"html":631,"metadata":632},"\u003Cp>I first experienced the magic of Google when I was trapped on the 2nd puzzle in \u003Ca href=\"http://en.wikipedia.org/wiki/Myst\">Myst\u003C/a>: a few quick keyboard strokes and I had the solution to that damnable clock puzzle that thwarted me for hours. My nine year old self was astounded that someone out there had an answer to the exact question I typed in. The only thing that recaptures the magic for me is \u003Ca href=\"http://stackoverflow.com/\">StackOverflow\u003C/a>.\u003C/p>\n\u003Cp>While it primarily serves as a knowledge base — one of the best if not \u003Cem>the\u003C/em> best — StackOverflow can also be used as a powerful tool in the apprentice developer’s kit. Taking a cue from the invaluable \u003Ca href=\"http://apprenticeship-patterns.labs.oreilly.com/\">Apprenticeship Patterns\u003C/a>, i’ve developed a few patterns of my own that I use to get the most out of Stack Overflow:\u003C/p>\n\u003Ch2 id=\"1-flashcards\">1. Flashcards\u003C/h2>\n\u003Cp>I’ve always found flashcards and quizzes to be the most helfpul ways to retain things. When I was studying language in Primary school, I always made it a point to have a friend (or my mom, thanks mom!) quiz me on a list of topics or vocabulary words. This practice of quizzing allowed me to rediscover words/topics that had fallen out of my memory, and get a better understanding on ones I already knew. I use SO in a simlar way.\u003C/p>\n\u003Col>\n\u003Cli>Look for low to no answer questions in the discipline you are interested (\u003Ccode>node.js\u003C/code> for example).\u003C/li>\n\u003Cli>give the question a quick scan, to see if you know the answer\u003C/li>\n\u003Cli>if so, give a clear and concise answer. Otherwise, make a note of the question for later, and then go back to step 1.\u003C/li>\n\u003C/ol>\n\u003Cp>The key here is to not get bogged down researching the answer to a question that is beyond your quick-acccess memory (thats for the next pattern). I find this much more stimulating than making my own flashcards, and the variety of questions help me look at what I know from a different perspective, or reveal holes in my own knowledge. Keeping a log of questions that I do not know gives me research projects for later.\u003C/p>\n\u003Ch2 id=\"2-deep-dive\">2. Deep Dive\u003C/h2>\n\u003Cp>There are a lot of questions on SO (usually by inexperienced users) that can be solved with a simple google search, or a cursory examination of documentation. It’s easy to pick up some quick reputation points by answering these — i’ve definetely done so — but it’s easy to fall prey to using surface level knowledge instead of deepening your understanding of a topic.\u003C/p>\n\u003Cp>To get around this, I will set aside certain times where I only answer questions by referring to the source code of the technology in question. This forces me to really understand the fundamentals at play in solving the question. Often, I won’t be able to figure out what is going on in time to get the right answer (or maybe at all), but the end result is that I gain a much much better understanding of how the technology functions, and a better grasp of how to read code. If I do happen to get the right answer, it’s all the more rewarding.\u003C/p>\n\u003Ch2 id=\"3-reduce-reuse-recycle\">3. Reduce, Reuse, Recycle\u003C/h2>\n\u003Cp>SO has a wealth of “canonized” questions and answers, and i’ve found it helpful to keep a list of the ones that I find the most helpful. Combining and reviewing these has allowed me to get a much better handle on complex concepts like OO, Prototypical Inheritance in JS, and what the hell MVC is.\u003C/p>\n\u003Cp>I’ve found it helpful to collect several similar answers in a blog post or entry in my private wiki. This creates a rich “super answer”, and the act of synthesizing helps me better understand the topic.\u003C/p>\n\u003Cp>A second benefit of these “canonized” answers is battle bewtween various schools of thought on what the best way to solve a problem really is. Being able to see one of the creators of Python argue with another advanced user over the performance of Arrays is a wonderful gift to an apprentice programmer. I’ve found it useful to mark these answers, and then explore the reasoning behind each one.\u003C/p>\n\u003Ch2 id=\"onward-and-upward\">Onward and Upward\u003C/h2>\n\u003Cp>StackOverflow has aided me incredibly, and I hope some of these patterns can help you as well. If you have any thoughts, \u003Ca href=\"twitter.com/itsnicktomlin\">@mention me\u003C/a> or leave a comment.\u003C/p>",{"headings":633,"localImagePaths":646,"remoteImagePaths":647,"frontmatter":648,"imagePaths":650},[634,637,640,643],{"depth":34,"slug":635,"text":636},"1-flashcards","1. Flashcards",{"depth":34,"slug":638,"text":639},"2-deep-dive","2. Deep Dive",{"depth":34,"slug":641,"text":642},"3-reduce-reuse-recycle","3. Reduce, Reuse, Recycle",{"depth":34,"slug":644,"text":645},"onward-and-upward","Onward and Upward",[],[],{"layout":16,"title":624,"date":649,"comments":18,"published":18,"external-url":42,"categories":42,"disqusId":626},"2013-04-06",[],"stackoverflow-as-a-learning-tool.md","speeding-up-zsh-loading-times-by-lazily-loading-nvm",{"id":652,"data":654,"body":658,"filePath":659,"digest":660,"rendered":661,"legacyId":670},{"title":655,"date":656,"layout":16,"disqusId":657,"comments":18},"Speeding up zsh loading times by lazily loading nvm",["Date","2018-03-10T00:00:00.000Z"],"/2018/03/10/speeding-up-zsh-loading-times-by-lazily-loading-nvm","A [friend of mine](https://twitter.com/lejeunerenard?lang=en) was doing some spring cleaning on his shell and it prompted me to go on my own journey.\n\nAfter running `/usr/bin/time zsh -i -c exit` I found out that my load time for zsh was _over 4 seconds_ 🙀. This was apparently something that I had just gotten used to but seeing the numbers in the cold light of my terminal made me realize that something had to change.\n\nAfter some frantic Googling, I found Benny C. Wong's excellent post on [speeding up oh my zsh](https://bennycwong.github.io/post/speeding-up-oh-my-zsh/) which pointed at NVM and RVM as likely culprits. I quickly removed NVM from my `.zshrc` and saw startup times go to 0.14 seconds!\n\nThe only wrinkle was that I now needed to manually load `nvm` whenever I needed to use it, which was less than ideal for my JavaScript heavy workflow. That same friend had the idea of loading nvm when cd-ing into a directory and I took that idea and modified some existing `chpwd` [zsh hooks](http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions) to lazily load `nvm` and `nvm use` if I cd'ed into a directory with an `.nvmrc`:\n\n```shell\n# ~/.zshrc\nfunction load-nvm () {\n  if [[ $OSTYPE == \"darwin\"* ]]; then\n    export NVM_DIR=~/.nvm\n    [[ -s $(brew --prefix nvm)/nvm.sh ]] && source $(brew --prefix nvm)/nvm.sh\n  else\n    [[ -s \"$HOME/.nvm/nvm.sh\" ]] && source \"$HOME/.nvm/nvm.sh\"\n  fi\n}\n\nload-nvmrc() {\n  if [[ -f .nvmrc && -r .nvmrc ]]; then\n    if ! type nvm >/dev/null; then\n      load-nvm\n    fi\n    nvm use\n  fi\n}\nadd-zsh-hook chpwd load-nvmrc\n```\n\nEdit: I originally used `command -v` which doesn't seem to recognize `nvm` properly, hit tip to Sean for switching to `type`\n\nI now have a _much_ snappier shell that loads `nvm` when I cd into a node project. 🎉","src/content/posts/speeding-up-zsh-loading-times-by-lazily-loading-nvm.md","e5af8f8cea7aa405",{"html":662,"metadata":663},"\u003Cp>A \u003Ca href=\"https://twitter.com/lejeunerenard?lang=en\">friend of mine\u003C/a> was doing some spring cleaning on his shell and it prompted me to go on my own journey.\u003C/p>\n\u003Cp>After running \u003Ccode>/usr/bin/time zsh -i -c exit\u003C/code> I found out that my load time for zsh was \u003Cem>over 4 seconds\u003C/em> 🙀. This was apparently something that I had just gotten used to but seeing the numbers in the cold light of my terminal made me realize that something had to change.\u003C/p>\n\u003Cp>After some frantic Googling, I found Benny C. Wong’s excellent post on \u003Ca href=\"https://bennycwong.github.io/post/speeding-up-oh-my-zsh/\">speeding up oh my zsh\u003C/a> which pointed at NVM and RVM as likely culprits. I quickly removed NVM from my \u003Ccode>.zshrc\u003C/code> and saw startup times go to 0.14 seconds!\u003C/p>\n\u003Cp>The only wrinkle was that I now needed to manually load \u003Ccode>nvm\u003C/code> whenever I needed to use it, which was less than ideal for my JavaScript heavy workflow. That same friend had the idea of loading nvm when cd-ing into a directory and I took that idea and modified some existing \u003Ccode>chpwd\u003C/code> \u003Ca href=\"http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions\">zsh hooks\u003C/a> to lazily load \u003Ccode>nvm\u003C/code> and \u003Ccode>nvm use\u003C/code> if I cd’ed into a directory with an \u003Ccode>.nvmrc\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># ~/.zshrc\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> load-nvm\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[ $OSTYPE \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"darwin\"\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ]]; \u003C/span>\u003Cspan style=\"color:#F97583\">then\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    export\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> NVM_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">=~\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/.nvm\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [[ \u003C/span>\u003Cspan style=\"color:#F97583\">-s\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $(\u003C/span>\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --prefix\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> nvm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)/nvm.sh ]] &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#79B8FF\">source\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $(\u003C/span>\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --prefix\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> nvm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/nvm.sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [[ \u003C/span>\u003Cspan style=\"color:#F97583\">-s\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$HOME\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/.nvm/nvm.sh\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ]] &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#79B8FF\">source\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$HOME\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/.nvm/nvm.sh\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  fi\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">load-nvmrc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[ \u003C/span>\u003Cspan style=\"color:#F97583\">-f\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> .nvmrc \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> -r\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> .nvmrc ]]; \u003C/span>\u003Cspan style=\"color:#F97583\">then\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> nvm\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/dev/null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">then\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      load-nvm\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fi\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    nvm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> use\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  fi\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">add-zsh-hook\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> chpwd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> load-nvmrc\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Edit: I originally used \u003Ccode>command -v\u003C/code> which doesn’t seem to recognize \u003Ccode>nvm\u003C/code> properly, hit tip to Sean for switching to \u003Ccode>type\u003C/code>\u003C/p>\n\u003Cp>I now have a \u003Cem>much\u003C/em> snappier shell that loads \u003Ccode>nvm\u003C/code> when I cd into a node project. 🎉\u003C/p>",{"headings":664,"localImagePaths":665,"remoteImagePaths":666,"frontmatter":667,"imagePaths":669},[],[],[],{"layout":16,"title":655,"date":668,"disqusId":657},"2018-03-10",[],"speeding-up-zsh-loading-times-by-lazily-loading-nvm.md","jsx-with-emmet-vim",{"id":671,"data":673,"body":677,"filePath":678,"digest":679,"rendered":680,"legacyId":689},{"title":674,"date":675,"layout":16,"disqusId":676,"comments":18},"JSX with Emmet Vim",["Date","2017-06-10T00:00:00.000Z"],"/2017/06/10/jsx-with-emmet-vim","> Apparently I'm very bad about writing blog posts; I'm going to try and do more bite sized \"tactical\" updates like this and see how it goes\n\nI've used the excellent [emmet.vim](https://github.com/mattn/emmet-vim) for quite some time but had never gotten around to fixing some pesky annoyances when dealing with JSX: the default `class` won't work with JSX and that double quoted attributes are pure evil. After perusing [this emmet vim issue](https://github.com/mattn/emmet-vim/issues/255) (from 2015! I'm way behind the times!) and trying one of the many solutions thrown out in the thread, I found the following configuration for Emmet Vim suited my needs:\n\n```vim\n\" .vimrc\nlet g:user_emmet_settings = {\n\\  'javascript.jsx' : {\n\\      'extends': 'jsx',\n\\      'quote_char': \"'\",\n\\  },\n\\}\n```\n\nI am now happily Vimming away:\n\n\u003Cscript type=\"text/javascript\" src=\"https://asciinema.org/a/124232.js\" id=\"asciicast-124232\" async>\u003C/script>\n\nPlease share any tricks/tips for productive emmeting in the comments. Cheers!","src/content/posts/jsx-with-emmet-vim.md","b2e527f072970071",{"html":681,"metadata":682},"\u003Cblockquote>\n\u003Cp>Apparently I’m very bad about writing blog posts; I’m going to try and do more bite sized “tactical” updates like this and see how it goes\u003C/p>\n\u003C/blockquote>\n\u003Cp>I’ve used the excellent \u003Ca href=\"https://github.com/mattn/emmet-vim\">emmet.vim\u003C/a> for quite some time but had never gotten around to fixing some pesky annoyances when dealing with JSX: the default \u003Ccode>class\u003C/code> won’t work with JSX and that double quoted attributes are pure evil. After perusing \u003Ca href=\"https://github.com/mattn/emmet-vim/issues/255\">this emmet vim issue\u003C/a> (from 2015! I’m way behind the times!) and trying one of the many solutions thrown out in the thread, I found the following configuration for Emmet Vim suited my needs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" .vimrc\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> g:user_emmet_settings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  'javascript.jsx'\u003C/span>\u003Cspan style=\"color:#F97583\"> : \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">      'extends'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'jsx'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">      'quote_char'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"'\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\\\u003C/span>\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\\\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I am now happily Vimming away:\u003C/p>\n\u003Cscript type=\"text/javascript\" src=\"https://asciinema.org/a/124232.js\" id=\"asciicast-124232\" async>\u003C/script>\n\u003Cp>Please share any tricks/tips for productive emmeting in the comments. Cheers!\u003C/p>",{"headings":683,"localImagePaths":684,"remoteImagePaths":685,"frontmatter":686,"imagePaths":688},[],[],[],{"layout":16,"title":674,"date":687,"disqusId":676},"2017-06-10",[],"jsx-with-emmet-vim.md","viml-functions",{"id":690,"data":692,"body":696,"filePath":697,"digest":698,"rendered":699,"legacyId":720},{"title":693,"date":694,"layout":16,"disqusId":695,"comments":18},"VimL Functions",["Date","2017-07-12T00:00:00.000Z"],"/2017/07/12/viml-functions","I've started a slow descent into the madness that is VimL. One of the things that I've found to be initially confusing is how Vim deals with functions. This may be very obvious to some but It caused me enough head scratching to warrant recording some thoughts here.\n\n\u003Cdetails markdown=\"1\">\n  \u003Csummary>Cheatsheet\u003C/summary>\n\n```vim\n\" All VimL functions must be called\n\" Operations like assignment\n\" or passing to another function or built in\n\" implicitly call a function\nlet var = MyFunc()\necho MyFunc()\n\n\" Otherwise, you _must_ :call a function\ncall MyFunc()\n\n\" You can also store a reference to your function\nlet FuncRef = function('MyFunc')\n\n\" and :call it with arguments or pass it to another function\ncall(FuncRef, 1, 2, 3)\n\n\" Or, stringify and execute it\nexecute 'echo ' . string(FuncRef)\n\n\" Bonus: Lambdas (vim8+ and neovim) are pretty swank\nlet MyLambda = { str -> str . '!' }\necho MyLambda('yay')\n\" yay!\n\necho map([1, 2, 3], { _, val -> val * 2 })\n\" [2, 4, 6]\n```\n\u003C/details>\n\n# Getting func-y\n\nHaving one way to call a function is boring: most languages have a few different ways to invoke a function you or someone you love has defined. Not to be outdone, VimL has some twists of its own related to functions.\n\nLet's create a very simple function:\n\n```vim\n\" All Viml functions must begin with a capitol letter\nfunction! Hello(name)\n  \" :wave: Just in case you were wondering\n  \" all named arguments are only available on the magical\n  \" arguments dictionary (a) within the function\n  return \"Hi \" . a:name . \"!\"\nendfunction\n```\n\nThe easiest way to call this function in a script, we could simply assign it to a variable, or pass the result of invoking it to a built in like `echo`:\n\n```vim\nlet greeting = Hello('bob')\necho greeting\n\"Hi Bob!\"\necho Hello('bob')\n\"Hi Bob!\"\n```\n\nThis makes a _lot_ of sense! We've always been told that VimL doesn't make much sense; it feels good to prove people wrong doesn't it?\n\nBut, let's say we just want the side effects of a function and do not want to deal with whatever it returns. It'd make sense to do the same thing but just not assign it right?\n\n```vim\nMySideEffectFunc('some side effecty argument')\nE492: Not an editor command: MySideEffectFunc()\n```\n\nNot so fast! VimL has other ideas; while certain built in commands (like `echo`) can be invoked, functions cannot simply be called without passing or assigning their value. This is because things like `echo Foo()` and `let x = Foo()` implicitly evaluate or call any expression they are handed (in this case, the expression being invoking the function `Foo`). Since `Foo()` isn't good enough, we need a way to tell VimL to actually call the function.\n\nThis is where [`:call`](http://vimdoc.sourceforge.net/htmldoc/eval.html#:call) steps in. `:call` calls a function, with up to 20 arguments (because 19 just wasn't enough), and discards its return value.\n\n```vim\n:call MySideEffectFunc('this wooooorks')\n```\n\nCall is the _the_ way of calling functions within your plugins, or invoking other functions from ex mode.\n\n# Show me your references\n\nLet's explore another way we can use our functions: references. Let's take a common example, using [`map`](http://vimdoc.sourceforge.net/htmldoc/eval.html#map()) with a function we've previously defined. We can use Vim's `function` keyword to create a funcref (that is a reference to function *wink* *wink*) which allows us to pass it to `map`, `filter`, or another function.\n\n```vim\nfunction Exclaim(idx, name)\n  return a:name . \"!\"\nendfunction\n\nlet greetings = ['Hey', 'Howdy', 'Hi']\nlet exclaimed = map(greetings, function('Exclaim'))\necho exclaimed\n\" ['Hey!', 'Howdy!', 'Hi!']\n```\n\nIf we wanted to take a more generic function that did not need to be aware of `idx`, we could use `string`ify our funcref and use `map`'s second argument (a string to be `eval`d) to invoke our function with the value of each pair we are iterating through:\n\n```vim\nfunction Exclaim(name)\n  return a:name . \"!\"\nendfunction\n\nlet greetings = ['Hey', 'Howdy', 'Hi']\nlet exclaimed = map(greetings, string(function('Exclaim')) . ('v:val'))\necho exclaimed\n\" ['Hey!', 'Howdy!', 'Hi!']\n```\n\nThat works, but it's not very readable. Luckily, more modern versions of Vim have an answer.\n\n# Lambdas to the rescue\n\nIf we, or our intended users, are using vim8+ or neovim, we can use the new lambda syntax to simplify things:\n\n```vim\nfunction Exclaim(name)\n  return a:name . \"!\"\nendfunction\n\nlet greetings = ['Hey', 'Howdy', 'Hi']\nlet exclaimed = map(greetings, {key, val -> Exclaim(val)})\necho exclaimed\n\" ['Hey!', 'Howdy!', 'Hi!']\n```\n\nWe can even remove our simple function entirely and perform our string modifications within the Lambda if we want:\n\n```vim\nlet greetings = ['Hey', 'Howdy', 'Hi']\nlet exclaimed = map(greetings, {key, val -> val . '!'})\necho exclaimed\n\" ['Hey!', 'Howdy!', 'Hi!']\n```\n\n# That's it!\n\nThere's so much under the hood with VimL but effectively using functions is a great way to get started writing a simple script or plugin to help make your life better. I hope this helps remove some of the confusion that I initially had.","src/content/posts/viml-functions.md","be1ca64ed3707d84",{"html":700,"metadata":701},"\u003Cp>I’ve started a slow descent into the madness that is VimL. One of the things that I’ve found to be initially confusing is how Vim deals with functions. This may be very obvious to some but It caused me enough head scratching to warrant recording some thoughts here.\u003C/p>\n\u003Cdetails markdown=\"1\">\n  \u003Csummary>Cheatsheet\u003C/summary>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" All VimL functions must be called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" Operations like assignment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" or passing to another function or built in\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" implicitly call a function\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> var \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" Otherwise, you _must_ :call a function\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">call\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" You can also store a reference to your function\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> FuncRef \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'MyFunc'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" and :call it with arguments or pass it to another function\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">call\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(FuncRef, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" Or, stringify and execute it\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">execute\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'echo '\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">FuncRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" Bonus: Lambdas (vim8+ and neovim) are pretty swank\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MyLambda \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { str -> str\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyLambda\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'yay'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" yay!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], { _, val -> val * \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" [2, 4, 6]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/details>\n\u003Ch1 id=\"getting-func-y\">Getting func-y\u003C/h1>\n\u003Cp>Having one way to call a function is boring: most languages have a few different ways to invoke a function you or someone you love has defined. Not to be outdone, VimL has some twists of its own related to functions.\u003C/p>\n\u003Cp>Let’s create a very simple function:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" All Viml functions must begin with a capitol letter\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function!\u003C/span>\u003Cspan style=\"color:#B392F0\"> Hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  \" :wave: Just in case you were wondering\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  \" all named arguments are only available on the magical\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  \" arguments dictionary (a) within the function\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hi \"\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#E1E4E8\">a:name\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">endfunction\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The easiest way to call this function in a script, we could simply assign it to a variable, or pass the result of invoking it to a built in like \u003Ccode>echo\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> greeting \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'bob'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> greeting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\"Hi Bob!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> Hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'bob'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\"Hi Bob!\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This makes a \u003Cem>lot\u003C/em> of sense! We’ve always been told that VimL doesn’t make much sense; it feels good to prove people wrong doesn’t it?\u003C/p>\n\u003Cp>But, let’s say we just want the side effects of a function and do not want to deal with whatever it returns. It’d make sense to do the same thing but just not assign it right?\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">MySideEffectFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'some side effecty argument'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">E492: Not an editor \u003C/span>\u003Cspan style=\"color:#F97583\">command\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#B392F0\">MySideEffectFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Not so fast! VimL has other ideas; while certain built in commands (like \u003Ccode>echo\u003C/code>) can be invoked, functions cannot simply be called without passing or assigning their value. This is because things like \u003Ccode>echo Foo()\u003C/code> and \u003Ccode>let x = Foo()\u003C/code> implicitly evaluate or call any expression they are handed (in this case, the expression being invoking the function \u003Ccode>Foo\u003C/code>). Since \u003Ccode>Foo()\u003C/code> isn’t good enough, we need a way to tell VimL to actually call the function.\u003C/p>\n\u003Cp>This is where \u003Ca href=\"http://vimdoc.sourceforge.net/htmldoc/eval.html#:call\">\u003Ccode>:call\u003C/code>\u003C/a> steps in. \u003Ccode>:call\u003C/code> calls a function, with up to 20 arguments (because 19 just wasn’t enough), and discards its return value.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#F97583\">call\u003C/span>\u003Cspan style=\"color:#B392F0\"> MySideEffectFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'this wooooorks'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Call is the \u003Cem>the\u003C/em> way of calling functions within your plugins, or invoking other functions from ex mode.\u003C/p>\n\u003Ch1 id=\"show-me-your-references\">Show me your references\u003C/h1>\n\u003Cp>Let’s explore another way we can use our functions: references. Let’s take a common example, using \u003Ca href=\"http://vimdoc.sourceforge.net/htmldoc/eval.html#map()\">\u003Ccode>map\u003C/code>\u003C/a> with a function we’ve previously defined. We can use Vim’s \u003Ccode>function\u003C/code> keyword to create a funcref (that is a reference to function \u003Cem>wink\u003C/em> \u003Cem>wink\u003C/em>) which allows us to pass it to \u003Ccode>map\u003C/code>, \u003Ccode>filter\u003C/code>, or another function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Exclaim\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(idx, name)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a:name\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">endfunction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> greetings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hey'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Howdy'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hi'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(greetings, \u003C/span>\u003Cspan style=\"color:#B392F0\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Exclaim'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" ['Hey!', 'Howdy!', 'Hi!']\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If we wanted to take a more generic function that did not need to be aware of \u003Ccode>idx\u003C/code>, we could use \u003Ccode>string\u003C/code>ify our funcref and use \u003Ccode>map\u003C/code>’s second argument (a string to be \u003Ccode>eval\u003C/code>d) to invoke our function with the value of each pair we are iterating through:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Exclaim\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a:name\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">endfunction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> greetings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hey'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Howdy'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hi'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(greetings, \u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Exclaim'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'v:val'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" ['Hey!', 'Howdy!', 'Hi!']\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That works, but it’s not very readable. Luckily, more modern versions of Vim have an answer.\u003C/p>\n\u003Ch1 id=\"lambdas-to-the-rescue\">Lambdas to the rescue\u003C/h1>\n\u003Cp>If we, or our intended users, are using vim8+ or neovim, we can use the new lambda syntax to simplify things:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Exclaim\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a:name\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">endfunction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> greetings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hey'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Howdy'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hi'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(greetings, {\u003C/span>\u003Cspan style=\"color:#79B8FF\">key\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, val -> \u003C/span>\u003Cspan style=\"color:#B392F0\">Exclaim\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">val\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" ['Hey!', 'Howdy!', 'Hi!']\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We can even remove our simple function entirely and perform our string modifications within the Lambda if we want:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"vim\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> greetings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hey'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Howdy'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hi'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(greetings, {\u003C/span>\u003Cspan style=\"color:#79B8FF\">key\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, val -> val\u003C/span>\u003Cspan style=\"color:#F97583\"> . \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exclaimed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\" ['Hey!', 'Howdy!', 'Hi!']\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"thats-it\">That’s it!\u003C/h1>\n\u003Cp>There’s so much under the hood with VimL but effectively using functions is a great way to get started writing a simple script or plugin to help make your life better. I hope this helps remove some of the confusion that I initially had.\u003C/p>",{"headings":702,"localImagePaths":715,"remoteImagePaths":716,"frontmatter":717,"imagePaths":719},[703,706,709,712],{"depth":27,"slug":704,"text":705},"getting-func-y","Getting func-y",{"depth":27,"slug":707,"text":708},"show-me-your-references","Show me your references",{"depth":27,"slug":710,"text":711},"lambdas-to-the-rescue","Lambdas to the rescue",{"depth":27,"slug":713,"text":714},"thats-it","That’s it!",[],[],{"layout":16,"title":693,"date":718,"disqusId":695},"2017-07-12",[],"viml-functions.md","cron-in-elixir-with-quantum",{"id":721,"data":723,"body":727,"filePath":728,"digest":729,"rendered":730,"legacyId":761},{"title":724,"date":725,"layout":16,"disqusId":726,"comments":18},"Cron in Elixir with Quantum",["Date","2018-02-26T00:00:00.000Z"],"/2018/02/26/cron-in-elixir-with-quantum","This post showcases some examples of using [quantum] in vanilla OTP and Phoenix Elixir applications. The sample repositories are available at [nicktomlin/quantum_otp_example][1] and [nicktomlin/quantum_phoenix_example][2] respectively.\n\nBackground\n---\n\nI've been diving into Elixir and I've found to the language to be full of lovely surprises that have forced me to re-think the way I approach basic problems. One of those things I've been re-examining is the concept of regularly scheduled tasks. My first thought in doing anything on a regular basis is Cron or a job queuing framework like Resque or Delayed Job. Elixir, however, provides some great built in tools for [running scheduled tasks](https://stackoverflow.com/a/32097971) without the need for external libraries or toolchains.\n\nI've been looking to replace an internal job at work that currently runs on cron with an Elixir OTP application. Using Elixir's schedulers worked, but managing a large number of jobs quickly got unruly. That's where [quantum] steps in to provide cron-like syntax and management for Elixir applications.\n\nOTP: Getting Started\n---\n\nIf you are still getting familiar with Elixir and OTP patterns, as I am, the terse quantum README may not be quite enough to get you up and running; I've created a small [demo app][1] that you can run locally to showcase Quantum Elixir's V2 API. Feel free to dive right in there or walk along here. I've used `mix new quantum_example` to scaffold the project.\n\nFirst, let's add [`quantum`][quantum] and [`timex`][timex] to our mix dependencies:\n\n```elixir\n# mix.exs\ndefp deps do\n  [{:quantum, \"~> 2.2\"},\n    {:timex, \"~> 3.0\"}]\nend\n```\n\nThen run `mix deps.get` to install things.\n\nCreate a `Scheduler` at `lib/scheduler.ex` and setup `Quantum.Scheduler`. Here `otp_app` should correspond to the atom we declare for our application in `mix.exs`\n\n```elixir\ndefmodule QuantumExample.Scheduler do\n  use Quantum.Scheduler, otp_app: :quantum_example\nend\n```\n\nSetup your supervisor tree in an `lib/quantum_test.ex`:\n\n```elixir\ndefmodule QuantumExample do\n  use Application\n\n  def start(_type, _args) do\n    import Supervisor.Spec\n\n    children = [\n      worker(QuantumExample.Scheduler, [])\n    ]\n\n    opts = [strategy: :one_for_one, name: QuantumExample.Supervisor]\n\n    Supervisor.start_link(children, opts)\n  end\n\n  def app_task do\n    File.write(\"tmp/app_time.txt\", \"From the App #{Timex.now}\", [:append])\n  end\nend\n```\n\nThis could easily be stored in a separate `lib/supervisor.ex` but I've chosen to include everything in a single file for simplicity.\n\nFinally, we'll need to configure a job. While Quantum does support dynamic scheduling, it's highly likely that you'll be using the static config format, so you can add the following to `config/dev.exs`:\n\n```elixir\n# config/dev.exs\nconfig :logger, level: :debug\n\nconfig :quantum_example, QuantumExample.Scheduler,\n  jobs: [\n    custom_task: [\n      schedule: \"*/4 * * * *\",\n      task: fn -> File.write(\"tmp/task.txt\", \"#{Timex.now}\", [:append]) end\n    ],\n    application_task: [\n      schedule: \"*/2 * * * *\",\n      task: {QuantumExample, :app_task, []}\n    ]\n  ]\n```\n\nThere's a few things happening here,\n\n0. We are enabling `:debug` logging to get some nice visibility into how Quantum is running things\n1. Quantum's scheduler is going to look up configuration at the atom specified by `otp_app` and then look for the Scheduler class that we included it in (in our case `QuantumExample.Scheduler`)\n2. Our configuration uses Quantum's named job syntax to provide some nice meta data in our Application's logs\n3. The `custom_task` executes some inline elixir code (this is probably _not_ something you want to do in production!)\n4. The `application_task` uses a tuple of `{:atom, :function_name, :args[]}` to invoke the `app_task` function on our `QuantumExample` application. You can obviously use any other module and function in your application.\n\n\nOTP: Running\n---\n\nNow that we've set up the necessary modules and configuration, we can actually run the code!\n\nTo start the server in the background:\n\n```\nmix run --no-halt\n```\n\nOr, to start the server and a REPL:\n\n```\niex -S mix\n```\n\nInspection\n---\n\nIn an `iex -S mix` session, you'll see Quantum's verbose logging adding your jobs; after that you can interact with your scheduler:\n\n```shell\n09:27:23.917 [debug] [:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job :application_task\n09:27:23.930 [debug] [:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job :mix_task\niex(2)> QuantumTest.Scheduler.jos\n# your job information\n```\n\n\n\nYou can also dynamically add jobs through the console:\n\n```shell\niex(3)> import Crontab.CronExpression\niex(4)> QuantumTest.Scheduler.add_job({~e[1 * * * *], fn -> :ok end})\niex(5)> [debug] [:nonode@nohost][Elixir.Quantum.JobBroadcaster] Adding job #Reference\u003C0.2079463013.1644429313.228250>\n```\n\nIf you wait a bit, you'll even see some nice logging:\n\n```shell\n18:34:00.016 [debug] [:nonode@nohost][Elixir.Quantum.Executor] Task for job :application_task started on node :nonode@nohost\n18:34:00.017 [debug] [:nonode@nohost][Elixir.Quantum.Executor] Execute started for job :application_task\n18:34:00.024 [debug] [:nonode@nohost][Elixir.Quantum.Executor] Execution ended for job :application_task, which yielded result: :ok\n```\n\n\nPhoenix: Getting started\n---\n\nSince Phoenix builds on the same OTP patterns, integration with quantum is similar to that of a generic Elixir application.\n\nHere's the [quantum phoenix exmaple repo][2]. This assumes you ran `phx.new quantum_phoenix` just like I did :)\n\nAs in the OTP example we'll need to add [`quantum`][quantum] and [`timex`][timex] to our application's dependencies:\n\n```elixir\n# mix.ex\n\ndefp deps do\n  [# ... many other deps\n   {:quantum, \"~> 2.2\"},\n   {:timex, \"~> 3.0\"}]\nend\n```\n\nAfter that, we create a scheduler class (`lib/quantum_phoenix/scheduler.ex`):\n\n```elixir\ndefmodule QuantumPhoenix.Scheduler do\n  use Quantum.Scheduler, otp_app: :quantum_phoenix\nend\n```\n\nAnd include it in our Phoenix OTP application (`lib/quantum_phoenix/application.ex`):\n\n```elixir\ndefmodule QuantumPhoenix.Application do\n  use Application\n\n  def start(_type, _args) do\n    import Supervisor.Spec\n\n    children = [\n      # other phoenix supervisors/workers\n      worker(QuantumPhoenix.Scheduler, []),\n    ]\n\n    opts = [strategy: :one_for_one, name: QuantumPhoenix.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\n  # ...\nend\n```\n\nWe'll also create a module to handle our task in `lib/quantum_phoenix/task.ex`:\n\n```elixir\ndefmodule QuantumPhoenix.Task do\n  def work do\n    File.write(\"/tmp/quantum_phoenix.txt\", \"#{Timex.now}\", [:append])\n  end\nend\n```\n\nFinally, we can configure quantum in `config/config.exs`:\n\n```elixir\nconfig :quantum_phoenix, QuantumPhoenix.Scheduler,\n  jobs: [\n    phoenix_job: [\n      schedule: \"*/2 * * * *\",\n      task: {QuantumPhoenix.Task, :work, []},\n    ]\n  ]\n```\n\nPhoenix: Run it!\n---\n\nAfter we've set things up, we can start our server with `phx.server` see similar log output as we did with OTP:\n\n```\n[debug] [:nonode@nohost][Elixir.Quantum.Executor] Task for job :phoenix_job started on node :nonode@nohost\n[debug] [:nonode@nohost][Elixir.Quantum.Executor] Execute started for job :phoenix_job\n[debug] [:nonode@nohost][Elixir.Quantum.Executor] Execution ended for job :phoenix_job, which yielded result: :ok\n```\n\nSimilar to our OTP app, we can also interact with Quantum in the mix repl:\n\n```\niex -S mix\n\niex(0)> import Crontab.CronExpression\niex(1)> [debug] [:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job #Reference\u003C0.2079463013.1644429313.228250>\niex(2)> [debug] [:nonode@nohost][Elixir.Quantum.JobBroadcaster] Adding job #Reference\u003C0.2079463013.1644429313.228250>\n```\n\nPhoenix: Gotchas\n---\n\nIntegrating Quantum into phoenix was a snap, except for a _very strange_ compiler error:\n\n```\n== Compilation error in file lib/quantum_phoenix/scheduler.ex ==\n** (CompileError) lib/quantum_phoenix/scheduler.ex:2: Crontab.CronExpression.__struct__/0 is undefined, cannot expand struct Crontab.Cr\nonExpression\n```\n\nThe kind folks on Elixir Forum [helped me resolve](https://elixirforum.com/t/cannot-compile-quantum-with-elixir-1-6-1/12739/3) with a simple `rm -rf _build && mix compile`.  Gremlins. ¯\\_(ツ)_/¯\n\n\nConclusion\n---\n\nSo far I've been extremely impressed with the tooling and ecosystem around Elixir. The Erlang underpinnings can be a little complicated but there are plenty of resources available to help; most of the tools I've found come pretty close to the holy grail of \"it just works.\"\n\nHopefully this helps you along in your own journey!\n\n[quantum]: https://github.com/c-rack/quantum-elixir\n[timex]: https://github.com/bitwalker/timex\n[1]: https://github.com/NickTomlin/quantum_otp_example\n[2]: https://github.com/NickTomlin/quantum_phoenix_example","src/content/posts/cron-in-elixir-with-quantum.md","75aca3b488741e29",{"html":731,"metadata":732},"\u003Cp>This post showcases some examples of using \u003Ca href=\"https://github.com/c-rack/quantum-elixir\">quantum\u003C/a> in vanilla OTP and Phoenix Elixir applications. The sample repositories are available at \u003Ca href=\"https://github.com/NickTomlin/quantum_otp_example\">nicktomlin/quantum_otp_example\u003C/a> and \u003Ca href=\"https://github.com/NickTomlin/quantum_phoenix_example\">nicktomlin/quantum_phoenix_example\u003C/a> respectively.\u003C/p>\n\u003Ch2 id=\"background\">Background\u003C/h2>\n\u003Cp>I’ve been diving into Elixir and I’ve found to the language to be full of lovely surprises that have forced me to re-think the way I approach basic problems. One of those things I’ve been re-examining is the concept of regularly scheduled tasks. My first thought in doing anything on a regular basis is Cron or a job queuing framework like Resque or Delayed Job. Elixir, however, provides some great built in tools for \u003Ca href=\"https://stackoverflow.com/a/32097971\">running scheduled tasks\u003C/a> without the need for external libraries or toolchains.\u003C/p>\n\u003Cp>I’ve been looking to replace an internal job at work that currently runs on cron with an Elixir OTP application. Using Elixir’s schedulers worked, but managing a large number of jobs quickly got unruly. That’s where \u003Ca href=\"https://github.com/c-rack/quantum-elixir\">quantum\u003C/a> steps in to provide cron-like syntax and management for Elixir applications.\u003C/p>\n\u003Ch2 id=\"otp-getting-started\">OTP: Getting Started\u003C/h2>\n\u003Cp>If you are still getting familiar with Elixir and OTP patterns, as I am, the terse quantum README may not be quite enough to get you up and running; I’ve created a small \u003Ca href=\"https://github.com/NickTomlin/quantum_otp_example\">demo app\u003C/a> that you can run locally to showcase Quantum Elixir’s V2 API. Feel free to dive right in there or walk along here. I’ve used \u003Ccode>mix new quantum_example\u003C/code> to scaffold the project.\u003C/p>\n\u003Cp>First, let’s add \u003Ca href=\"https://github.com/c-rack/quantum-elixir\">\u003Ccode>quantum\u003C/code>\u003C/a> and \u003Ca href=\"https://github.com/bitwalker/timex\">\u003Ccode>timex\u003C/code>\u003C/a> to our mix dependencies:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># mix.exs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">defp\u003C/span>\u003Cspan style=\"color:#B392F0\"> deps\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  [{\u003C/span>\u003Cspan style=\"color:#79B8FF\">:quantum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"~> 2.2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003Cspan style=\"color:#79B8FF\">:timex\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"~> 3.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then run \u003Ccode>mix deps.get\u003C/code> to install things.\u003C/p>\n\u003Cp>Create a \u003Ccode>Scheduler\u003C/code> at \u003Ccode>lib/scheduler.ex\u003C/code> and setup \u003Ccode>Quantum.Scheduler\u003C/code>. Here \u003Ccode>otp_app\u003C/code> should correspond to the atom we declare for our application in \u003Ccode>mix.exs\u003C/code>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">defmodule\u003C/span>\u003Cspan style=\"color:#B392F0\"> QuantumExample\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  use\u003C/span>\u003Cspan style=\"color:#B392F0\"> Quantum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">otp_app:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> :quantum_example\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Setup your supervisor tree in an \u003Ccode>lib/quantum_test.ex\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">defmodule\u003C/span>\u003Cspan style=\"color:#B392F0\"> QuantumExample\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  use\u003C/span>\u003Cspan style=\"color:#B392F0\"> Application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  def\u003C/span>\u003Cspan style=\"color:#B392F0\"> start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6A737D\">_type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6A737D\">_args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    import\u003C/span>\u003Cspan style=\"color:#B392F0\"> Supervisor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Spec\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    children \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      worker\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">QuantumExample\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, [])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    opts \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">strategy:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> :one_for_one\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">name:\u003C/span>\u003Cspan style=\"color:#B392F0\"> QuantumExample\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Supervisor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Supervisor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">start_link\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(children, opts)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  def\u003C/span>\u003Cspan style=\"color:#B392F0\"> app_task\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"tmp/app_time.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"From the App \u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{\u003C/span>\u003Cspan style=\"color:#B392F0\">Timex\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, [\u003C/span>\u003Cspan style=\"color:#79B8FF\">:append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This could easily be stored in a separate \u003Ccode>lib/supervisor.ex\u003C/code> but I’ve chosen to include everything in a single file for simplicity.\u003C/p>\n\u003Cp>Finally, we’ll need to configure a job. While Quantum does support dynamic scheduling, it’s highly likely that you’ll be using the static config format, so you can add the following to \u003Ccode>config/dev.exs\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># config/dev.exs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">config \u003C/span>\u003Cspan style=\"color:#79B8FF\">:logger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">level:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> :debug\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">config \u003C/span>\u003Cspan style=\"color:#79B8FF\">:quantum_example\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">QuantumExample\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  jobs:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    custom_task:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      schedule:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*/4 * * * *\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      task:\u003C/span>\u003Cspan style=\"color:#F97583\"> fn\u003C/span>\u003Cspan style=\"color:#F97583\"> ->\u003C/span>\u003Cspan style=\"color:#B392F0\"> File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"tmp/task.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{\u003C/span>\u003Cspan style=\"color:#B392F0\">Timex\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, [\u003C/span>\u003Cspan style=\"color:#79B8FF\">:append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    application_task:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      schedule:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*/2 * * * *\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      task:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#B392F0\">QuantumExample\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">:app_task\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, []}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There’s a few things happening here,\u003C/p>\n\u003Col start=\"0\">\n\u003Cli>We are enabling \u003Ccode>:debug\u003C/code> logging to get some nice visibility into how Quantum is running things\u003C/li>\n\u003Cli>Quantum’s scheduler is going to look up configuration at the atom specified by \u003Ccode>otp_app\u003C/code> and then look for the Scheduler class that we included it in (in our case \u003Ccode>QuantumExample.Scheduler\u003C/code>)\u003C/li>\n\u003Cli>Our configuration uses Quantum’s named job syntax to provide some nice meta data in our Application’s logs\u003C/li>\n\u003Cli>The \u003Ccode>custom_task\u003C/code> executes some inline elixir code (this is probably \u003Cem>not\u003C/em> something you want to do in production!)\u003C/li>\n\u003Cli>The \u003Ccode>application_task\u003C/code> uses a tuple of \u003Ccode>{:atom, :function_name, :args[]}\u003C/code> to invoke the \u003Ccode>app_task\u003C/code> function on our \u003Ccode>QuantumExample\u003C/code> application. You can obviously use any other module and function in your application.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"otp-running\">OTP: Running\u003C/h2>\n\u003Cp>Now that we’ve set up the necessary modules and configuration, we can actually run the code!\u003C/p>\n\u003Cp>To start the server in the background:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>mix run --no-halt\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Or, to start the server and a REPL:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>iex -S mix\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"inspection\">Inspection\u003C/h2>\n\u003Cp>In an \u003Ccode>iex -S mix\u003C/code> session, you’ll see Quantum’s verbose logging adding your jobs; after that you can interact with your scheduler:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">09:27:23.917\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [debug] [:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job :application_task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">09:27:23.930\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [debug] [:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job :mix_task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">iex(2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> QuantumTest.Scheduler.jos\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># your job information\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You can also dynamically add jobs through the console:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">iex(3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> import Crontab.CronExpression\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">iex(4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> QuantumTest.Scheduler.add_job({~e[1 * * * *], fn -> :ok end})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">iex(5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [debug] [:nonode@nohost][Elixir.Quantum.JobBroadcaster] Adding job \u003C/span>\u003Cspan style=\"color:#6A737D\">#Reference&#x3C;0.2079463013.1644429313.228250>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you wait a bit, you’ll even see some nice logging:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">18:34:00.016\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [debug] [:nonode@nohost][Elixir.Quantum.Executor] Task \u003C/span>\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> job :application_task started on node :nonode@nohost\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">18:34:00.017\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [debug] [:nonode@nohost][Elixir.Quantum.Executor] Execute started \u003C/span>\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> job :application_task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">18:34:00.024\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [debug] [:nonode@nohost][Elixir.Quantum.Executor] Execution ended \u003C/span>\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> job :application_task, which yielded result: :ok\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"phoenix-getting-started\">Phoenix: Getting started\u003C/h2>\n\u003Cp>Since Phoenix builds on the same OTP patterns, integration with quantum is similar to that of a generic Elixir application.\u003C/p>\n\u003Cp>Here’s the \u003Ca href=\"https://github.com/NickTomlin/quantum_phoenix_example\">quantum phoenix exmaple repo\u003C/a>. This assumes you ran \u003Ccode>phx.new quantum_phoenix\u003C/code> just like I did :)\u003C/p>\n\u003Cp>As in the OTP example we’ll need to add \u003Ca href=\"https://github.com/c-rack/quantum-elixir\">\u003Ccode>quantum\u003C/code>\u003C/a> and \u003Ca href=\"https://github.com/bitwalker/timex\">\u003Ccode>timex\u003C/code>\u003C/a> to our application’s dependencies:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># mix.ex\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">defp\u003C/span>\u003Cspan style=\"color:#B392F0\"> deps\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  [\u003C/span>\u003Cspan style=\"color:#6A737D\"># ... many other deps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   {\u003C/span>\u003Cspan style=\"color:#79B8FF\">:quantum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"~> 2.2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   {\u003C/span>\u003Cspan style=\"color:#79B8FF\">:timex\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"~> 3.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>After that, we create a scheduler class (\u003Ccode>lib/quantum_phoenix/scheduler.ex\u003C/code>):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">defmodule\u003C/span>\u003Cspan style=\"color:#B392F0\"> QuantumPhoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  use\u003C/span>\u003Cspan style=\"color:#B392F0\"> Quantum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">otp_app:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> :quantum_phoenix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And include it in our Phoenix OTP application (\u003Ccode>lib/quantum_phoenix/application.ex\u003C/code>):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">defmodule\u003C/span>\u003Cspan style=\"color:#B392F0\"> QuantumPhoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Application\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  use\u003C/span>\u003Cspan style=\"color:#B392F0\"> Application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  def\u003C/span>\u003Cspan style=\"color:#B392F0\"> start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6A737D\">_type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6A737D\">_args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    import\u003C/span>\u003Cspan style=\"color:#B392F0\"> Supervisor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Spec\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    children \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      # other phoenix supervisors/workers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      worker\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">QuantumPhoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, []),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    opts \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">strategy:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> :one_for_one\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">name:\u003C/span>\u003Cspan style=\"color:#B392F0\"> QuantumPhoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Supervisor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Supervisor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">start_link\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(children, opts)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  # ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We’ll also create a module to handle our task in \u003Ccode>lib/quantum_phoenix/task.ex\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">defmodule\u003C/span>\u003Cspan style=\"color:#B392F0\"> QuantumPhoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Task\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  def\u003C/span>\u003Cspan style=\"color:#B392F0\"> work\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/tmp/quantum_phoenix.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{\u003C/span>\u003Cspan style=\"color:#B392F0\">Timex\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, [\u003C/span>\u003Cspan style=\"color:#79B8FF\">:append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Finally, we can configure quantum in \u003Ccode>config/config.exs\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"elixir\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">config \u003C/span>\u003Cspan style=\"color:#79B8FF\">:quantum_phoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">QuantumPhoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scheduler\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  jobs:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    phoenix_job:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      schedule:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*/2 * * * *\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      task:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#B392F0\">QuantumPhoenix\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Task\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">:work\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, []},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"phoenix-run-it\">Phoenix: Run it!\u003C/h2>\n\u003Cp>After we’ve set things up, we can start our server with \u003Ccode>phx.server\u003C/code> see similar log output as we did with OTP:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[debug] [:nonode@nohost][Elixir.Quantum.Executor] Task for job :phoenix_job started on node :nonode@nohost\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[debug] [:nonode@nohost][Elixir.Quantum.Executor] Execute started for job :phoenix_job\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[debug] [:nonode@nohost][Elixir.Quantum.Executor] Execution ended for job :phoenix_job, which yielded result: :ok\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Similar to our OTP app, we can also interact with Quantum in the mix repl:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>iex -S mix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>iex(0)> import Crontab.CronExpression\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>iex(1)> [debug] [:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job #Reference&#x3C;0.2079463013.1644429313.228250>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>iex(2)> [debug] [:nonode@nohost][Elixir.Quantum.JobBroadcaster] Adding job #Reference&#x3C;0.2079463013.1644429313.228250>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"phoenix-gotchas\">Phoenix: Gotchas\u003C/h2>\n\u003Cp>Integrating Quantum into phoenix was a snap, except for a \u003Cem>very strange\u003C/em> compiler error:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>== Compilation error in file lib/quantum_phoenix/scheduler.ex ==\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>** (CompileError) lib/quantum_phoenix/scheduler.ex:2: Crontab.CronExpression.__struct__/0 is undefined, cannot expand struct Crontab.Cr\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>onExpression\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The kind folks on Elixir Forum \u003Ca href=\"https://elixirforum.com/t/cannot-compile-quantum-with-elixir-1-6-1/12739/3\">helped me resolve\u003C/a> with a simple \u003Ccode>rm -rf _build &#x26;&#x26; mix compile\u003C/code>.  Gremlins. ¯_(ツ)_/¯\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>So far I’ve been extremely impressed with the tooling and ecosystem around Elixir. The Erlang underpinnings can be a little complicated but there are plenty of resources available to help; most of the tools I’ve found come pretty close to the holy grail of “it just works.”\u003C/p>\n\u003Cp>Hopefully this helps you along in your own journey!\u003C/p>",{"headings":733,"localImagePaths":756,"remoteImagePaths":757,"frontmatter":758,"imagePaths":760},[734,737,740,743,746,749,752,755],{"depth":34,"slug":735,"text":736},"background","Background",{"depth":34,"slug":738,"text":739},"otp-getting-started","OTP: Getting Started",{"depth":34,"slug":741,"text":742},"otp-running","OTP: Running",{"depth":34,"slug":744,"text":745},"inspection","Inspection",{"depth":34,"slug":747,"text":748},"phoenix-getting-started","Phoenix: Getting started",{"depth":34,"slug":750,"text":751},"phoenix-run-it","Phoenix: Run it!",{"depth":34,"slug":753,"text":754},"phoenix-gotchas","Phoenix: Gotchas",{"depth":34,"slug":460,"text":461},[],[],{"layout":16,"title":724,"date":759,"disqusId":726},"2018-02-26",[],"cron-in-elixir-with-quantum.md","using-jackson-csv-with-kotlin",{"id":762,"data":764,"body":768,"filePath":769,"digest":770,"rendered":771,"legacyId":780},{"title":765,"date":766,"layout":16,"disqusId":767,"comments":18},"Using Jackson CSV with kotlin",["Date","2020-04-15T00:00:00.000Z"],"/2020/04/15/using-jackson-csv-with-kotlin","I've been exploring [kotlin](https://kotlinlang.org/) for new projects on the JVM and it's been lovely so far. I've enjoyed the mostly seamless interop with the Java I know and love. I say mostly because there are a few hurdles to jump through.\n\nOne I issue I recently encountered involved using [Jackson's CSV dataformat](https://github.com/FasterXML/jackson-dataformats-text/tree/master/csv) with Kotlin data classes. This was obvious when I found the solution and tracked it back to the documentation, but not so obvious when I first encountered it.\n\nRunning the following Kotlin program:\n\n```kotlin\nimport com.fasterxml.jackson.dataformat.csv.CsvMapper\nimport com.fasterxml.jackson.dataformat.csv.CsvSchema\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\n\ndata class Customer(val id: Int)\n\nfun main () {\n    val mapper = CsvMapper()\n    val csv = \"id\\n1234\"\n    val customers = mapper.readerFor(Customer::class.java)\n            .with(CsvSchema.emptySchema().withHeader())\n            .readValues\u003CCustomer>(csv)\n            .readAll()\n    println(customers)\n}\n```\n\nResults in this lovely exception:\n\n```\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `Line_2$Customer` (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator)\n```\n\nThis is because even though we've included `jackson-module-kotlin`, we still need to register it with the CSVMapper in order to properly handle Kotlin classes. Luckily, registering is simple:\n\n```kotlin\n\nfun main () {\n    val mapper = CsvMapper().registerModule(KotlinModule())\n    // ...\n    println(customers)\n}\n```\n\nWe can now properly deserialize our CSV:\n\n```\n[Customer(id=1234)]\n```\n\nHopefully that saves you some time spent Googling and scratching your head!","src/content/posts/using-jackson-csv-with-kotlin.md","a33dacf2848fc56a",{"html":772,"metadata":773},"\u003Cp>I’ve been exploring \u003Ca href=\"https://kotlinlang.org/\">kotlin\u003C/a> for new projects on the JVM and it’s been lovely so far. I’ve enjoyed the mostly seamless interop with the Java I know and love. I say mostly because there are a few hurdles to jump through.\u003C/p>\n\u003Cp>One I issue I recently encountered involved using \u003Ca href=\"https://github.com/FasterXML/jackson-dataformats-text/tree/master/csv\">Jackson’s CSV dataformat\u003C/a> with Kotlin data classes. This was obvious when I found the solution and tracked it back to the documentation, but not so obvious when I first encountered it.\u003C/p>\n\u003Cp>Running the following Kotlin program:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#B392F0\"> com.fasterxml.jackson.dataformat.csv.CsvMapper\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#B392F0\"> com.fasterxml.jackson.dataformat.csv.CsvSchema\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#B392F0\"> com.fasterxml.jackson.module.kotlin.KotlinModule\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">data\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Customer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id: \u003C/span>\u003Cspan style=\"color:#B392F0\">Int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mapper \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> CsvMapper\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> csv \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"id\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">1234\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> customers \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mapper.\u003C/span>\u003Cspan style=\"color:#B392F0\">readerFor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Customer::\u003C/span>\u003Cspan style=\"color:#B392F0\">class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.java)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(CsvSchema.\u003C/span>\u003Cspan style=\"color:#B392F0\">emptySchema\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">withHeader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">readValues\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Customer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(csv)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">readAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(customers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Results in this lovely exception:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `Line_2$Customer` (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is because even though we’ve included \u003Ccode>jackson-module-kotlin\u003C/code>, we still need to register it with the CSVMapper in order to properly handle Kotlin classes. Luckily, registering is simple:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mapper \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> CsvMapper\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">registerModule\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">KotlinModule\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(customers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We can now properly deserialize our CSV:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[Customer(id=1234)]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Hopefully that saves you some time spent Googling and scratching your head!\u003C/p>",{"headings":774,"localImagePaths":775,"remoteImagePaths":776,"frontmatter":777,"imagePaths":779},[],[],[],{"layout":16,"title":765,"date":778,"disqusId":767},"2020-04-15",[],"using-jackson-csv-with-kotlin.md","my-migrating-from-jekyll-to-next-technical-challenges",{"id":781,"data":783,"body":786,"filePath":787,"digest":788,"rendered":789,"legacyId":819},{"title":784,"date":785,"comments":18},"Migrating from Jekyll to Next.js: Technical Challenges",["Date","2021-01-25T00:00:00.000Z"],"This post describes technical details of migrating from [Jekyll](https://jekyllrb.com/) and [Github Pages](https://pages.github.com/) to [`next.js`](https://nextjs.org) and [netlify](https://www.netlify.com/). For the story of the migration, see [the sibling post](/posts/migrating-from-jekyll-to-next-js-initial-thoughts).\n\n# The work\n\nI had a very simple Jekyll site and I wanted to move it to Next.js. The work was relatively straightforward, but there were some hiccups.\n\n## Converting from liquid to JSX\n\nThis was something I had to do manually. For some pages, I could simply `mv foo.html foo.jsx` but for others that used a lot of liquid syntax, I needed to replicate the logic in JavaScript/JSX. This wasn't too bad:\n\nThis liquid template:\n\n```html\n\n{% for post in site.posts limit:6 %}\n\u003Cli>\n  \u003Cspan class=\"post-meta\">{{ post.date | date: \"%b %-d, %Y\" }}\u003C/span>\n\n  \u003Ch4>\n    \u003Ca class=\"post-link\" href=\"{{ post.url | prepend: site.baseurl }}\">{{ post.title }}\u003C/a>\n  \u003C/h4>\n\u003C/li>\n{% endfor %}\n\n```\n\nbecame:\n\n```jsx\n {posts.slice(0, 4).map(post => (\n   /* additional markup omitted for brevity... */\n  \u003CDate date={post.date} />\n  \u003CLink className=\"text-lg\" href={post.href}>{post.title}\u003C/Link>\n))}\n```\n\nThere may be some magical Liquid to JSX converter out there, but writing one was not worth my time for this project.\n\n## Converting slugs\n\nMy Jekyll site had deeply nested post slugs in the format of `[year]/[month]/[day]/[id]`. I initially went down the route of replicating this pattern, but decided to simplify to just `[id]`. There were two reasons for this:\n\n- The \"convention based\" nested routes in `next.js` made generating and navigating between posts complicated, especially with file-based static site generation\n- For a low throughput blog like mine, the granularity of `[year]/[month]/[day]/[id]` was overkill and not a good look anyway\n\nIf you happen to need that granularity, by all means use either nested directories and a compound Key in `next.js` but know that it will make your content a little more complicated for it.\n\n### Managing redirects\n\nWhile simplifying the url made things easier (and more readable IMHO), it broke SEO. To get around this, I wrote a [script][1] to harness `netflify`'s [redirect file](https://docs.netlify.com/routing/redirects/#syntax-for-the-redirects-file) a to preserve some semblance of this after the migration.\n\n## Implementing markdown\n\nOut of the box, Jekyll supports markdown with [Kramdown](https://kramdown.gettalong.org/) and syntax highlighting in code snippets with [rouge](http://rouge.jneen.net/). Next.js has no support for this, but adding it is trivial.  I replaced [Kramdown](https://kramdown.gettalong.org/) with [remark](https://github.com/remarkjs/remark) and Rouge with [`prism`](https://prismjs.com/).\n\nNormally I would have balked at all this work, but because of the fact that `next.js` is built like a React app, assembling these pieces was easy. I wasn't dealing with weird `next.js` plugins or overriding things with custom config blobs; just writing application code. All that functionality boiled down to about [10 lines of code](https://github.com/NickTomlin/nicktomlin.github.io/blob/master/lib/markdown.js#L5-L13).\n\nConverting the existing posts was done through a [a script][1].\n\n## Reloading on markdown changes\n\nJekyll automatically re-builds a site on changes to posts. It's slow, and doesn't refresh the browser, but it works. Next has blazing fast reloads for JS files, but doesn't know how to watch things outside of your application code (like my `posts` directory in this case). I was able to get this working using the [next-remote-watch](https://github.com/hashicorp/next-remote-watch) module.\nSo far, everything is fine, although there are some major caveats because it depends on internal APIs.\n\n# The long and winding road\n\nAt the end of the day, I still just have a basic blog that is written in Markdown. But I've gained greater flexibility in how I style and process my content, as well as moving to a toolchain that is closer to my day to day work (especially now that I no longer get paid to write Ruby).\n\n[1]: https://github.com/NickTomlin/nicktomlin.github.io/blob/master/scripts/migrate-posts.js","src/content/posts/my-migrating-from-jekyll-to-next-technical-challenges.md","9daa06d2c311dc13",{"html":790,"metadata":791},"\u003Cp>This post describes technical details of migrating from \u003Ca href=\"https://jekyllrb.com/\">Jekyll\u003C/a> and \u003Ca href=\"https://pages.github.com/\">Github Pages\u003C/a> to \u003Ca href=\"https://nextjs.org\">\u003Ccode>next.js\u003C/code>\u003C/a> and \u003Ca href=\"https://www.netlify.com/\">netlify\u003C/a>. For the story of the migration, see \u003Ca href=\"/posts/migrating-from-jekyll-to-next-js-initial-thoughts\">the sibling post\u003C/a>.\u003C/p>\n\u003Ch1 id=\"the-work\">The work\u003C/h1>\n\u003Cp>I had a very simple Jekyll site and I wanted to move it to Next.js. The work was relatively straightforward, but there were some hiccups.\u003C/p>\n\u003Ch2 id=\"converting-from-liquid-to-jsx\">Converting from liquid to JSX\u003C/h2>\n\u003Cp>This was something I had to do manually. For some pages, I could simply \u003Ccode>mv foo.html foo.jsx\u003C/code> but for others that used a lot of liquid syntax, I needed to replicate the logic in JavaScript/JSX. This wasn’t too bad:\u003C/p>\n\u003Cp>This liquid template:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{% for post in site.posts limit:6 %}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"post-meta\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{{ post.date | date: \"%b %-d, %Y\" }}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"post-link\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{{ post.url | prepend: site.baseurl }}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{{ post.title }}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{% endfor %}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>became:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> {posts.\u003C/span>\u003Cspan style=\"color:#B392F0\">slice\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">post\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">   /* additional markup omitted for brevity... */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Date\u003C/span>\u003Cspan style=\"color:#B392F0\"> date\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{post.date} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Link\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-lg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{post.href}>{post.title}&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Link\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">))}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There may be some magical Liquid to JSX converter out there, but writing one was not worth my time for this project.\u003C/p>\n\u003Ch2 id=\"converting-slugs\">Converting slugs\u003C/h2>\n\u003Cp>My Jekyll site had deeply nested post slugs in the format of \u003Ccode>[year]/[month]/[day]/[id]\u003C/code>. I initially went down the route of replicating this pattern, but decided to simplify to just \u003Ccode>[id]\u003C/code>. There were two reasons for this:\u003C/p>\n\u003Cul>\n\u003Cli>The “convention based” nested routes in \u003Ccode>next.js\u003C/code> made generating and navigating between posts complicated, especially with file-based static site generation\u003C/li>\n\u003Cli>For a low throughput blog like mine, the granularity of \u003Ccode>[year]/[month]/[day]/[id]\u003C/code> was overkill and not a good look anyway\u003C/li>\n\u003C/ul>\n\u003Cp>If you happen to need that granularity, by all means use either nested directories and a compound Key in \u003Ccode>next.js\u003C/code> but know that it will make your content a little more complicated for it.\u003C/p>\n\u003Ch3 id=\"managing-redirects\">Managing redirects\u003C/h3>\n\u003Cp>While simplifying the url made things easier (and more readable IMHO), it broke SEO. To get around this, I wrote a \u003Ca href=\"https://github.com/NickTomlin/nicktomlin.github.io/blob/master/scripts/migrate-posts.js\">script\u003C/a> to harness \u003Ccode>netflify\u003C/code>’s \u003Ca href=\"https://docs.netlify.com/routing/redirects/#syntax-for-the-redirects-file\">redirect file\u003C/a> a to preserve some semblance of this after the migration.\u003C/p>\n\u003Ch2 id=\"implementing-markdown\">Implementing markdown\u003C/h2>\n\u003Cp>Out of the box, Jekyll supports markdown with \u003Ca href=\"https://kramdown.gettalong.org/\">Kramdown\u003C/a> and syntax highlighting in code snippets with \u003Ca href=\"http://rouge.jneen.net/\">rouge\u003C/a>. Next.js has no support for this, but adding it is trivial.  I replaced \u003Ca href=\"https://kramdown.gettalong.org/\">Kramdown\u003C/a> with \u003Ca href=\"https://github.com/remarkjs/remark\">remark\u003C/a> and Rouge with \u003Ca href=\"https://prismjs.com/\">\u003Ccode>prism\u003C/code>\u003C/a>.\u003C/p>\n\u003Cp>Normally I would have balked at all this work, but because of the fact that \u003Ccode>next.js\u003C/code> is built like a React app, assembling these pieces was easy. I wasn’t dealing with weird \u003Ccode>next.js\u003C/code> plugins or overriding things with custom config blobs; just writing application code. All that functionality boiled down to about \u003Ca href=\"https://github.com/NickTomlin/nicktomlin.github.io/blob/master/lib/markdown.js#L5-L13\">10 lines of code\u003C/a>.\u003C/p>\n\u003Cp>Converting the existing posts was done through a \u003Ca href=\"https://github.com/NickTomlin/nicktomlin.github.io/blob/master/scripts/migrate-posts.js\">a script\u003C/a>.\u003C/p>\n\u003Ch2 id=\"reloading-on-markdown-changes\">Reloading on markdown changes\u003C/h2>\n\u003Cp>Jekyll automatically re-builds a site on changes to posts. It’s slow, and doesn’t refresh the browser, but it works. Next has blazing fast reloads for JS files, but doesn’t know how to watch things outside of your application code (like my \u003Ccode>posts\u003C/code> directory in this case). I was able to get this working using the \u003Ca href=\"https://github.com/hashicorp/next-remote-watch\">next-remote-watch\u003C/a> module.\nSo far, everything is fine, although there are some major caveats because it depends on internal APIs.\u003C/p>\n\u003Ch1 id=\"the-long-and-winding-road\">The long and winding road\u003C/h1>\n\u003Cp>At the end of the day, I still just have a basic blog that is written in Markdown. But I’ve gained greater flexibility in how I style and process my content, as well as moving to a toolchain that is closer to my day to day work (especially now that I no longer get paid to write Ruby).\u003C/p>",{"headings":792,"localImagePaths":814,"remoteImagePaths":815,"frontmatter":816,"imagePaths":818},[793,796,799,802,805,808,811],{"depth":27,"slug":794,"text":795},"the-work","The work",{"depth":34,"slug":797,"text":798},"converting-from-liquid-to-jsx","Converting from liquid to JSX",{"depth":34,"slug":800,"text":801},"converting-slugs","Converting slugs",{"depth":92,"slug":803,"text":804},"managing-redirects","Managing redirects",{"depth":34,"slug":806,"text":807},"implementing-markdown","Implementing markdown",{"depth":34,"slug":809,"text":810},"reloading-on-markdown-changes","Reloading on markdown changes",{"depth":27,"slug":812,"text":813},"the-long-and-winding-road","The long and winding road",[],[],{"title":784,"date":817},["Date","2021-01-25T00:00:00.000Z"],[],"my-migrating-from-jekyll-to-next-technical-challenges.md","using-phpmailer-for-fun-and-profit",{"id":820,"data":822,"body":826,"filePath":827,"digest":828,"rendered":829,"legacyId":841},{"title":823,"date":824,"layout":16,"disqusId":825,"comments":18},"Let's Send an Html Email Using PHPmailer",["Date","2012-08-31T00:00:00.000Z"],"/2012/08/31/using-phpmailer-for-fun-and-profit","\u003Cp>I recently needed to send a create a form that would send an html email with a PDF attachement. Due to some project constraints, using a service like MailChimp (which I do love oh so much) was out of the question, so I had to work a little magic of my own. Let&#8217;s go on a little journey, shall we?\u003C/p>\n\n\u003Ch2>Email: code like it&#8217;s 1999\u003C/h2>\n\n\u003Cp>Email is still an anomly when it comes to web standards, where the old school way of doing thing still reigns. Be not afraid, however, because are a few tools that make things quite a bit easier.\u003C/p>\n\n\u003Ch3>For starters: HTML Boilerplate\u003C/h3>\n\n\u003Cp>There are a lot of quirks in email markup, and the \u003Ca href=\"http://htmlemailboilerplate.com/\">HTML Email Boilerplate\u003C/a> does a great job of setting things up. You get tweaks for the various mail cients, a style reset, and a very basic markup template.\u003C/p>\n\n\u003Ch3>The good stuff: your design\u003C/h3>\n\n\u003Cp>Enjoy implementing your snazzy design here, but be sure to stay within the recommended 550-650px width (Mailchimp recommends 600px, so i&#8217;d say that&#8217;s a safe bet).\u003C/p>\n\n\u003Cp>Feel free to write you styles in the \u003Ccode>&lt;style&gt;&lt;/style&gt;\u003C/code> to make things easier as you design. We&#8217;ll use Premailer later on to move them inline.\u003C/p>\n\n\u003Cp>Images can be hosted on your website, a CDN, or you can attach them to the email with PHPmailer.\u003C/p>\n\n\u003Ch3>Finishing things off: Premailer\u003C/h3>\n\n\u003Cp>Now that we have our beautiful template all tabled up and ready, we want to make sure it plays nicely with as many email clients as possible. The best way that i&#8217;ve found is to use \u003Ca href=\"http://premailer.dialect.ca\">Premailer\u003C/a>. Premailer will take your lovely html template, work some magic on it, and give you a leaner, friendler version that even picky clients like outlook (and, suprisingly, gmail) will love.\u003C/p>\n\n\u003Cp>Save the premailer formatted html to a file in your project directory (we&#8217;ll need to reference it in our PHP script later on).\u003C/p>\n\n\u003Ch2>Let&#8217;s Send this puppy!\u003C/h2>\n\n\u003Cp>We are so close, but&#8230; now we actually have to send the thing. Easier said than done.\u003C/p>\n\n\u003Ch3>MIMEs are a pain\u003C/h3>\n\n\u003Cp>The first hurdle is getting the proper MIME headers for the various elements of our email.\nWe could just use PHP&#8217;s built in mail() and write our own MIME headers for all the content (which supposes that you know enough to write your own MIME headers &#8211; I don&#8217;t), but let&#8217;s take a look at how much fun that is:\u003C/p>\n\n\u003Cfigure class='code'>\u003Cdiv class='highlight'>\u003Ctable>\u003Ctd class='gutter'>\u003Cpre class='line-numbers'>\u003Cspan class='line-number'>1\u003C/span>\n\u003Cspan class='line-number'>2\u003C/span>\n\u003C/pre>\u003C/td>\u003Ctd class='code'>\u003Cpre>\u003Ccode class='plain'>\u003Cspan class='line'>$body .=\"Content-Type: text/html; charset=\\\"iso-8859-1\\\"\";\n\u003C/span>\u003Cspan class='line'>$body .= \"Content-Transfer-Encoding: 8bit\";\u003C/span>\u003C/code>\u003C/pre>\u003C/td>\u003C/tr>\u003C/table>\u003C/div>\u003C/figure>\n\n\n\u003Cp>Now imagine having to set that for your attachments (which you need to open and encode properly), the html email file, and the plain text version of your email. If you get things wrong, it&#8217;s up to you to figure out the esoteric error messages of mail() and various email clients. Whooo&#8230; no thanks. That&#8217;s why we&#8217;ll use PHPmailer to do it for us.\u003C/p>\n\n\u003Ch3>PHPMailer to the rescue\u003C/h3>\n\n\u003Cp>\u003Ca href=\"http://code.google.com/a/apache-extras.org/p/phpmailer/\">PHPMailer\u003C/a> is an apache extra that takes a lot of the confusion out of sending emails. Just download it to your project directory, include it in your PHP file and follow the tutorial \u003Ca href=\"http://code.google.com/a/apache-extras.org/p/phpmailer/wiki/UsefulTutorial\">here\u003C/a> or modify my script below:\u003C/p>\n\n~~~ php\nrequire_once(includes/phpmail.class) // or wherever you put phpmail.class\n\nbody = file_get_contents('email/htmlemail.html'); // include our formatted email\n\n$mail->AltBody = \"To view this message please use an HTML compatible email viewer, or visit http://mysite.com/emailcampaign\"; // give folks who can't read HTML email something to read\n$mail->SetFrom($email,$name);\n$address = $email;\n$mail->AddAddress($address, $name);\n$mail->Subject = \"Subject\";\n$mail->MsgHTML($body);\n$mail->addAttachment(\"email/attachment.pdf\"); // just repeat this for multiple attachments\n\n// send statement, followed by error reporting (comment out for production)\nif(!$mail->Send()) {\n  echo \"Mailer Error: \" . $mail->ErrorInfo; // for testing\n} else {\n  echo 'Message sent!'; // for testing\n}\n~~~\n\n\u003Ch2>The end.\u003C/h2>\n\n\u003Cp>And there we have it, a functional workflow for an html email with some killer attachments. It&#8217;s not perfect by any means, but it has made things a lot less easier for me. Suggestions for improvement are more than welcome, just shoot me a comment.\u003C/p>\n\n\u003Cp>Happy Emailing,\u003Cbr/>\nNick\u003C/p>","src/content/posts/using-phpmailer-for-fun-and-profit.md","05da819456fc0cd2",{"html":830,"metadata":831},"\u003Cp>I recently needed to send a create a form that would send an html email with a PDF attachement. Due to some project constraints, using a service like MailChimp (which I do love oh so much) was out of the question, so I had to work a little magic of my own. Let’s go on a little journey, shall we?\u003C/p>\n\u003Ch2>Email: code like it’s 1999\u003C/h2>\n\u003Cp>Email is still an anomly when it comes to web standards, where the old school way of doing thing still reigns. Be not afraid, however, because are a few tools that make things quite a bit easier.\u003C/p>\n\u003Ch3>For starters: HTML Boilerplate\u003C/h3>\n\u003Cp>There are a lot of quirks in email markup, and the \u003Ca href=\"http://htmlemailboilerplate.com/\">HTML Email Boilerplate\u003C/a> does a great job of setting things up. You get tweaks for the various mail cients, a style reset, and a very basic markup template.\u003C/p>\n\u003Ch3>The good stuff: your design\u003C/h3>\n\u003Cp>Enjoy implementing your snazzy design here, but be sure to stay within the recommended 550-650px width (Mailchimp recommends 600px, so i’d say that’s a safe bet).\u003C/p>\n\u003Cp>Feel free to write you styles in the \u003Ccode>&#x3C;style>&#x3C;/style>\u003C/code> to make things easier as you design. We’ll use Premailer later on to move them inline.\u003C/p>\n\u003Cp>Images can be hosted on your website, a CDN, or you can attach them to the email with PHPmailer.\u003C/p>\n\u003Ch3>Finishing things off: Premailer\u003C/h3>\n\u003Cp>Now that we have our beautiful template all tabled up and ready, we want to make sure it plays nicely with as many email clients as possible. The best way that i’ve found is to use \u003Ca href=\"http://premailer.dialect.ca\">Premailer\u003C/a>. Premailer will take your lovely html template, work some magic on it, and give you a leaner, friendler version that even picky clients like outlook (and, suprisingly, gmail) will love.\u003C/p>\n\u003Cp>Save the premailer formatted html to a file in your project directory (we’ll need to reference it in our PHP script later on).\u003C/p>\n\u003Ch2>Let’s Send this puppy!\u003C/h2>\n\u003Cp>We are so close, but… now we actually have to send the thing. Easier said than done.\u003C/p>\n\u003Ch3>MIMEs are a pain\u003C/h3>\n\u003Cp>The first hurdle is getting the proper MIME headers for the various elements of our email.\nWe could just use PHP’s built in mail() and write our own MIME headers for all the content (which supposes that you know enough to write your own MIME headers – I don’t), but let’s take a look at how much fun that is:\u003C/p>\n\u003Cfigure class=\"code\">\u003Cdiv class=\"highlight\">\u003Ctable>\u003Ctbody>\u003Ctr>\u003Ctd class=\"gutter\">\u003Cpre class=\"line-numbers\">\u003Cspan class=\"line-number\">1\u003C/span>\n\u003Cspan class=\"line-number\">2\u003C/span>\n\u003C/pre>\u003C/td>\u003Ctd class=\"code\">\u003Cpre>\u003Ccode class=\"plain\">\u003Cspan class=\"line\">$body .=\"Content-Type: text/html; charset=\\\"iso-8859-1\\\"\";\n\u003C/span>\u003Cspan class=\"line\">$body .= \"Content-Transfer-Encoding: 8bit\";\u003C/span>\u003C/code>\u003C/pre>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\u003C/div>\u003C/figure>\n\u003Cp>Now imagine having to set that for your attachments (which you need to open and encode properly), the html email file, and the plain text version of your email. If you get things wrong, it’s up to you to figure out the esoteric error messages of mail() and various email clients. Whooo… no thanks. That’s why we’ll use PHPmailer to do it for us.\u003C/p>\n\u003Ch3>PHPMailer to the rescue\u003C/h3>\n\u003Cp>\u003Ca href=\"http://code.google.com/a/apache-extras.org/p/phpmailer/\">PHPMailer\u003C/a> is an apache extra that takes a lot of the confusion out of sending emails. Just download it to your project directory, include it in your PHP file and follow the tutorial \u003Ca href=\"http://code.google.com/a/apache-extras.org/p/phpmailer/wiki/UsefulTutorial\">here\u003C/a> or modify my script below:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">require_once\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">includes\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">phpmail\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// or wherever you put phpmail.class\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">body\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> file_get_contents\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'email/htmlemail.html'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// include our formatted email\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#E1E4E8\">AltBody \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"To view this message please use an HTML compatible email viewer, or visit http://mysite.com/emailcampaign\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// give folks who can't read HTML email something to read\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">SetFrom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($email,$name);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$address \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $email;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">AddAddress\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($address, $name);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Subject \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Subject\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">MsgHTML\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($body);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">addAttachment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email/attachment.pdf\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// just repeat this for multiple attachments\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// send statement, followed by error reporting (comment out for production)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">Send\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Mailer Error: \"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $mail\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ErrorInfo; \u003C/span>\u003Cspan style=\"color:#6A737D\">// for testing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Message sent!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// for testing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2>The end.\u003C/h2>\n\u003Cp>And there we have it, a functional workflow for an html email with some killer attachments. It’s not perfect by any means, but it has made things a lot less easier for me. Suggestions for improvement are more than welcome, just shoot me a comment.\u003C/p>\n\u003Cp>Happy Emailing,\u003Cbr>\nNick\u003C/p>",{"headings":832,"localImagePaths":833,"remoteImagePaths":834,"frontmatter":835,"imagePaths":840},[],[],[],{"layout":16,"title":823,"date":836,"comments":18,"external-url":42,"published":18,"categories":837,"disqusId":825},"2012-08-31",[838,839],"php","html email",[],"using-phpmailer-for-fun-and-profit.md"]