<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nick Tomlin: Full Stack Engineer</title>
    <description>I'm Nick Tomlin, a full stack engineer in Chicago. I like JavaScript.</description>
    <link>http://nick-tomlin.com/</link>
    <atom:link href="http://nick-tomlin.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Jun 2018 02:33:57 +0000</pubDate>
    <lastBuildDate>Thu, 21 Jun 2018 02:33:57 +0000</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Capturing errors and letting them free with set -e and set +e in bash</title>
        <description>&lt;p&gt;TLDR: Use &lt;code class=&quot;highlighter-rouge&quot;&gt;set -e&lt;/code&gt; to make the current shell exit if a command run within it exists unsuccessfully and &lt;code class=&quot;highlighter-rouge&quot;&gt;set +e&lt;/code&gt; to disable the behavior&lt;/p&gt;

&lt;p&gt;Whether you love or hate Bash, it’s hard to deny the raw beauty of Bash scripting. Portable (mostly!), surprisingly concise, and perfect for environments where you don’t have (or want) the overhead of a higher level language, Bash can be a wonderful go-to when hopping between *nix environments. I’ve recently been using it to write some common docker &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;s for running a few services in development and ran into an issue where I wanted the behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;set -e&lt;/code&gt; enabled, disabled, and re-enabled in same script.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set -e&lt;/code&gt;, makes the current shell exit if any command run inside of it exits with a non &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; status. While this may seem harsh at first, it’s a great way to ensure that an error in one step of you script doesn’t lead to undefined behavior elsewhere; it’s much better to stop a script when you fail to connect to a database than have it merrily chug along trying to copy from nowhere.&lt;/p&gt;

&lt;p&gt;Because Bash is always testing you, it would be too easy to have something like &lt;code class=&quot;highlighter-rouge&quot;&gt;exit_on_errors(true)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;exit_on_errors(false)&lt;/code&gt; what we do have is the wonderful &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; command. While &lt;code class=&quot;highlighter-rouge&quot;&gt;help set&lt;/code&gt; is actually quite helpful, it’s easy to miss the following line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Using + rather than - causes these flags to be turned off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my case, I had something like the following pseudocode:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wait for a service to spin up; exit 1 after 30 seconds&lt;/span&gt;
wait-for-my-service-or-exit http://my-service/healthcheck

&lt;span class=&quot;c&quot;&gt;# ensure local data uses most recent copy&lt;/span&gt;
command_to_check_if_data_current
&lt;span class=&quot;nv&quot;&gt;DATA_CURRENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATA_CURRENT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# update the data from from my-service&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# if we don't have our file&lt;/span&gt;
  download_data_from_my_service
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But I was never getting to my &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement because &lt;code class=&quot;highlighter-rouge&quot;&gt;command_to_check_if_data_current&lt;/code&gt; would exit with a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; if the data didn’t exist in the container. This was because I was using &lt;code class=&quot;highlighter-rouge&quot;&gt;set -e&lt;/code&gt; in my script to protect against unknown failures and the &lt;code class=&quot;highlighter-rouge&quot;&gt;command_to_check_if_data_current&lt;/code&gt; command  (which called &lt;code class=&quot;highlighter-rouge&quot;&gt;exit 1&lt;/code&gt;) would exit the parent script regardless of whether or not it was called in a subshell.&lt;/p&gt;

&lt;p&gt;The solution was to use a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;set +e&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set -e&lt;/code&gt;  to wrap my call to &lt;code class=&quot;highlighter-rouge&quot;&gt;command_to_check_if_data_current&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ensure my-service is up&lt;/span&gt;
wait-for-my-service-or-exit http://my-service/healthcheck

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +e
&lt;span class=&quot;c&quot;&gt;# ensure local data uses most recent copy&lt;/span&gt;
command_to_check_if_data_current
&lt;span class=&quot;nv&quot;&gt;DATA_CURRENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATA_CURRENT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# update the data from from my-service&lt;/span&gt;
  download_data_from_my_service
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not cleanest code perhaps, but it allows for isolating known failures and still ensuring that unknown errors stop your script when they should.&lt;/p&gt;

&lt;p&gt;Happy bashing!&lt;/p&gt;
</description>
        <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2018/05/17/capturing-errors-and-letting-them-with-set-e-and-e-in-bash/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2018/05/17/capturing-errors-and-letting-them-with-set-e-and-e-in-bash/</guid>
        
        
      </item>
    
      <item>
        <title>Speeding up zsh loading times by lazily loading nvm</title>
        <description>&lt;p&gt;A &lt;a href=&quot;https://twitter.com/lejeunerenard?lang=en&quot;&gt;friend of mine&lt;/a&gt; was doing some spring cleaning on his shell and it prompted me to go on my own journey.&lt;/p&gt;

&lt;p&gt;After running &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/time zsh -i -c exit&lt;/code&gt; I found out that my load time for zsh was &lt;em&gt;over 4 seconds&lt;/em&gt; 🙀. This was apparently something that I had just gotten used to but seeing the numbers in the cold light of my terminal made me realize that something had to change.&lt;/p&gt;

&lt;p&gt;After some frantic Googling, I found Benny C. Wong’s excellent post on &lt;a href=&quot;https://bennycwong.github.io/post/speeding-up-oh-my-zsh/&quot;&gt;speeding up oh my zsh&lt;/a&gt; which pointed at NVM and RVM as likely culprits. I quickly removed NVM from my &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; and saw startup times go to 0.14 seconds!&lt;/p&gt;

&lt;p&gt;The only wrinkle was that I now needed to manually load &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm&lt;/code&gt; whenever I needed to use it, which was less than ideal for my JavaScript heavy workflow. That same friend had the idea of loading nvm when cd-ing into a directory and I took that idea and modified some existing &lt;code class=&quot;highlighter-rouge&quot;&gt;chpwd&lt;/code&gt; &lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions&quot;&gt;zsh hooks&lt;/a&gt; to lazily load &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm use&lt;/code&gt; if I cd’ed into a directory with an &lt;code class=&quot;highlighter-rouge&quot;&gt;.nvmrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ~/.zshrc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;load-nvm &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OSTYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;darwin&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NVM_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.nvm
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; nvm&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/nvm.sh &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; nvm&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/nvm.sh
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.nvm/nvm.sh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.nvm/nvm.sh&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

load-nvmrc&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; .nvmrc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .nvmrc &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;nvm &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;load-nvm
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;nvm use
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
add-zsh-hook chpwd load-nvmrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Edit: I originally used &lt;code class=&quot;highlighter-rouge&quot;&gt;command -v&lt;/code&gt; which doesn’t seem to recognize &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm&lt;/code&gt; properly, hit tip to Sean for switching to &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I now have a &lt;em&gt;much&lt;/em&gt; snappier shell that loads &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm&lt;/code&gt; when I cd into a node project. 🎉&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2018/03/10/speeding-up-zsh-loading-times-by-lazily-loading-nvm/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2018/03/10/speeding-up-zsh-loading-times-by-lazily-loading-nvm/</guid>
        
        
      </item>
    
      <item>
        <title>Cron in Elixir with Quantum</title>
        <description>&lt;p&gt;This post showcases some examples of using &lt;a href=&quot;https://github.com/c-rack/quantum-elixir&quot;&gt;quantum&lt;/a&gt; in vanilla OTP and Phoenix Elixir applications. The sample repositories are available at &lt;a href=&quot;https://github.com/NickTomlin/quantum_otp_example&quot;&gt;nicktomlin/quantum_otp_example&lt;/a&gt; and &lt;a href=&quot;https://github.com/NickTomlin/quantum_phoenix_example&quot;&gt;nicktomlin/quantum_phoenix_example&lt;/a&gt; respectively.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I’ve been diving into Elixir and I’ve found to the language to be full of lovely surprises that have forced me to re-think the way I approach basic problems. One of those things I’ve been re-examining is the concept of regularly scheduled tasks. My first thought in doing anything on a regular basis is Cron or a job queuing framework like Resque or Delayed Job. Elixir, however, provides some great built in tools for &lt;a href=&quot;https://stackoverflow.com/a/32097971&quot;&gt;running scheduled tasks&lt;/a&gt; without the need for external libraries or toolchains.&lt;/p&gt;

&lt;p&gt;I’ve been looking to replace an internal job at work that currently runs on cron with an Elixir OTP application. Using Elixir’s schedulers worked, but managing a large number of jobs quickly got unruly. That’s where &lt;a href=&quot;https://github.com/c-rack/quantum-elixir&quot;&gt;quantum&lt;/a&gt; steps in to provide cron-like syntax and management for Elixir applications.&lt;/p&gt;

&lt;h2 id=&quot;otp-getting-started&quot;&gt;OTP: Getting Started&lt;/h2&gt;

&lt;p&gt;If you are still getting familiar with Elixir and OTP patterns, as I am, the terse quantum README may not be quite enough to get you up and running; I’ve created a small &lt;a href=&quot;https://github.com/NickTomlin/quantum_otp_example&quot;&gt;demo app&lt;/a&gt; that you can run locally to showcase Quantum Elixir’s V2 API. Feel free to dive right in there or walk along here. I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;mix new quantum_example&lt;/code&gt; to scaffold the project.&lt;/p&gt;

&lt;p&gt;First, let’s add &lt;a href=&quot;https://github.com/c-rack/quantum-elixir&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;quantum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/bitwalker/timex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timex&lt;/code&gt;&lt;/a&gt; to our mix dependencies:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# mix.exs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:quantum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~&amp;gt; 2.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:timex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~&amp;gt; 3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;mix deps.get&lt;/code&gt; to install things.&lt;/p&gt;

&lt;p&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/scheduler.ex&lt;/code&gt; and setup &lt;code class=&quot;highlighter-rouge&quot;&gt;Quantum.Scheduler&lt;/code&gt;. Here &lt;code class=&quot;highlighter-rouge&quot;&gt;otp_app&lt;/code&gt; should correspond to the atom we declare for our application in &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Quantum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;otp_app:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:quantum_example&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setup your supervisor tree in an &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/quantum_test.ex&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QuantumExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;strategy:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_task&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tmp/app_time.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;From the App &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This could easily be stored in a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/supervisor.ex&lt;/code&gt; but I’ve chosen to include everything in a single file for simplicity.&lt;/p&gt;

&lt;p&gt;Finally, we’ll need to configure a job. While Quantum does support dynamic scheduling, it’s highly likely that you’ll be using the static config format, so you can add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;config/dev.exs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/dev.exs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;level:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:debug&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:quantum_example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;jobs:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;custom_task:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;schedule:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*/4 * * * *&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;task:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tmp/task.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;application_task:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;schedule:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*/2 * * * *&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;task:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QuantumExample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:app_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a few things happening here,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We are enabling &lt;code class=&quot;highlighter-rouge&quot;&gt;:debug&lt;/code&gt; logging to get some nice visibility into how Quantum is running things&lt;/li&gt;
  &lt;li&gt;Quantum’s scheduler is going to look up configuration at the atom specified by &lt;code class=&quot;highlighter-rouge&quot;&gt;otp_app&lt;/code&gt; and then look for the Scheduler class that we included it in (in our case &lt;code class=&quot;highlighter-rouge&quot;&gt;QuantumExample.Scheduler&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Our configuration uses Quantum’s named job syntax to provide some nice meta data in our Application’s logs&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_task&lt;/code&gt; executes some inline elixir code (this is probably &lt;em&gt;not&lt;/em&gt; something you want to do in production!)&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;application_task&lt;/code&gt; uses a tuple of &lt;code class=&quot;highlighter-rouge&quot;&gt;{:atom, :function_name, :args[]}&lt;/code&gt; to invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;app_task&lt;/code&gt; function on our &lt;code class=&quot;highlighter-rouge&quot;&gt;QuantumExample&lt;/code&gt; application. You can obviously use any other module and function in your application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;otp-running&quot;&gt;OTP: Running&lt;/h2&gt;

&lt;p&gt;Now that we’ve set up the necessary modules and configuration, we can actually run the code!&lt;/p&gt;

&lt;p&gt;To start the server in the background:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix run --no-halt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, to start the server and a REPL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inspection&quot;&gt;Inspection&lt;/h2&gt;

&lt;p&gt;In an &lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt; session, you’ll see Quantum’s verbose logging adding your jobs; after that you can interact with your scheduler:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;09:27:23.917 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job :application_task
09:27:23.930 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job :mix_task
iex&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; QuantumTest.Scheduler.jos
&lt;span class=&quot;c&quot;&gt;# your job information&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also dynamically add jobs through the console:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; import Crontab.CronExpression
iex&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; QuantumTest.Scheduler.add_job&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;~e[1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, fn -&amp;gt; :ok end&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
iex&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:nonode@nohost][Elixir.Quantum.JobBroadcaster] Adding job &lt;span class=&quot;c&quot;&gt;#Reference&amp;lt;0.2079463013.1644429313.228250&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you wait a bit, you’ll even see some nice logging:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;18:34:00.016 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:nonode@nohost][Elixir.Quantum.Executor] Task &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;job :application_task started on node :nonode@nohost
18:34:00.017 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:nonode@nohost][Elixir.Quantum.Executor] Execute started &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;job :application_task
18:34:00.024 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:nonode@nohost][Elixir.Quantum.Executor] Execution ended &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;job :application_task, which yielded result: :ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;phoenix-getting-started&quot;&gt;Phoenix: Getting started&lt;/h2&gt;

&lt;p&gt;Since Phoenix builds on the same OTP patterns, integration with quantum is similar to that of a generic Elixir application.&lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;https://github.com/NickTomlin/quantum_phoenix_example&quot;&gt;quantum phoenix exmaple repo&lt;/a&gt;. This assumes you ran &lt;code class=&quot;highlighter-rouge&quot;&gt;phx.new quantum_phoenix&lt;/code&gt; just like I did :)&lt;/p&gt;

&lt;p&gt;As in the OTP example we’ll need to add &lt;a href=&quot;https://github.com/c-rack/quantum-elixir&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;quantum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/bitwalker/timex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timex&lt;/code&gt;&lt;/a&gt; to our application’s dependencies:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# mix.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# ... many other deps&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:quantum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~&amp;gt; 2.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:timex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~&amp;gt; 3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, we create a scheduler class (&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/quantum_phoenix/scheduler.ex&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumPhoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Quantum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;otp_app:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:quantum_phoenix&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And include it in our Phoenix OTP application (&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/quantum_phoenix/application.ex&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumPhoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# other phoenix supervisors/workers&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QuantumPhoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;strategy:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumPhoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll also create a module to handle our task in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/quantum_phoenix/task.ex&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumPhoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tmp/quantum_phoenix.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can configure quantum in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:quantum_phoenix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QuantumPhoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;jobs:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;phoenix_job:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;schedule:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*/2 * * * *&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;task:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QuantumPhoenix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;phoenix-run-it&quot;&gt;Phoenix: Run it!&lt;/h2&gt;

&lt;p&gt;After we’ve set things up, we can start our server with &lt;code class=&quot;highlighter-rouge&quot;&gt;phx.server&lt;/code&gt; see similar log output as we did with OTP:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[debug] [:nonode@nohost][Elixir.Quantum.Executor] Task for job :phoenix_job started on node :nonode@nohost
[debug] [:nonode@nohost][Elixir.Quantum.Executor] Execute started for job :phoenix_job
[debug] [:nonode@nohost][Elixir.Quantum.Executor] Execution ended for job :phoenix_job, which yielded result: :ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similar to our OTP app, we can also interact with Quantum in the mix repl:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix

iex(0)&amp;gt; import Crontab.CronExpression
iex(1)&amp;gt; [debug] [:nonode@nohost][Elixir.Quantum.ExecutionBroadcaster] Adding job #Reference&amp;lt;0.2079463013.1644429313.228250&amp;gt;
iex(2)&amp;gt; [debug] [:nonode@nohost][Elixir.Quantum.JobBroadcaster] Adding job #Reference&amp;lt;0.2079463013.1644429313.228250&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;phoenix-gotchas&quot;&gt;Phoenix: Gotchas&lt;/h2&gt;

&lt;p&gt;Integrating Quantum into phoenix was a snap, except for a &lt;em&gt;very strange&lt;/em&gt; compiler error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;== Compilation error in file lib/quantum_phoenix/scheduler.ex ==
** (CompileError) lib/quantum_phoenix/scheduler.ex:2: Crontab.CronExpression.__struct__/0 is undefined, cannot expand struct Crontab.Cr
onExpression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The kind folks on Elixir Forum &lt;a href=&quot;https://elixirforum.com/t/cannot-compile-quantum-with-elixir-1-6-1/12739/3&quot;&gt;helped me resolve&lt;/a&gt; with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -rf _build &amp;amp;&amp;amp; mix compile&lt;/code&gt;.  Gremlins. ¯_(ツ)_/¯&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So far I’ve been extremely impressed with the tooling and ecosystem around Elixir. The Erlang underpinnings can be a little complicated but there are plenty of resources available to help; most of the tools I’ve found come pretty close to the holy grail of “it just works.”&lt;/p&gt;

&lt;p&gt;Hopefully this helps you along in your own journey!&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2018/02/26/cron-in-elixir-with-quantum/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2018/02/26/cron-in-elixir-with-quantum/</guid>
        
        
      </item>
    
      <item>
        <title>Issues loading dependencies in the Clojure repl</title>
        <description>&lt;p&gt;I’ve been dusting off my &lt;em&gt;very dusty&lt;/em&gt; Clojure parens and recently ran into a head scratcher when attempting to mess around with &lt;a href=&quot;https://github.com/cgrand/enlive&quot;&gt;enlive&lt;/a&gt; in a Clojure repl.&lt;/p&gt;

&lt;p&gt;When attempting to follow along tutorial I naively popped open my repl and attempted to require enlive like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(require [net.cgrand.enlive-html :as html])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And received the following lovely exception:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CompilerException java.lang.ClassNotFoundException: net.cgrand.enlive-html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://stackoverflow.com/a/9811346/1048479&quot;&gt;this&lt;/a&gt; informative stackoverflow post, I was reminded of the difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; nested within the &lt;code class=&quot;highlighter-rouge&quot;&gt;ns&lt;/code&gt; macro and &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; run inside of a repl.&lt;/p&gt;

&lt;p&gt;The solution is to do the work the &lt;code class=&quot;highlighter-rouge&quot;&gt;ns&lt;/code&gt; macro is doing for you, namely, to quote the vector you are passing to &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(require '[net.cgrand.enlive-html :as html])
(html/text (first (html/select (html/html-resource (java.net.URL. &quot;https://clojure.org&quot;))  [:.clj-header-message])))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://8thlight.com/blog/colin-jones/2012/05/22/quoting-without-confusion.html&quot;&gt;Quoting without confusion&lt;/a&gt; is a good reference here if you (like me) get confused by quotes.&lt;/p&gt;

&lt;p&gt;Additionally, for easy &lt;code class=&quot;highlighter-rouge&quot;&gt;repl&lt;/code&gt;ing, it’s probably easier to do this with &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; (which will clobber your current namespace but is worth it for hacking) or to stick this all in a file and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;in-ns&lt;/code&gt; combo (more on that &lt;a href=&quot;https://www.beyondtechnicallycorrect.com/2013/04/14/loading-and-using-namespaces-in-the-clojure-repl/&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; e.g. for src/my_ns.clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; that has a ns of `my-ns`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my_ns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in-ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'my-ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; you can now access variables defined in that namespace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my-ns/my-func&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hopefully this helps shortcut someone else. Cheers!&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2017/11/10/clojure-dependencies-and-lein-repl/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2017/11/10/clojure-dependencies-and-lein-repl/</guid>
        
        
      </item>
    
      <item>
        <title>VimL Functions</title>
        <description>&lt;p&gt;I’ve started a slow descent into the madness that is VimL. One of the things that I’ve found to be initially confusing is how Vim deals with functions. This may be very obvious to some but It caused me enough head scratching to warrant recording some thoughts here.&lt;/p&gt;

&lt;details class=&quot;tldr&quot;&gt;
  &lt;summary&gt;Cheatsheet&lt;/summary&gt;

  &lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; All VimL functions must be called&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Operations like assignment&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; or passing to another function or built in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; implicitly call a function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; var &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; MyFunc&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
echo MyFunc&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Otherwise, you _must_ :call a function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; MyFunc&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; You can also store a reference to your function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; FuncRef &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'MyFunc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; and :call it with arguments or pass it to another function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;FuncRef&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Or, stringify and execute it&lt;/span&gt;
execute &lt;span class=&quot;s1&quot;&gt;'echo '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; string&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;FuncRef&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Bonus: Lambdas (vim8+ and neovim) are pretty swank&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; MyLambda &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; str &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; str &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
echo MyLambda&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yay'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; yay!&lt;/span&gt;

echo map&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; _&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; val &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; val * &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;

&lt;h1 id=&quot;getting-func-y&quot;&gt;Getting func-y&lt;/h1&gt;

&lt;p&gt;Having one way to call a function is boring: most languages have a few different ways to invoke a function you or someone you love has defined. Not to be outdone, VimL has some twists of its own related to functions.&lt;/p&gt;

&lt;p&gt;Let’s create a very simple function:&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; All Viml functions must begin with a capitol letter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; Hello&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; :wave: Just in case you were wondering&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; all named arguments are only available on the magical&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; arguments dictionary (a) within the function&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a:name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The easiest way to call this function in a script, we could simply assign it to a variable, or pass the result of invoking it to a built in like &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; greeting &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; Hello&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
echo greeting
&lt;span class=&quot;c&quot;&gt;&quot;Hi Bob!&quot;&lt;/span&gt;
echo Hello&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;Hi Bob!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes a &lt;em&gt;lot&lt;/em&gt; of sense! We’ve always been told that VimL doesn’t make much sense; it feels good to prove people wrong doesn’t it?&lt;/p&gt;

&lt;p&gt;But, let’s say we just want the side effects of a function and do not want to deal with whatever it returns. It’d make sense to do the same thing but just not assign it right?&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MySideEffectFunc&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'some side effecty argument'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
E492&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Not an editor command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; MySideEffectFunc&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not so fast! VimL has other ideas; while certain built in commands (like &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;) can be invoked, functions cannot simply be called without passing or assigning their value. This is because things like &lt;code class=&quot;highlighter-rouge&quot;&gt;echo Foo()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;let x = Foo()&lt;/code&gt; implicitly evaluate or call any expression they are handed (in this case, the expression being invoking the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;). Since &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo()&lt;/code&gt; isn’t good enough, we need a way to tell VimL to actually call the function.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/eval.html#:call&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:call&lt;/code&gt;&lt;/a&gt; steps in. &lt;code class=&quot;highlighter-rouge&quot;&gt;:call&lt;/code&gt; calls a function, with up to 20 arguments (because 19 just wasn’t enough), and discards its return value.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; MySideEffectFunc&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'this wooooorks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Call is the &lt;em&gt;the&lt;/em&gt; way of calling functions within your plugins, or invoking other functions from ex mode.&lt;/p&gt;

&lt;h1 id=&quot;show-me-your-references&quot;&gt;Show me your references&lt;/h1&gt;

&lt;p&gt;Let’s explore another way we can use our functions: references. Let’s take a common example, using &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/eval.html#map()&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/a&gt; with a function we’ve previously defined. We can use Vim’s &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; keyword to create a funcref (that is a reference to function &lt;em&gt;wink&lt;/em&gt; &lt;em&gt;wink&lt;/em&gt;) which allows us to pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, or another function.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; Exclaim&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;idx&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a:name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; greetings &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hey'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Howdy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; exclaimed &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;greetings&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Exclaim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
echo exclaimed
&lt;span class=&quot;c&quot;&gt;&quot; ['Hey!', 'Howdy!', 'Hi!']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we wanted to take a more generic function that did not need to be aware of &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt;, we could use &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;ify our funcref and use &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;’s second argument (a string to be &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;d) to invoke our function with the value of each pair we are iterating through:&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; Exclaim&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a:name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; greetings &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hey'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Howdy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; exclaimed &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;greetings&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; string&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Exclaim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'v:val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
echo exclaimed
&lt;span class=&quot;c&quot;&gt;&quot; ['Hey!', 'Howdy!', 'Hi!']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That works, but it’s not very readable. Luckily, more modern versions of Vim have an answer.&lt;/p&gt;

&lt;h1 id=&quot;lambdas-to-the-rescue&quot;&gt;Lambdas to the rescue&lt;/h1&gt;

&lt;p&gt;If we, or our intended users, are using vim8+ or neovim, we can use the new lambda syntax to simplify things:&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; Exclaim&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a:name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; greetings &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hey'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Howdy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; exclaimed &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;greetings&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; val &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; Exclaim&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;val&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;
echo exclaimed
&lt;span class=&quot;c&quot;&gt;&quot; ['Hey!', 'Howdy!', 'Hi!']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can even remove our simple function entirely and perform our string modifications within the Lambda if we want:&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; greetings &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hey'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Howdy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; exclaimed &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;greetings&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; val &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; val &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
echo exclaimed
&lt;span class=&quot;c&quot;&gt;&quot; ['Hey!', 'Howdy!', 'Hi!']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h1&gt;

&lt;p&gt;There’s so much under the hood with VimL but effectively using functions is a great way to get started writing a simple script or plugin to help make your life better. I hope this helps remove some of the confusion that I initially had.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2017/07/12/viml-functions/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2017/07/12/viml-functions/</guid>
        
        
      </item>
    
      <item>
        <title>JSX with Emmet Vim</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Apparently I’m very bad about writing blog posts; I’m going to try and do more bite sized “tactical” updates like this and see how it goes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve used the excellent &lt;a href=&quot;https://github.com/mattn/emmet-vim&quot;&gt;emmet.vim&lt;/a&gt; for quite some time but had never gotten around to fixing some pesky annoyances when dealing with JSX: the default &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; won’t work with JSX and that double quoted attributes are pure evil. After perusing &lt;a href=&quot;https://github.com/mattn/emmet-vim/issues/255&quot;&gt;this emmet vim issue&lt;/a&gt; (from 2015! I’m way behind the times!) and trying one of the many solutions thrown out in the thread, I found the following configuration for Emmet Vim suited my needs:&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; .vimrc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:user_emmet_settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'javascript.jsx'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;'extends'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jsx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;'quote_char'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am now happily Vimming away:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/124232.js&quot; id=&quot;asciicast-124232&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;Please share any tricks/tips for productive emmeting in the comments. Cheers!&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2017/06/10/jsx-with-emmet-vim/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2017/06/10/jsx-with-emmet-vim/</guid>
        
        
      </item>
    
      <item>
        <title>Hardcoded sub queries in Postgres</title>
        <description>&lt;p&gt;I recently ran into an issue where I needed to write an &lt;code class=&quot;highlighter-rouge&quot;&gt;IN&lt;/code&gt; filter that consumed values from a sub query and hard-coded list.  While I could express this relatively elegantly using an ORM to run the subquery and append the results to an array of hardcoded strings, I was struggling with how to do so raw SQL query.&lt;/p&gt;

&lt;p&gt;My first attempt was to use &lt;code class=&quot;highlighter-rouge&quot;&gt;WITH&lt;/code&gt; and a simple CTE:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hardcoded_user_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal_users&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hardcoded_user_ids&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was fine, but the CTE felt a bit verbose and unnecessary for my purposes. After some experimentation, I realized that this is possible using &lt;code class=&quot;highlighter-rouge&quot;&gt;AS&lt;/code&gt; and specifying the column name:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal_users&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hardcoded_user_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the CTE route may actually be clearer in the long run, I like the formatting of the inline values list for simple one offs.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2016 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2016/05/22/hardcoded-subqueries-in-postgres/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2016/05/22/hardcoded-subqueries-in-postgres/</guid>
        
        
        <category>sql,</category>
        
        <category>postgres</category>
        
      </item>
    
      <item>
        <title>SQL Goodies</title>
        <description>&lt;p&gt;I’ve recently been diving into SQL (&lt;a href=&quot;http://www.postgresql.org/&quot;&gt;postgres&lt;/a&gt; to be exact). Here are a few random tidbits that have helped me on my journey.&lt;/p&gt;

&lt;h2 id=&quot;things-to-read&quot;&gt;Things to read&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Don’t read blogs&lt;/strong&gt; (except mine 😉) While there are &lt;em&gt;many&lt;/em&gt; helpful resources on the internet for learning about SQL, I’ve found the scattershot approach of reading blogs to be less than helpful in my own journey. They often cover only part of a subject or are too focused on a specific dialect to be truly helpful. I’m not suggesting that articles are never helpful, but that they can remove clarity when you are starting out. Longer form material is much better suited at the early stages.&lt;/p&gt;

&lt;p&gt;To that end, I’ve found &lt;a href=&quot;http://www.amazon.com/Learning-SQL-Alan-Beaulieu/dp/0596520832&quot;&gt;Learning SQL&lt;/a&gt; to be the best comprehensive guide on SQL; it includes a sample database and exercises with each chapter that provide a great way to exercise the concepts you read. There are plenty of long-form books out there, but this was the most approachable and comprehensive for basic concepts.&lt;/p&gt;

&lt;p&gt;SQL Joins were an initially for me, but &lt;a href=&quot;https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/&quot;&gt;A visual explanation of SQL joins&lt;/a&gt; helped clear up the confusion. It is the best of &lt;em&gt;many many&lt;/em&gt; posts about joins.&lt;/p&gt;

&lt;h2 id=&quot;things-to-do&quot;&gt;Things to do&lt;/h2&gt;

&lt;p&gt;Like many things, getting more comfortable with SQL is all about actually doing things with the language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Play around with &lt;a href=&quot;http://sqlfiddle.com/&quot;&gt;SQL fiddle&lt;/a&gt; which is a great low-impact place to try out new ideas and concepts&lt;/li&gt;
  &lt;li&gt;Use simple CTE’s when you don’t want/need a schema
    &lt;ul&gt;
      &lt;li&gt;This is a great low overhead way of playing around with a small set of data without the need to declare a set schema or &lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt; rows.&lt;/li&gt;
      &lt;li&gt;In Postgres, this can be accomplished using &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- postgres only, alas&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Harry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Potter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Weasley'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;wands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Unicorn Core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Maple Core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wands&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Use a dataset that matters to you. If you workplace provides a sanitized read-only copy of data, use it! If that doesn’t spark your interest, create your own database (favorite sports tems, ninja clans, etc), or convert something from &lt;a href=&quot;https://www.google.com/#q=open+data&quot;&gt;data.gov&lt;/a&gt; or other data providers). I find it much easier to work with data that I have an emotional or business connection to.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;an-orm-should-be-a-jetpack-not-a-crutch&quot;&gt;An ORM should be a jetpack, not a crutch&lt;/h2&gt;

&lt;p&gt;ORMs like ActiveRecord are fantastic, they enable teams to write easy, reusable queries without littering your code with verbose SQL. Unfortunately, this means that when you need to dip down into raw SQL or troubleshoot a SQL problem, you can be left out in the cold.&lt;/p&gt;

&lt;p&gt;Most ORMs provide a query logging feature, or a way to translate a series of method calls into an SQL statement. In active record, this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;to_sql&lt;/code&gt; method, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;MyModel.joins(:my_association).where(query: true).to_sql&lt;/code&gt;. Using this can help you understand and translate complicated ORM logic into SQL to better understand what is going on under the hood.&lt;/p&gt;

&lt;p&gt;Ensure that you understand the structure of your database by looking at it in a console (or a schema file, if your ORM provides one). Even if you are using an ORM, this will make the connections between objects much easier to visualize. It also helps demystify abstract and potentially confusing ORM concepts like &lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html#polymorphic-associations&quot;&gt;PolyMorphic Associaitons&lt;/a&gt; when you see what they are doing under the hood.&lt;/p&gt;

&lt;p&gt;Once you have a feel for the structure of a database, use toy projects or a throwaway branch to selectively replace ORM code with raw SQL. Many ORMs will give you an ability to mix raw SQL in with their own wrappers. E.g. ActiveRecord will allow you to &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; off of queries, or execute a raw sql statement with &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord.base.connection.execute&lt;/code&gt;. This provides a great way to gradually start using SQL without jumping in head first (if that’s not your cup of tea). It’s also a great way to see how an ORM may optimize (or &lt;em&gt;not&lt;/em&gt; optimize) your queries.&lt;/p&gt;

&lt;p&gt;The more you learn about SQL (and how your ORM formats SQL) the better your code (whether raw or ormified) will be.&lt;/p&gt;

&lt;h2 id=&quot;console-tips&quot;&gt;Console tips&lt;/h2&gt;

&lt;p&gt;The SQL console is one of the most useful tools for learning SQL and discovering your dataset. Here are a few tricks and tips&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;explain&lt;/code&gt; to see what your queries are doing under the hood&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show tables&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;\d&lt;/code&gt; for Postgres) gives you your DB’s structure&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;describe &amp;lt;table&amp;gt;&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;\d &amp;lt;table&amp;gt;&lt;/code&gt; for PG) gives you a table’s structure&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt; in a console will open the current command in the editor of your choice. Very handy for tweaking long queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Postgres Only&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\x&lt;/code&gt; Use super pretty “extended display” for outputting queries&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\i file.sql&lt;/code&gt; (PG only) executes a query from a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\o output.out&lt;/code&gt; writes output to &lt;code class=&quot;highlighter-rouge&quot;&gt;output.out&lt;/code&gt; which can be great for storing the results of a query for later&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2016/05/18/sql-goodies/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2016/05/18/sql-goodies/</guid>
        
        
        <category>sql,</category>
        
        <category>postgres</category>
        
      </item>
    
      <item>
        <title>Programmatically running npm scripts</title>
        <description>&lt;p&gt;npm has become an essential part of my tool-chain, and I often use the &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt; entry in lieu of build tools like Gulp or Grunt for small to medium sized projects. One issue that I’ve encountered is wanting to kick off tasks stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt; without actually running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; on the shell. Googling did not lead to any easy answers, but the solution was readily apparent from the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-cli&lt;/code&gt; &lt;a href=&quot;https://github.com/npm/npm/blob/master/bin/npm-cli.js#L69&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have installed npm locally &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i npm --save&lt;/code&gt; [insert “Yo dawg…” reference here], you can require and use it:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'npm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;er&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;er&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is obviously a very simplistic use case, but hopefully it provides some food for thought. Let me know if you are able to build something interesting with it.&lt;/p&gt;

&lt;h1 id=&quot;edit&quot;&gt;Edit&lt;/h1&gt;

&lt;p&gt;In the comments, @bfredit noted that you can use the &lt;a href=&quot;https://www.npmjs.com/package/global-npm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;global-npm&lt;/code&gt;&lt;/a&gt; module to avoid bringing the hefty &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package locally.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Sep 2015 17:32:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2015/09/04/programmatically-running-npm-scripts/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2015/09/04/programmatically-running-npm-scripts/</guid>
        
        
        <category>npm</category>
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Using stackoverflow as a learning tool</title>
        <description>&lt;p&gt;I first experienced the magic of Google when I was trapped on the 2nd puzzle in &lt;a href=&quot;http://en.wikipedia.org/wiki/Myst&quot;&gt;Myst&lt;/a&gt;: a few quick keyboard strokes and I had the solution to that damnable clock puzzle that thwarted me for hours. My nine year old self was astounded that someone out there had an answer to the exact question I typed in. The only thing that recaptures the magic for me is &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While it primarily serves as a knowledge base — one of the best if not &lt;em&gt;the&lt;/em&gt; best — StackOverflow can also be used as a powerful tool in the apprentice developer’s kit. Taking a cue from the invaluable &lt;a href=&quot;http://apprenticeship-patterns.labs.oreilly.com/&quot;&gt;Apprenticeship Patterns&lt;/a&gt;, i’ve developed a few patterns of my own that I use to get the most out of Stack Overflow:&lt;/p&gt;

&lt;h2 id=&quot;1-flashcards&quot;&gt;1. Flashcards&lt;/h2&gt;

&lt;p&gt;I’ve always found flashcards and quizzes to be the most helfpul ways to retain things. When I was studying language in Primary school, I always made it a point to have a friend (or my mom, thanks mom!) quiz me on a list of topics or vocabulary words. This practice of quizzing allowed me to rediscover words/topics that had fallen out of my memory, and get a better understanding on ones I already knew. I use SO in a simlar way.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Look for low to no answer questions in the discipline you are interested (&lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt; for example).&lt;/li&gt;
  &lt;li&gt;give the question a quick scan, to see if you know the answer&lt;/li&gt;
  &lt;li&gt;if so, give a clear and concise answer. Otherwise, make a note of the question for later, and then go back to step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The key here is to not get bogged down researching the answer to a question that is beyond your quick-acccess memory (thats for the next pattern). I find this much more stimulating than making my own flashcards, and the variety of questions help me look at what I know from a different perspective, or reveal holes in my own knowledge. Keeping a log of questions that I do not know gives me research projects for later.&lt;/p&gt;

&lt;h2 id=&quot;2-deep-dive&quot;&gt;2. Deep Dive&lt;/h2&gt;

&lt;p&gt;There are a lot of questions on SO (usually by inexperienced users) that can be solved with a simple google search, or a cursory examination of documentation. It’s easy to pick up some quick reputation points by answering these — i’ve definetely done so — but it’s easy to fall prey to using surface level knowledge instead of deepening your understanding of a topic.&lt;/p&gt;

&lt;p&gt;To get around this, I will set aside certain times where I only answer questions by referring to the source code of the technology in question. This forces me to really understand the fundamentals at play in solving the question. Often, I won’t be able to figure out what is going on in time to get the right answer (or maybe at all), but the end result is that I gain a much much better understanding of how the technology functions, and a better grasp of how to read code. If I do happen to get the right answer, it’s all the more rewarding.&lt;/p&gt;

&lt;h2 id=&quot;3-reduce-reuse-recycle&quot;&gt;3. Reduce, Reuse, Recycle&lt;/h2&gt;

&lt;p&gt;SO has a wealth of “canonized” questions and answers, and i’ve found it helpful to keep a list of the ones that I find the most helpful. Combining and reviewing these has allowed me to get a much better handle on complex concepts like OO, Prototypical Inheritance in JS, and what the hell MVC is.&lt;/p&gt;

&lt;p&gt;I’ve found it helpful to collect several similar answers in a blog post or entry in my private wiki. This creates a rich “super answer”, and the act of synthesizing helps me better understand the topic.&lt;/p&gt;

&lt;p&gt;A second benefit of these “canonized” answers is battle bewtween various schools of thought on what the best way to solve a problem really is. Being able to see one of the creators of Python argue with another advanced user over the performance of Arrays is a wonderful gift to an apprentice programmer. I’ve found it useful to mark these answers, and then explore the reasoning behind each one.&lt;/p&gt;

&lt;h2 id=&quot;onward-and-upward&quot;&gt;Onward and Upward&lt;/h2&gt;
&lt;p&gt;StackOverflow has aided me incredibly, and I hope some of these patterns can help you as well. If you have any thoughts, &lt;a href=&quot;twitter.com/itsnicktomlin&quot;&gt;@mention me&lt;/a&gt; or leave a comment.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jul 2013 20:45:00 +0000</pubDate>
        <link>http://nick-tomlin.com/2013/07/01/stackoverflow-as-a-learning-tool/</link>
        <guid isPermaLink="true">http://nick-tomlin.com/2013/07/01/stackoverflow-as-a-learning-tool/</guid>
        
        
      </item>
    
  </channel>
</rss>
